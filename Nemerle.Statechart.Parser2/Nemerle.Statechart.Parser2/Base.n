using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nitra;

namespace Nemerle.Statechart
{
  using Nemerle.Statechart.Grammar;
  using Nemerle.Statechart.Grammar.MainAst;
  using Nemerle.Statechart.Grammar.BaseAst;
  using Nemerle.Statechart.Grammar.PseudoStatesAst;
  using Nemerle.Statechart.Grammar.TransitionsAst;
  using Nemerle.Statechart.Grammar.TargetsAst;
  using Nemerle.Statechart.Grammar.TransitionsAst.Guard;
  using Nemerle.Statechart.Grammar.MainAst.StateMachine.StateMachineDecl;
  using Nemerle.Statechart.Grammar.ActionsAst.ActionList.Action;

  /// <summary>
  /// Description of Base.
  /// </summary>
  partial public class Parser
  {
    public flags_map : Hashtable[string, MachineFlag];
    public env : GlobalEnv;

    public this(flags : list[string * MachineFlag], env : GlobalEnv)
    {
      this.env = env;
      flags_map = Hashtable(flags);
    }

    public Parse(loc : Nemerle.Compiler.Location, text : string) : StateNode.StateMachine * list[Error]
    {
      def parserHost = ParserHost();
      if (string.IsNullOrWhiteSpace(text)) (null, []) else
      {
        def source = SourceSnapshot(text, loc.FileIndex, loc.File);
        def result = Main.StateMachine(source, parserHost);
        def ast = MainAstWalkers.StateMachine(result);

        if (result.IsSuccess) 
        {
          match (ast)
          {
            | MainAst.StateMachine.Ast as a => def res = ConvertTree(a);
                                              (res, [])
            | _                             => (null, [])
          }

        } else (null, result.GetErrors().NToList())
        //    def (line, col) = error.Location.StartLineColumn;
        //    WriteLine($<#$line:$col: $(error.Message)#>);
      }

    }

    GetNameIdentifier(fully : FullyQualified.Ast) : NameIdentifier
    {
      def id = fully.Identifiers[0];
      def pos = fully.Location.StartPos;
      match (id)
      {
        | Identifier.Ast(i) :: []   => NameIdentifier.Name(pos, fully.GetText(i))
        | lst                       => def lst = GetIdentifierText(lst);
                                       def (last, lst) = lst.SplitLast();
                                       NameIdentifier.QualifiedName(pos, last, lst)
      }

    }
    
    GetIdentifierText(id : list[Identifier]) : list[string]
    {
      id.FoldRight([], (x, a) => if (x is Identifier.Ast) x.GetText() :: a else a);
    }

    GetIdentifierData(id : list[Identifier]) : list[int * string]
    {
      id.FoldRight([], (x, a) => if (x is Identifier.Ast) (x.Location.StartPos, x.GetText()) :: a else a);
    }
    
    parse_expr(text : string) : PExpr
    {
      MainParser.ParseExpr(env, text);
    }
    
  }
}
