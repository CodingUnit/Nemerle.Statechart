using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using Nemerle.Statechart.Grammar;
  using Nemerle.Statechart.Grammar.MainAst;
  using Nemerle.Statechart.Grammar.BaseAst;
  using Nemerle.Statechart.Grammar.PseudoStatesAst;
  using Nemerle.Statechart.Grammar.TransitionsAst;
  using Nemerle.Statechart.Grammar.TargetsAst;
  using Nemerle.Statechart.Grammar.TransitionsAst.Guard;
  using Nemerle.Statechart.Grammar.MainAst.StateMachine.StateMachineDecl;
  using Nemerle.Statechart.Grammar.ActionsAst.ActionList.Action;
  
  /// <summary>
  /// Description of StateMachine.
  /// </summary>
  partial public class Parser
  {
    
    GetFlags(str : list[string]) : MachineFlags
    {
      def err = List();
      def proc_tok(str, a)
      {
        def flag= if (flags_map.ContainsKey(str)) flags_map[str] else 
                   {
                     err.Add(str);
                     MachineFlag.None
                   }
        flag | a
      }

      def flags = str.FoldLeft(MachineFlag.None, proc_tok);
      MachineFlags(flags, err.NToList());
    }
    
    ConvertTree(ast : MainAst.StateMachine.Ast) : StateNode.StateMachine
    {
      mutable flags = MachineFlag.None;
      mutable event_class = [];
      mutable event_decls = [];
      mutable names = [];
      mutable usings = [];
      mutable st_decl = [];
      mutable err = [];
      def decls = ast.StateMachineDecls;
      foreach (d in decls)
        {
          | Flags(Flags = (a, _))                                                                        => def data = GetIdentifierText(a);
                                                                                                          def fl = GetFlags(data);
                                                                                                          unless (fl.errors.IsEmpty()) err ::= StateNode.Flags(d.Location.StartPos, fl);
                                                                                                          flags |= fl.flags;
          | EventClass(EventsAst.EventClass.Ast(_, _, FullyQualifiedAny.Ast as f, o, _))                    => 
                                                                                                          def n = GetNameIdentifier(f);
                                                                                                          def evt = match (o)
                                                                                                                    {
                                                                                                                      | Some(EventsAst.EventClass.EventList.Ast(_, (e, _), _)) => GetIdentifierText(e)
                                                                                                                      | _                                                      => []
                                                                                                                    }
                                                                                                          event_class ::= StateNode.EventClassDecl(d.Location.StartPos, n, evt)
          | EventDecl(EventsAst.EventDecl.Ast(Name = EventIdentifier.Ast as a, Types = (t, _)))          => 
                                                                                                          def name = a.GetText();
                                                                                                          def lst = GetIdentifierText(t);
                                                                                                          event_decls ::= StateNode.EventDecl(d.Location.StartPos, name, lst);
          | Name(Name = n)                                                                               => match (n)
              {
                | Name.Nested.NameIdentifier.CommaIdentifier(_, i, _)
                | Name.Nested.NameIdentifier.AnyIdentifier(AnyIdentifier.Ast as i) => 
                    def name = i.GetText();
                    names ::= StateNode.Name(d.Location.StartPos, name);
                | _                                                          => ();
              }
          | Using(_, FullyQualifiedAny.Ast as f, _)                                                      => def data = GetNameIdentifier(f);
                                                                                                            usings ::= StateNode.Using(d.Location.StartPos, data.FullName)
          | StateDecl as d                                                                               => st_decl ::= d.StateDecl;
          | _                                                                                            => ()
        }
      def st = CreateState(ast.Location.StartPos, [], null, st_decl.Rev(), StateType.State(), None());
      def (name, error) = if (names.IsEmpty()) (null, []) else 
      {
        def name = names.Rev();
        (name.Head, name.Tail);
      }
      def error = error.Map(_ : StateNode) + err;
      def error = error.Map(x => StateNode.Error(x.pos, x));
      StateNode.StateMachine(ast.Location.StartPos, MachineFlags(flags, []), name?.name, st, usings.Rev(), event_decls.Rev(), event_class.Rev(), error.Rev())
    }

  }
}
