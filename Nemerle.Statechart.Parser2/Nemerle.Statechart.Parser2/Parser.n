using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nitra;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Statechart.Grammar;

namespace Nemerle.Statechart
{
  using Nemerle.Statechart.Grammar.MainAst;
  using Nemerle.Statechart.Grammar.BaseAst;
  using Nemerle.Statechart.Grammar.PseudoStatesAst;
  using Nemerle.Statechart.Grammar.TransitionsAst;
  using Nemerle.Statechart.Grammar.TargetsAst;
  using Nemerle.Statechart.Grammar.TransitionsAst.Guard;
  using Nemerle.Statechart.Grammar.MainAst.StateMachine.StateMachineDecl;
  using Nemerle.Statechart.Grammar.ActionsAst.ActionList.Action;
  /// <summary>
  /// Description of Parser.
  /// </summary>
  partial public class Parser
  {

    parse_action(pos : int, text : string) : Actions
    {
      def expr = parse_expr(text);
      def act = FsmAction.Expr(pos, expr);
      Actions(pos, act :: [])
    }

    GetActions(lst : ActionsAst.ActionList) : Actions
    {
      match (lst)
      {
        | ActionsAst.ActionList.Ast(_, a) => 
            match (a)
            {
              | SimpleActionList(ActionsAst.SimpleActionList.Ast((a, _))) => 
                  def act = a.FoldBack([], ((x, _), a) => if (x is Identifier.Ast as x) FsmAction.Normal(x.Location.StartPos, x.GetText(), []) :: a else a);
                  Actions(lst.Location.StartPos, act)
              | Expr(ActionsAst.ActionList.Action.Expr.Nested.Expr.SimpleExpr as e)
              | Expr(ActionsAst.ActionList.Action.Expr.Nested.Expr.LongExprAction(_, e, _)) => 
                  def text = e.GetText();
                  parse_action(e.Location.StartPos, text);
              | _ => Actions(lst.Location.StartPos, [])
            }
        | _ => Actions(lst.Location.StartPos, [])
      }
    }
    
    CreatePseudo(p : PseudoStatesAst.PseudoState) : option[StateNode.PseudoState]
    {
      def pos = p.Location.StartPos;
      def pseudo = match (p)
      {
        | PseudoState.Choice(_, Identifier.Ast as n, _, JunctionBody.Ast as b) => 
            def nodes = GetNodes(b);
            def name = n.GetText();
            PseudoStateModelNode.Junction(p.Location.StartPos, name, nodes, JunctionType.Choice)
        | PseudoState.EntryPoint(PseudoStatesAst.EntryPoint.Ast(n, TransitionsAst.EntryPointTransition.Ast as tr)) => 
            match (GetEntryPointTran(tr))
            {
              | Some(tr) => 
                  match (n)
                  {
                    | PseudoStatesAst.EntryPoint.EntryPointHead.Ver1(_, BaseAst.Identifier.Ast as n)
                    | PseudoStatesAst.EntryPoint.EntryPointHead.Ver2(BaseAst.Identifier.Ast as n, _)
                    | PseudoStatesAst.EntryPoint.EntryPointHead.Ver3(_, BaseAst.Identifier.Ast as n, _) => 
                        def name = n.GetText();
                        PseudoStateModelNode.EntryPoint(pos, name, tr)
                    | _ => null
                  }
              | _ => null
                                
            }
        | PseudoState.ExitPoint(PseudoStatesAst.ExitPoint.Ast(PseudoStatesAst.ExitPointDecl.Ast(_, BaseAst.Identifier.Ast as n), e)) => 
            def name = n.GetText();
            def tran = match (e)
            {
              | PseudoStatesAst.ExitPoint.ExitPointEnd.Tran(TransitionsAst.EntryPointTransition.Ast as tr) => GetEntryPointTran(tr)
              | _                                                                                          => None()
            }
            PseudoStateModelNode.ExitPoint(pos, name, tran)
        | PseudoState.History(PseudoStatesAst.History.HistoryDeep(_, t)) with type = HistoryType.Deep
        | PseudoState.History(PseudoStatesAst.History.HistoryShallow(_, t)) with type = HistoryType.Shallow => 
            def tran = match (t)
                       {
                         | Some((t, _)) => GetDefaultTran(t)
                         | _            => None()
                       }
            PseudoStateModelNode.History(pos, type, tran)
        | PseudoState.History(PseudoStatesAst.History.HistoryLong(_, _, type, t, _)) => 
            def type = match (p.GetText(type))
            {
              | "Deep"
              | "deep"    => HistoryType.Deep
              | "Shallow"
              | "shallow" => HistoryType.Shallow
              | _                                       => HistoryType.None
            }
            def tran = match (t)
                      {
                        | Some(t) => GetDefaultTran(t)
                        | _       => None()
                      }
            PseudoStateModelNode.History(pos, type, tran)
        | PseudoState.Initial(_, g, a, _, t) => 
            def act = a.Map(GetActions);
            def guard = g.MapDefault(GetGuard, GuardNode.Empty(-1));
            def tar = match (t)
            {
              | PseudoState.Initial.Nested.InitialTarget.Simple(t, _)                                       => 
                 match (GetSimpleTarget(t))
                 {
                   | Some(t) => StateNode.Transition(pos, TargetType.NoTarget(-1), [], guard, act, t, TransitionKind.Local) :: []
                   | _       => []
                 }
               
               
              | PseudoState.Initial.Nested.InitialTarget.JunctionTarget(TargetsAst.JunctionTarget.Ast as t) => 
                 match (GetJunctionTarget(t, JunctionType.Junction))
                 {
                   | Some(TargetType.PseudoState(PseudoStateModelNode.Junction as j)) => 
                       j.nodes.Map(x => StateNode.Transition(x.pos, TargetType.NoTarget(-1), [], x.guard, x.action, x.to, TransitionKind.Local))
                   | _ => []
                 }
              | _ => []
            }
          
            match (tar)
            {
              | []  => null
              | lst => PseudoStateModelNode.Initial(pos, lst)
            }
        | PseudoState.Join(_, BaseAst.Identifier.Ast as n, TransitionsAst.TransitionPart.Ast(g, a, _, t)) => 
           def name = n.GetText();
           match (GetTran(p, None(), g, a, t, TransitionKind.External))
           {
             | Some(t) => PseudoStateModelNode.Join(pos, name, [], t)
             | _       => null
           }
           
        | PseudoState.Junction(_, n, PseudoStatesAst.JunctionBody.Ast as b) => 
           def name = n.GetText();
           def nodes = GetNodes(b);
           PseudoStateModelNode.Junction(pos, name, nodes, JunctionType.Junction)
           
        | PseudoState.Merge(_, n, TransitionsAst.TransitionPart.Ast(g, a, _, t)) =>
           def name = n.GetText();
           match (GetTran(p, None(), g, a, t, TransitionKind.External))
           {
             | Some(t) => def node = JunctionNode(pos, t.guard, t.action, t.to);
                          PseudoStateModelNode.Junction(pos, name, node :: [], JunctionType.Merge)
             | _       => null
           }
           
        | PseudoState.Terminate => PseudoStateModelNode.Terminate(pos)
        | _ => null
      }
      if (pseudo != null) Some(StateNode.PseudoState(pos, pseudo)) else None()
    }

    GetParent(par : MainAst.Parent) : option[string]
    {
      | MainAst.Parent.Ast(_, MainAst.Parent.ParentIdentifier.RegionReference(RegionsAst.RegionReference.Ast as r)) =>
          def parent = r.GetText();
          Some(parent)
      | MainAst.Parent.Ast(_, MainAst.Parent.ParentIdentifier.FullyQualified(BaseAst.FullyQualified.Ast as a)) => Some(a.GetText())
      | _ => None()
    }
    
    GetAttribute(attr : BaseAst.Attributes) : list[StateAttribute]
    {
      | BaseAst.Attributes.Ast(_, (a, _), _) => 
      
        def pos = attr.Location.StartPos;
        def check_attr(x)
        {
          if (x is BaseAst.Identifier.Ast as x) 
            match (x.GetText())
            {
              | "Initial" => StateAttribute.Initial(pos)
              | str       => StateAttribute.Unknown(pos, str)
            }
           else StateAttribute.Unknown(pos, null)
        }
        
        a.Map(check_attr)
      | _ => []
    }
    
    CreateState(pos : int, attr : list[StateAttribute], name : string, decls : list[MainAst.StateDecl], type : StateType, parent : option[string]) : StateNode.State
    {
      mutable defer  = [];
      mutable do_act = [];
      mutable entry  = [];
      mutable exit   = [];
      mutable pseudo = [];
      mutable states = [];
      mutable tran   = [];
      mutable err    = [];
      def decls = decls.FoldLeft([], (x, a) => if (x is MainAst.StateDecl.Sequence(h, t)) a + (h :: t) else a);
      foreach (d in decls)
        {
          | StateDecl.DeferrableEvent(EventsAst.DeferrableEvent.Deferrable(Events = EventsAst.SimpleEventList.Ast((e, _))))
          | StateDecl.DeferrableEvent(EventsAst.DeferrableEvent.Deferred(Events = EventsAst.SimpleEventList.Ast((e, _)))) =>
              def lst = e.FoldBack([], (x, a) => if (x is Identifier.Ast as x) TransitionEvent.Normal(x.Location.StartPos, x.GetText(), []) :: a else a);
              defer ::= StateNode.Defer(d.Location.StartPos, lst)
          | StateDecl.DoActivity(ActionsAst.DoActivity.Ast(ActionList = a))                   => 
              def act = GetActions(a);
              do_act ::= StateNode.DoActivity(d.Location.StartPos, act, ActivityFlag.None);
          | StateDecl.Entry(ActionsAst.Entry.Ast(ActionList = a)) => 
              def act = GetActions(a);
              entry ::= StateNode.Entry(d.Location.StartPos, ActionFlags.None, act)
          | StateDecl.Exit(ActionsAst.Exit.Ast(ActionList = a)) => 
              def act = GetActions(a);
              exit ::= StateNode.Exit(d.Location.StartPos, ActionFlags.None, act)
          | StateDecl.PseudoState(p) => match (CreatePseudo(p))
                                        {
                                          | Some(p) => pseudo ::= p
                                          | _       => ()
                                        }
          ///
          | StateDecl.Regions(a) => ()
          | StateDecl.RegionSequence(first, other) => ()
          | StateDecl.State(a, _, n, p, _, d, _) as t => 
              def name = n.GetText();
              def parent = if (p is Some(p)) GetParent(p) else None();
              def attr = a.MapDefault(GetAttribute, []);
              def state = CreateState(t.Location.StartPos, attr, name, d, StateType.State(), parent);
              states ::= state;
          | StateDecl.SubMachine(a, _, n, t, p, _, d, _) => ()
          | StateDecl.Transition(t) => 
             match (CreateTransition(t))
             {
               | Some(t) => tran ::= t
               | _       => ()
             }
          | n => ()//err ::= StateNode.Error(pos, n)
        }
      StateNode.State(pos, name, parent, attr, entry, exit, tran, do_act, defer, states, pseudo, type, err)
    }

  }
}
