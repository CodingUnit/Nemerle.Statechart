using Nitra;
using Nitra.Declarations;
using Nemerle.Statechart;

namespace Nemerle.Statechart.Grammar
{
  declaration StateMachine
  {
    state : State;
    flags : MachineFlag;
  }

  declaration Param
  {
  }

  abstract ast Action
  {
    | Normal { name : string; params : Param*;}
    | Expr   { expr : string;}
  }

  abstract ast StateAction : Action
  {
    | Entry
    | Exit
    | Do {flag : ActivityFlag;}

    flags : ActionFlags;
  }

  

  ast Transition
  {
    from    : Target;
    trigger : Event;
    guard   : Guard;
    action  : Action;
    target  : Target;
    kind    : TransitionKind;
  }

  ast Guard
  {
  }

  ast Target
  {
  }

  ast Event
  {
  }

  ast Defer
  {
    trigger : Event;
  }

  declaration State
  {
    attributes    : list[StateAttribute];
    parent        : option[string];
    entry         : StateAction*;
    exit          : StateAction*;
    do            : StateAction*;
    transitions   : Transition*;
    defer         : Defer*;
    sub_states    : State*;
    pseudo_states : PseudoState*;
  }

  abstract ast PseudoState
  {
    | Initial {tran : Transition*;}
    | History {type : HistoryType;}
    | Junction {name : string; nodes : JuncNode;}
    | Choice   {name : string; nodes : JuncNode;}
    | Join    {name : string; }
    | Fork
    | EntryPoint
    | ExitPoint
    | Terminate
  }

  ast JuncNode
  {
  }
}
