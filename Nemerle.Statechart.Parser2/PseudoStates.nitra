namespace Nemerle.Statechart
{
  syntax module PseudoStates
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using Targets;
    using Transitions;
    using Base;
    using Actions;
    
    syntax JuncTranBody = GuardDecl? ActionList? "=>" TransitionTarget;

    syntax JunctionBody = '{' (!'}' JuncTranBody)+ '}';

    syntax History
    {
      | HistoryLong    = "history" ':' Type DefaultTransition? ';'
      {
        regex Type = "Deep" | "deep" | "Shallow" | "shallow";
      }
      | HistoryDeep    = DeepKey (DefaultTransition ';')?
      {
        regex DeepKey = "(H*)";
      }
      | HistoryShallow = ShallowKey (DefaultTransition ';')?
      {
        regex ShallowKey = "(H)";
      }
    }


    syntax EntryPoint = EntryPointHead EntryPointTransition
    {
      syntax EntryPointHead
      {
        | Ver1 = "entry:" Identifier 
        | Ver2 = Identifier ':'
        | Ver3 = '(' Identifier ')'
      }
    }

    
    alias ExitPointTransition = EntryPointTransition;

    syntax ExitPointDecl = ExitPointKey Identifier
    {
      regex ExitPointKey = "exit:" | "(X)" | "(x)";
    }

    syntax ExitPoint = ExitPointDecl ExitPointEnd
    {
      syntax ExitPointEnd 
      {
        | End = ";"
        | Tran = ExitPointTransition
      }
    }

    syntax InitialTarget 
    {
      | Simple   = SimpleTarget ';'
      | JunctionTarget
    }

    syntax PseudoState 
    {
      | Initial = InitialKeyword ActionList? "=>" InitialTarget
        {
          regex InitialKeyword = "initial" | "0";
        }
      | History
      | EntryPoint
      | ExitPoint
      | Terminate = TerminateKey ';'
        {
          regex TerminateKey = "terminate" | 'X' | 'x';
        }
      | Join     = "join" Identifier TransitionPart
      | Junction = "junction" Identifier JunctionBody
      | Choice   = "choice" Identifier '$'? JunctionBody
      | Merge    = "merge" Identifier TransitionPart;
    }

    
  }
}
