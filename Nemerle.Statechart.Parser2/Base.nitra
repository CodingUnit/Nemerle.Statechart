namespace Nemerle.Statechart.Grammar
{
  syntax module Base
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using CStyleComments;
    using Identifiers;
    
    extend token IgnoreToken
    {
      | [SpanClass(Comment)] SingleLineComment = SingleLineComment;
      | [SpanClass(Comment)] MultiLineComment;
    }

    regex Whitespace = [Zs] | '\t' | '\v' | '\f';
    regex Spaces     = Whitespace*;

	  regex Integer  = '0' | ['1'..'9'] ['0'..'9']*;
	  alias Numeric = Integer;

    [SpanClass(Number)]
    regex FloatingNumber = "-"? Integer Fraction? Exponent?
    {
      regex Digits   = ['0'..'9']+;
      regex Fraction = "." Digits;
      regex Exponent = ("E" | "e") ("-" | "+")? Digits;
    }

	  token Identifier = !Keyword !'=' IdentifierBody
    {
      regex KeywordToken =   "state"    | "entry"    | "exit"      | "else"      | "flags"  | "name" 
                           | "region"   | "and"      | "initial"   | "0"         | "entry:" | "exit:" 
                           | "(X)"      | "(x)"      | "history"   | "(H*)"      | "(H)"    | "defer"  
                           | "deferred" | "do"       | "terminate" | "X"         | "x"      | "join"   
                           | "junction" | "choice"   | "merge"     | "event" Spaces "class" | "event"
                           | "after"    | "using"    | "submachine";
      token Keyword = KeywordToken !IdentifierPartCharacters;
    }
    
    syntax FullyQualified = (Identifier; '.')+;
    syntax Attributes = '[' (Identifier; ',')+ ']';

  }
}
