namespace Nemerle.Statechart.Grammar
{
  syntax module Main
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
	  
    using Nitra.Core;
    using PseudoStates;
    using Transitions;
    using Actions;
    using Regions;
    using Events;
    using Base;

	  syntax Parent = ':' ParentIdentifier
	  {
	    syntax ParentIdentifier 
	    {
		    | RegionReference 
		    | FullyQualified
	    }
	  }

	  syntax StateDecl
	  {
	    | State = Attributes? "state" sm AnyIdentifier Parent? '{' StateDecl* '}'
      | Entry
      | Exit
      | SubMachine = Attributes? "submachine" AnyIdentifier TypeDecl? Parent? '{' StateDecl* '}'
      {
        syntax TypeDecl = '[' Type ']'
        {
          syntax Type = AnyIdentifier;
        }
      }
      | DoActivity
      | DeferrableEvent
      | PseudoState
      | Transition
		precedence region:

      | RegionSequence = StateDecl ^ region (RegionDelimToken StateDecl ^ region)+
      | Regions
      | Sequence =  StateDecl+// ^ 30 (StateDecl ^ 30)+
	  }
    
	  [StartRule, ExplicitSpaces]
	  syntax StateMachine = s StateMachineDecl* !Any
    {
      regex SyntaxDelim = ':' | '=';

      syntax StateMachineDecl
	    {
	      | Flags = "flags" SyntaxDelim? (AnyIdentifier; FlagsDelim)+ ';'
        {
          token FlagsDelim
          {
            | Comma = ','
            | Spaces = s
          }
        }
	      | Name  = "name" SyntaxDelim? NameIdentifier ';'
        {
          token NameIdentifier 
	        {
		        | AnyIdentifier 
		        | CommaIdentifier = "\"" Body "\""
            {
               token Body = (!'\"' Any)+;
            }
	        }
        }
        | Using = "using" FullyQualifiedAny ';'
        | EventClass
        | EventDecl
	      | StateDecl
	    }
    }

  }
}
