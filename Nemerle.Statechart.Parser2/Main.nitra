namespace Nemerle.Statechart.Grammar
{
  syntax module Main
  {
    using Nitra.Core;
    using PseudoStates;
    using Transitions;
    using Actions;
    using Regions;
    using Events;
    using Base;

    syntax Parent = ':' ParentIdentifier
    {
      Value() : string=ParentIdentifier.Value();

      syntax ParentIdentifier 
      {
        | RegionReference {override Value = GetText(RegionReference);}
        | FullyQualified {override Value = GetText(FullyQualified);}

        Value() : string;
      }
    }

	  syntax Control
	  {
		  | Include = "#include" String
	  }

    syntax TypeDecl = '[' AnyIdentifier ']';

    syntax StateDecl
    {
      | State = Attributes?  "state" sm Name=AnyIdentifier Parent=Parent? '{' Decls=RegionSequence '}'
      | Entry
      | Exit
      | SubMachine = Attributes? "submachine" AnyIdentifier TypeDecl? Parent? '{' RegionSequence '}'
      | DoActivity = Attributes? "do" ActList
      | DeferrableEvent
      | PseudoState
      | Transition
      | Regions
      | StateConcurrent
      | Control
    }
    
    syntax StateMachine = s StateMachineDecl*
    {
      syntax StateMachineDecl
      {
		    | Flags = "flags" (AnyIdentifier; ',')+ ';'
		    | Name  = "name" NameIdentifier ';'
		    | Using = "using" FullyQualifiedAny ';'
		    | EventClass
		    | EventDecl
		    | StateDecl
      }
    }

  }
}
