namespace Nemerle.Statechart.Grammar
{
  syntax module Main
  {
    using Nitra.Core;
    using PseudoStates;
    using Transitions;
    using Actions;
    using Regions;
    using Events;
    using Base;

    syntax Parent = ':' ParentIdentifier
    {
      syntax ParentIdentifier 
      {
        | RegionReference 
        | FullyQualified
      }
    }

	syntax Control
	{
		| Include = "#include" String
	}

    syntax StateDecl
    {
      | State = Attributes?  "state" sm AnyIdentifier Parent? '{' RegionSequence '}'
      | Entry
      | Exit
      | SubMachine = Attributes? "submachine" AnyIdentifier TypeDecl? Parent? '{' RegionSequence '}'
      {
        syntax TypeDecl = '[' AnyIdentifier ']';
      }
      | DoActivity = Attributes? "do" ActList
      | DeferrableEvent
      | PseudoState
      | Transition
      | Regions
      | StateConcurrent
      | Control
    }
    
    syntax StateMachine = s StateMachineDecl*
    {
      syntax StateMachineDecl
      {
		| Flags = "flags" (AnyIdentifier; ',')+ ';'
		| Name  = "name" NameIdentifier ';'
		| Using = "using" FullyQualifiedAny ';'
		| EventClass
		| EventDecl
		| StateDecl
      }
    }

  }
}
