namespace Nemerle.Statechart.Grammar
{
  syntax module Transitions
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using Main;
    using Targets;
    using Actions;
    using Events;
    using Base;

    syntax Guard = '[' GuardDecl ']'
    {
      syntax GuardDecl
      {
        | Else = "else"
        | SimpleExpr = (!']' Any)+
        | LongGuardExpr
      }
    }

    regex ExtGoto   = "=>" | ")=>";
    regex AnyGoto   = ExtGoto | "(=>";

    syntax JunctionGuard
    {
      | Else = "else"
      | SimpleExpr = (!AfterTokens Any)+
        {
          regex AfterTokens = "=>" | '/' | '}';
        }
      | LongGuardExpr
    }

    syntax LongGuardExpr = "${" Expr "$}"
    {
      token Expr = (!"$}" Any)+;
    }

    alias PseudoTran = EntryPointTransition;

    syntax DefaultTransition = ActionList? "=>" SimpleTarget;

    syntax EntryPointTransition = ActionList? "=>" TransitionTarget;

    syntax TransitionPart = Guard? ActionList? "=>" TransitionTarget;

    syntax NormalTransition 
    {
      | LocalTransition    = Events Guard? ActionList? "(=>" TransitionTarget;
      | InternalTransition = Events Guard? ActionList ';';
      | Transition         = Events Guard? ActionList? ExtGoto TransitionTarget;
    }

    syntax Transition
    {
      | NormalTransition
      | RelocateTransition = '@' RelocateTranBody
        {
          syntax RelocateTranBody
          {
            | Combined = FullyQualified ':' '{' NormalTransition* '}'
            | Join     = JoinRelocateTran
              {
                syntax JoinRelocateTran
                {
                  | Main = '(' (FullyQualified; ',')+ ')' ':' Transition
                  | Alt  = FullyQualified '(' (Identifier; ',')+ ')' ':' Transition
                }
              }
            | State    = FullyQualified ':' NormalTransition
            | Pseudo   = FullyQualified ':' PseudoTran
          }
        }
    }

  }
}
