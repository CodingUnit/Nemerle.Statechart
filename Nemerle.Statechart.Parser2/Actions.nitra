namespace Nemerle.Statechart.Grammar
{
  syntax module Actions
  {
    using Nitra.Core;
	
    using Transitions;
    using Base;
	using Nitra;

    syntax Action
    {
      | Empty = '(' ')'
      | Full  = Name=AnyIdentifier '(' Parms=(AnyIdentifier; ',')* ')'
      | Simple = Name=AnyIdentifier
    }

    syntax SimpleAction = (Action; ',')+
    {
      
    }

    regex ActionEnd = ';' | AnyGoto;

    //syntax SimpleActionList = SimpleAction;// & ActionEnd;

    //syntax LongExprAction = "${" Expr "$}"
    //{
      //token Expr = (!"$}" Any)*;
    //}

    syntax SimpleExpr = !BraceExpr !SimpleAction Expr=Expr //  
    {
      syntax Expr = (!ActionEnd Any)+;
    }

    syntax BraceExpr  = '{' Expr* '}'
    {
      Value() : string=GetText(Exprs);

      syntax Expr
      {
        | Simple =  (!'}' !'{' Any)*;
        | BraceExpr
      }
    }

    syntax ActionList = '/' Action
    {
      syntax Action
      {
        | BraceExpr
        | SimpleExpr
        | SimpleAction
      }
    }

    
    // action list ends with ; or in braces 
		syntax ActList
    {
			| BraceAction = '/' BraceExpr
			| Simple = ActionList ';'
    }

    syntax Entry = Attributes? EntryKey ActList
    {
      regex EntryKey = "entry" | "$>";
    }

    syntax Exit = Attributes? ExitKey ActList
    {
      regex ExitKey = "exit" | "$<";
    }

    //syntax DoActivity = Attributes? "do" ActList;
  }
}
