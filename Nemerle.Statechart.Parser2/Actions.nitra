namespace Nemerle.Statechart.Grammar
{
  syntax module Actions
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Transitions;
    using Base;

    syntax SimpleAction
    {
      | List = (AnyIdentifier ('(' ')')?; ',')+
      | Empty = '(' ')'
    }

    regex ActionEnd = ';' | AnyGoto;

    syntax SimpleActionList = SimpleAction & ActionEnd;

    syntax LongExprAction = "${" Expr "$}"
    {
      token Expr = (!"$}" Any)*;
    }

    syntax SimpleExpr = !SimpleActionList !BraceExpr !LongExprAction Expr
    {
      token Expr = (!ActionEnd Any)+;
    }

    syntax BraceExpr  = '{' Expr '}'
    {
      token Expr = (!'}' Any)*;
    }

    syntax ActionList = '/' Action
    {
      syntax Action
      {
        | Expr
        {
          syntax Expr
          {
            | LongExprAction
            | SimpleExpr
            | BraceExpr
          }
        }
        | SimpleActionList
      }
    }

    syntax ActList = '/' Action
    {
      syntax Action
      {
        | Expr
        {
          syntax Expr
          {
            | LongExprAction
            | SimpleExpr = SimpleExpr ';'
            | BraceExpr
          }
        }
        | SimpleActionList = SimpleActionList ';'
      }
    }

    syntax Entry = Attributes? EntryKey ActList
    {
      regex EntryKey = "entry" | "$>";
    }

    syntax Exit = Attributes? ExitKey ActList
    {
      regex ExitKey = "exit" | "$<";
    }

    syntax DoActivity = Attributes? "do" ActList;
  }
}
