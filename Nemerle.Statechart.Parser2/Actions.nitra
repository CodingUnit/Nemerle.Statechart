namespace Nemerle.Statechart.Grammar
{
  syntax module Actions
  {
    using Nitra.Core;
	
    using Transitions;
    using Base;
	  using Nitra;

    syntax SimpleAction
    {
      | List = (AnyIdentifier ('(' ')')?; ',')+
      | Empty = '(' ')'
    }

    regex ActionEnd = ';' | AnyGoto;

    syntax SimpleActionList = SimpleAction;// & ActionEnd;

    //syntax LongExprAction = "${" Expr "$}"
    //{
      //token Expr = (!"$}" Any)*;
    //}

    syntax SimpleExpr = Expr // !SimpleActionList !BraceExpr !LongExprAction 
    {
      token Expr = (!ActionEnd Any)+;
    }

    syntax BraceExpr  = '{' Expr '}'
    {
      token Expr = (!'}' Any)*;
    }

    syntax ActionList = '/' Action
    {
      syntax Action
      {
        /*| Expr
        {
          syntax Expr
          {
            //| LongExprAction
            //| SimpleExpr
            | BraceExpr
          }
        }*/
        | SimpleActionList
      }
    }

    
    // action list ends with ; or in braces 
		syntax ActList
    {
			//| BraceAction = '/' BraceExpr
			| Simple = ActionList ';'
    }

    syntax Entry = Attributes? EntryKey '/' SimpleAction ';'//ActList
    {
      regex EntryKey = "entry" | "$>";
    }

    syntax Exit = Attributes? ExitKey ActList
    {
      regex ExitKey = "exit" | "$<";
    }

    syntax DoActivity = Attributes? "do" ActList;
  }
}
