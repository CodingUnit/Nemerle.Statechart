namespace Nemerle.Statechart.Grammar
{
  syntax module Events
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using Base;

    syntax EventClass = "event" "class" Name = FullyQualified List = EventList? ';'
    {
      syntax EventList = '(' (Identifier; ',')* ')';
    }

    syntax Events = (SingleEvent; ',')+
    {
      syntax SingleEvent
      {
        | SimpleEvent = Identifier Parms?
        {
          syntax Parms = '(' (Identifier; ',')+  ')';
        }
        | TimedEvent  = "after" '(' TimeExpr ')'
        {
          syntax TimeExpr
          {
            | SimpleExpr = (FloatingNumber Units)+
            {
              syntax Units = Identifier;
            }
            | FullTimeExpr = FullExpr
              {
                regex FullExpr = Days? Hours ':' Mins (Sec Msec?)?
                {
                  regex Days     = Integer '.';
                  regex Hours    = Integer;
                  regex Mins     = Integer;
                  regex Sec      = ':' Integer;
                  regex Msec     = '.' Integer;
                }
              }
          }
        }
      }
    }

    syntax DeferrableEvent
    {
      | Deferred = "deferred" '/' Events ';';
      | Deferrable = Events '/' "defer" ';';
    }

    syntax EventDecl = "event" Name = Identifier '(' Types = (Identifier; ',')+ ')' ';';
  }
}
