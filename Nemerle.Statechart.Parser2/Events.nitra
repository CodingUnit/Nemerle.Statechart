namespace Nemerle.Statechart.Grammar
{
  syntax module Events
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Base;

    syntax EventClass = "event" "class" Name = FullyQualifiedAny List = EventList?  ';'
    {
      syntax EventList = '(' (EventIdentifier; ',')* ')'; 
    }

    syntax SingleEvent
    {
      | Completion = CompKey
      {
        regex CompKey = "completion" | "_";
      }
      | SimpleEvent = EventIdentifier Parms?
      {
        syntax Parms = '(' (AnyIdentifier; ',')+  ')';
      }
      | TimedEvent  = "after" '(' TimeExpr ')'
      {
        syntax TimeExpr
        {
          | SimpleExpr = (Num UnitDecl)+
          {
            syntax Num = FloatingNumber;

            syntax UnitDecl
            {
              | Units
              | Error = !Units AnyIdentifier
            }

            syntax Units 
            {
             | Days = DaysRegex
             {
               regex DaysRegex = "days" | "d";
             }

             | Hours = HoursRegex
             {
               regex HoursRegex = "hours" | "h";
             }

             | Minutes = MinutesRegex
             {
               regex MinutesRegex = "minutes" | "min" | "m";
             }

             | Seconds = SecondsRegex
             {
               regex SecondsRegex = "seconds" | "secs" | "sec" | "s";
             }

             | MSec = MSecRegex
             {
               regex MSecRegex = "milliseconds" | "msec" | "ms";
             }

             | Ticks = TicksRegex
             {
               regex TicksRegex = "ticks" | "t";
             }
            }
          }
          | FullTimeExpr = FullExpr
            {
              regex FullExpr = Days? Hours ':' Mins (Sec Msec?)?
              {
                regex Days     = Integer '.';
                regex Hours    = Integer;
                regex Mins     = Integer;
                regex Sec      = ':' Integer;
                regex Msec     = '.' Integer;
              }
            }
        }
      }
    }

    syntax Events = (SingleEvent; ',')+;

    syntax SimpleEventList = (EventIdentifier; ',')+;

    syntax DeferrableEvent
    {
      | Deferred = "deferred" '/' Events = SimpleEventList ';';
      | Deferrable = Events = SimpleEventList '/' "defer" ';';
    }

    syntax EventDecl = "event" Name = EventIdentifier '(' Types = (AnyIdentifier; ',')+ ')' ';';
  }
}
