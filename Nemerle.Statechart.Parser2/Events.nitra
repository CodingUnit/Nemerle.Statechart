namespace Nemerle.Statechart.Grammar
{
  syntax module Events
  {
    using Nitra.Core;
    using Base;

    syntax EventClass = "event" "class" FullyQualifiedAny EventList?  ';'
    {
      syntax EventList = '(' (EventIdentifier; ',')* ')';
    }

    syntax SingleEvent
    {
      | Completion
      {
        regex Completion = "completion" | "_";
      }
      | SimpleEvent = EventIdentifier Parms?
      {
        syntax Parms = '(' (AnyIdentifier; ',')+  ')';
      }
      | TimedEvent  = "after" '(' TimeExpr ')'
      {
        syntax TimeExpr
        {
          | SimpleExpr = (Num UnitDecl)+
          {
            syntax Num = FloatingNumber;

            token UnitDecl
            {
              | Units
              | Error = !Units AnyIdentifier
            }

            token Units 
            {
             | Days
             {
               regex Days = "days" | "d";
             }

             | Hours
             {
               regex Hours = "hours" | "h";
             }

             | Minutes
             {
               regex Minutes = "minutes" | "min" | "m";
             }

             | Seconds
             {
               regex Seconds = "seconds" | "secs" | "sec" | "s";
             }

             | MSec
             {
               regex MSec = "milliseconds" | "msec" | "ms";
             }

             | Ticks
             {
               regex Ticks = "ticks" | "t";
             }
            }
          }
          | FullTimeExpr
            {
              regex FullTimeExpr = Days? Hours ':' Mins (Sec Msec?)?
              {
                regex Days     = Digits '.';
                regex Hours    = Digits;
                regex Mins     = Digits;
                regex Sec      = ':' Digits;
                regex Msec     = '.' Digits;
              }
            }
        }
      }
    }

    syntax Events = (SingleEvent; ',')+;

    syntax SimpleEventList = (EventIdentifier; ',')+;

    syntax DeferrableEvent
    {
      | Deferred = "deferred" '/' SimpleEventList ';';
      | Deferrable = SimpleEventList '/' "defer" ';';
    }

    syntax EventDecl = "event" EventIdentifier '(' (AnyIdentifier; ',')+ ')' ';';
  }
}
