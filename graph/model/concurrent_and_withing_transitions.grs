# begin of graph "lgspGraph_0" saved by GrsExport

new graph "StateMachine" "lgspGraph_0"
new :StateMachine($ = "concurrent and withing transitions", id = 13, depth = 0, name = "concurrent and withing transitions", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "L", id = 9, depth = 0, name = "L", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "K", id = 8, depth = 0, name = "K", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "F", id = 4, depth = 0, name = "F", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "D", id = 3, depth = 0, name = "D", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "C", id = 1, depth = 0, name = "C", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "B", id = 0, depth = 0, name = "B", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "", id = 12, depth = 0, name = "", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :ConcurrentState($ = "A", id = 6, depth = 0, name = "A", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{}, regions_count = 0)
new :ConcurrentState($ = "J", id = 11, depth = 0, name = "J", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{}, regions_count = 0)
new :SubRegion($ = "4", id = 10, depth = 0, name = "J_SubRegion1", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :SubRegion($ = "3", id = 5, depth = 0, name = "A_SubRegion1", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :SubRegion($ = "2", id = 2, depth = 0, name = "A_SubRegion0", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :SubRegion($ = "1", id = 7, depth = 0, name = "J_SubRegion0", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :Unresolved($ = "K1", id = 0, depth = 0, name = "K")
new :Unresolved($ = "L1", id = 0, depth = 0, name = "L")
new :Unresolved($ = "D2", id = 0, depth = 0, name = "D")
new :Unresolved($ = "D1", id = 0, depth = 0, name = "D")
new :Unresolved($ = "F2", id = 0, depth = 0, name = "F")
new :Unresolved($ = "F1", id = 0, depth = 0, name = "F")
new :Unresolved($ = "B2", id = 0, depth = 0, name = "B")
new :Unresolved($ = "B1", id = 0, depth = 0, name = "B")
new :Unresolved($ = "C2", id = 0, depth = 0, name = "C")
new :Unresolved($ = "C1", id = 0, depth = 0, name = "C")
# total number of nodes: 24

new @("concurrent and withing transitions") - :TopState($ = "$C") -> @("")
new @("L") - :ExternalTransition($ = "$20", id = 0, set_flag = 0L, trigger = "a", guard = "", action = "", out_str = "a") -> @("K1")
new @("K") - :ExternalTransition($ = "$1E", id = 0, set_flag = 0L, trigger = "a", guard = "", action = "", out_str = "a") -> @("L1")
new @("F") - :ExternalTransition($ = "$1C", id = 0, set_flag = 0L, trigger = "c", guard = "", action = "", out_str = "c") -> @("D2")
new @("F") - :ExternalTransition($ = "$1A", id = 0, set_flag = 0L, trigger = "a", guard = "", action = "", out_str = "a") -> @("D1")
new @("D") - :ExternalTransition($ = "$18", id = 0, set_flag = 0L, trigger = "c", guard = "", action = "", out_str = "c") -> @("F2")
new @("D") - :ExternalTransition($ = "$16", id = 0, set_flag = 0L, trigger = "a", guard = "", action = "", out_str = "a") -> @("F1")
new @("C") - :ExternalTransition($ = "$14", id = 0, set_flag = 0L, trigger = "b", guard = "", action = "", out_str = "b") -> @("B2")
new @("C") - :ExternalTransition($ = "$12", id = 0, set_flag = 0L, trigger = "a", guard = "", action = "", out_str = "a") -> @("B1")
new @("B") - :ExternalTransition($ = "$10", id = 0, set_flag = 0L, trigger = "b", guard = "", action = "", out_str = "b") -> @("C2")
new @("B") - :ExternalTransition($ = "$E", id = 0, set_flag = 0L, trigger = "a", guard = "", action = "", out_str = "a") -> @("C1")
new @("") - :Substate($ = "$B") -> @("J")
new @("A") - :Region($ = "$5") -> @("3")
new @("A") - :Region($ = "$2") -> @("2")
new @("J") - :Region($ = "$A") -> @("4")
new @("J") - :Region($ = "$7") -> @("1")
new @("4") - :Region($ = "$9") -> @("L")
new @("4") - :Contains($ = "$1D") -> @("L1")
new @("4") - :Contains($ = "$1F") -> @("K1")
new @("4") - :Region($ = "$8") -> @("K")
new @("3") - :Region($ = "$4") -> @("F")
new @("3") - :Contains($ = "$15") -> @("F1")
new @("3") - :Contains($ = "$17") -> @("F2")
new @("3") - :Contains($ = "$19") -> @("D1")
new @("3") - :Contains($ = "$1B") -> @("D2")
new @("3") - :Region($ = "$3") -> @("D")
new @("2") - :Region($ = "$1") -> @("C")
new @("2") - :Contains($ = "$D") -> @("C1")
new @("2") - :Contains($ = "$F") -> @("C2")
new @("2") - :Contains($ = "$11") -> @("B1")
new @("2") - :Contains($ = "$13") -> @("B2")
new @("2") - :Region($ = "$0") -> @("B")
new @("1") - :Region($ = "$6") -> @("A")
# total number of edges: 33

@("concurrent and withing transitions").sub_regions = set<SubRegion>{}
@("concurrent and withing transitions").regions = set<ConcurrentState>{}
@("concurrent and withing transitions").sub_states = set<State>{}
@("concurrent and withing transitions").possible_conf = set<ActiveState>{}
@("concurrent and withing transitions").initial_conf = set<ActiveState>{}
@("L").sub_regions = set<SubRegion>{}
@("L").regions = set<ConcurrentState>{}
@("L").sub_states = set<State>{}
@("L").possible_conf = set<ActiveState>{}
@("L").initial_conf = set<ActiveState>{}
@("$20").lca = set<State>{}
@("$20").sub_regions = set<SubRegion>{}
@("$20").regions = set<ConcurrentState>{}
@("K").sub_regions = set<SubRegion>{}
@("K").regions = set<ConcurrentState>{}
@("K").sub_states = set<State>{}
@("K").possible_conf = set<ActiveState>{}
@("K").initial_conf = set<ActiveState>{}
@("$1E").lca = set<State>{}
@("$1E").sub_regions = set<SubRegion>{}
@("$1E").regions = set<ConcurrentState>{}
@("F").sub_regions = set<SubRegion>{}
@("F").regions = set<ConcurrentState>{}
@("F").sub_states = set<State>{}
@("F").possible_conf = set<ActiveState>{}
@("F").initial_conf = set<ActiveState>{}
@("$1C").lca = set<State>{}
@("$1C").sub_regions = set<SubRegion>{}
@("$1C").regions = set<ConcurrentState>{}
@("$1A").lca = set<State>{}
@("$1A").sub_regions = set<SubRegion>{}
@("$1A").regions = set<ConcurrentState>{}
@("D").sub_regions = set<SubRegion>{}
@("D").regions = set<ConcurrentState>{}
@("D").sub_states = set<State>{}
@("D").possible_conf = set<ActiveState>{}
@("D").initial_conf = set<ActiveState>{}
@("$18").lca = set<State>{}
@("$18").sub_regions = set<SubRegion>{}
@("$18").regions = set<ConcurrentState>{}
@("$16").lca = set<State>{}
@("$16").sub_regions = set<SubRegion>{}
@("$16").regions = set<ConcurrentState>{}
@("C").sub_regions = set<SubRegion>{}
@("C").regions = set<ConcurrentState>{}
@("C").sub_states = set<State>{}
@("C").possible_conf = set<ActiveState>{}
@("C").initial_conf = set<ActiveState>{}
@("$14").lca = set<State>{}
@("$14").sub_regions = set<SubRegion>{}
@("$14").regions = set<ConcurrentState>{}
@("$12").lca = set<State>{}
@("$12").sub_regions = set<SubRegion>{}
@("$12").regions = set<ConcurrentState>{}
@("B").sub_regions = set<SubRegion>{}
@("B").regions = set<ConcurrentState>{}
@("B").sub_states = set<State>{}
@("B").possible_conf = set<ActiveState>{}
@("B").initial_conf = set<ActiveState>{}
@("$10").lca = set<State>{}
@("$10").sub_regions = set<SubRegion>{}
@("$10").regions = set<ConcurrentState>{}
@("$E").lca = set<State>{}
@("$E").sub_regions = set<SubRegion>{}
@("$E").regions = set<ConcurrentState>{}
@("").sub_regions = set<SubRegion>{}
@("").regions = set<ConcurrentState>{}
@("").sub_states = set<State>{}
@("").possible_conf = set<ActiveState>{}
@("").initial_conf = set<ActiveState>{}
@("A").sub_regions = set<SubRegion>{}
@("A").regions = set<ConcurrentState>{}
@("A").sub_states = set<State>{}
@("A").possible_conf = set<ActiveState>{}
@("A").initial_conf = set<ActiveState>{}
@("J").sub_regions = set<SubRegion>{}
@("J").regions = set<ConcurrentState>{}
@("J").sub_states = set<State>{}
@("J").possible_conf = set<ActiveState>{}
@("J").initial_conf = set<ActiveState>{}
@("4").sub_regions = set<SubRegion>{}
@("4").regions = set<ConcurrentState>{}
@("4").sub_states = set<State>{}
@("4").possible_conf = set<ActiveState>{}
@("4").initial_conf = set<ActiveState>{}
@("3").sub_regions = set<SubRegion>{}
@("3").regions = set<ConcurrentState>{}
@("3").sub_states = set<State>{}
@("3").possible_conf = set<ActiveState>{}
@("3").initial_conf = set<ActiveState>{}
@("2").sub_regions = set<SubRegion>{}
@("2").regions = set<ConcurrentState>{}
@("2").sub_states = set<State>{}
@("2").possible_conf = set<ActiveState>{}
@("2").initial_conf = set<ActiveState>{}
@("1").sub_regions = set<SubRegion>{}
@("1").regions = set<ConcurrentState>{}
@("1").sub_states = set<State>{}
@("1").possible_conf = set<ActiveState>{}
@("1").initial_conf = set<ActiveState>{}
# end of graph "lgspGraph_0" saved by GrsExport

