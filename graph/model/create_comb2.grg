rule SimpleStates()
{	
	parent:State;
	
	multiple
	{
		parent -e:Substate \ SimpleState-> st:State;
		
		~( st -:Substate->; )
		
		modify
		{
			parent -:SimpleState<e>-> st;
		}
	}
	
	modify
	{
		
	}
}


// create all combinations
rule CreateComb()
{
	-:TopState-> st:State;		
	
	modify
	{
		eval
		{
			(def comb : Node) = get_comb(st);
			// emit("\ncomb:", print_oper(comb));
			create_combs(comb);
			exec([ClearOper]);
			//Debug::halt("test cfg");
		}
		
	}
}

// create combinations of active states from oper object tree
procedure create_combs(comb : Node)
{
	if (typeof(comb) == OrConf)
	{
		def ref op : set<Node> = ((OrConf)comb).oper;
		for (i : Node in op)
		{
			create_combs(i);
		}
	} else
	if (typeof(comb) == AndConf)
	{
		(def ccomb : AndConf) = sub_region_sort((AndConf)comb);
		create_comb_and(ccomb);
	} else
	{
		create_comb(array<Node>[comb]);
	}		
	return;
}

// delete oper nodes
rule ClearOper()
{
	n:Oper;
	
	replace{}
}

procedure create_comb_and(comb : AndConf) : (Node)
{
	def ref op : set<StateMachineNode> = set<StateMachineNode>(comb.oper);
	def ref oparr : array<Node> = array<Node>(op.asArray().orderAscendingBy<depth>());
	//emit("\ncreate_comb_and:", print_oper(comb), " \nsorted:", print_arr(oparr));
	(def res : Node) = create_comb(oparr);
	return (res);
}

procedure create_comb(ref n : array<Node>) : (Node)
{
	def prev : Node;
	def first_node : Node;
    def var first : boolean = true;
	for (i : Node in n)
	{
		def new_st : ActiveState;
		if (typeof(i) >= State)
		{
			(def cpy : Node) = addCopy(i);
			if (typeof(i) == SubRegion)
			{
				(def nst : ActiveSubRegionState) = retype(cpy, ActiveSubRegionState);
				//emit("\nsub region create:", print_oper(nst));
				nst.idx = ((SubRegion)i).idx;
				new_st = nst;				
			} else
			if (typeof(i) == ConcurrentState)
			{
				(def nst : ActiveRegionState) = retype(cpy, ActiveRegionState);
				//emit("\nconc state create:", print_oper(nst));
				nst.regions_count = ((ConcurrentState)i).regions_count;
				new_st = nst;				
			} else // if state
			{
				if (first)
				{
					//emit("\nbase state create:", print_oper(cpy));
					(new_st) = retype(cpy, ActiveBaseState);
				} else
				{
					//emit("\nstate create:", print_oper(cpy));
					(new_st) = retype(cpy, ActiveState);
				}
			}
		} else
		if (typeof(i) == AndConf)
		{
			def and : AndConf = (AndConf)i;
			def ref st : set<ConcurrentState> = set<ConcurrentState>(and.oper);
			def ref sub : set<AndConf> = set<AndConf>(and.oper);
			//emit("\nconc_comb:", print_oper(and));
			if (!st.empty() && !sub.empty())
			{
				def stc : ConcurrentState = st.peek(0);
				(def cpy1 : Node) = addCopy(stc);
				(def nst : ActiveRegionState) = retype(cpy1, ActiveRegionState);
				//emit("\ncreate st:", print_oper(nst));
				nst.regions_count = stc.regions_count;
				new_st = nst;
				
				for (sr : AndConf in sub)
				{
					(def f : Node) = create_comb_and(sr);					
					//emit(print_oper(nst), "\nedge:", print_oper(f));
					add(And, nst, f);
					//Debug::halt("create one and conf");
				}
			}
		}
		
		if (!first)			
		{
			add(And, prev, new_st);			
		} else 
		{
			first_node = new_st;
			first = false;
		}
		prev = new_st;
	}
	return (first_node);
}

// sort concurrent states, and config
procedure sub_region_sort(n : AndConf) : (AndConf)
{
	def ref op : set<Node> = n.oper;
	// emit("\nsort:", print_set(op));
	def ref oper : array<StateMachineNode> = set<StateMachineNode>(n.oper).asArray().orderAscendingBy<depth>();
	def ref res : set<Node> = set<Node>{};
	def ref filt : set<Node> = set<Node>{};
	def var min_depth : int = Math::intMax();
	for (i : StateMachineNode in oper)
	{
		// emit("\ncheck:", print_oper(i));
		if (!(i in filt))
		{
			if (typeof(i) == ConcurrentState)
			{
				def st : ConcurrentState = (ConcurrentState)i;
				filt.add(i); // add to filter set
				// emit("\nfilt1:", print_set(filt));
				def ref sub_reg : set<Node> = adjacentOutgoing(st, Region); // get sub regions
				// emit("\nsub_reg:", print_set(sub_reg));
				(def nst : AndConf) = add(AndConf); // add new and conf node			
				nst.depth = st.depth; // depth like state
				if (st.depth < min_depth) 
				{	
					min_depth = st.depth; // min depth calc
				}
				for (s : SubRegion in sub_reg) // for each sub region
				{
					(def nn : AndConf) = add(AndConf); // create new and conf
					nn.depth = s.depth;					
					//emit("\nsub:", print_set(set<Node>(s.sub_states)));
					nn.oper = op & set<Node>(s.sub_states); // intersection of elements and recursive sub states of sub region				
					nn.oper.add(s); // add sub region to this set
					//emit("\nn.oper:", print_oper(nn));
					filt |= nn.oper; // add this set to filter set
					//emit("\nfilt:", print_set(filt));
					(def rn : AndConf) = sub_region_sort(nn); // recursive check in sub region				
					nst.oper.add(rn); // add and node to result set				
				}
				
				nst.oper.add(i);
				// emit("\nnst:", print_oper(nst));
				res.add(nst);
			} else
			{
				if (i.depth < min_depth) 
				{
					min_depth = i.depth; // min depth calc
				}
				res.add(i);
			}
			// emit("\nres_iter:", print_set(res));
		}
	}
	
	if (op == res)
	{
		// emit("\rres:", print_oper(n));
		return (n);
	} else
	{
		(def nr : AndConf) = add(AndConf); // add new and conf node
		nr.oper = res \ filt; // remove filtered elements from result set
		nr.depth = min_depth; // set depth of node to minimum depth of all nodes
		// emit("\rres:", print_oper(nr));
		return (nr);
	}	
}

// get all combinations of one state
procedure get_comb(n : State) : (Node)
{
	def ref childs 	: set<State> = set<State>(adjacentOutgoing(n, Substate));	 // get child states		
	if (childs.empty())
	{
		//emit("\nget_comb:", print_oper(n));
		return (n);
	} else
	{
		def ret_childs_comb : Node;
		// res = state & (or(get_comb(childs*)))
		def ref childs_comb : set<Node> = set<Node>{};
		// get all combinations of childs
		for (i : State in childs)
		{
			(def comb : Node) = get_comb(i);// get all combination of each child
			childs_comb.add(comb);
		}
		if (typeof(n) != ConcurrentState)
		{
			(ret_childs_comb) = or_comb(childs_comb);
		} else
		{
			def var first : boolean = true;
			// res = state & (and(get_comb(childs*)))
			(ret_childs_comb) = and_comb_set(childs_comb);
		}	
		(def res : Node) = and_comb(n, ret_childs_comb);
		//emit("\nget_comb:", print_oper(res));
		return (res);
	}	
}

function print_arr(ref x : array<Node>) : string
{
	def var str : string = "[";
	def var first : boolean = true;
	for (i : Node in x)
	{
		if (first)
		{
			str = str + print_oper(i);
			first = false;
		} else
		{
			str = str + ", " + print_oper(i);
		}
		
	}
	str = str + "]";
	return (str);
}

function print_set(ref x : set<Node>) : string
{
	def var str : string = "{";
	def var first : boolean = true;
	for (i : Node in x)
	{
		if (first)
		{
			str = str + print_oper(i);
			first = false;
		} else
		{
			str = str + ", " + print_oper(i);
		}
		
	}
	str = str + "}";
	return (str);
}

function print_oper_set(ref x : set<Node>, var oper : string) : string
{
	def var str : string = "(";
	def var first : boolean = true;
	for (i : Node in x)
	{
		def var print : string = print_oper(i);
		if (first)
		{
			str = str + print;
			first = false;
		} else
		{
			str = str + " " + oper + " " + print;
		}
	}
	str = str + ")";
	return (str);
}

function print_oper(x : Node) : string
{
	def var str : string = "";
	def var first : boolean = true;
	if (typeof(x) == AndConf)
	{
		def ref oper : set<Node> = ((AndConf)x).oper;
		str = "(";		
		for (i : Node in oper)
		{
			if (first)
			{
				str = str + print_oper(i);
				first = false;
			} else
			{
				str = str + " & " + print_oper(i);
			}
		}
		str = str + ")";
	} else
	if (typeof(x) == OrConf)
	{
		def ref oper : set<Node> = ((OrConf)x).oper;
		str = "(";
		first = true;
		for (i : Node in oper)
		{
			if (first)
			{
				str = str + print_oper(i);
				first = false;
			} else
			{
				str = str + " | " + print_oper(i);
			}
		}
		str = str + ")";
	} else
	if (typeof(x) >= NamedNode)
	{
		def p : NamedNode = (NamedNode)x;
		str = p.name;
	} else
	if (typeof(x) >= Node)
	{
		str = nameof(x);
	}	
	return (str);
}

procedure or_comb(ref or : set<Node>) : (OrConf)
{
	// emit("\n", print_oper_set(or, "|"));
	(def n : OrConf) = add(OrConf);
	for (i : Node in or)
	{
		if (typeof(i) == OrConf)
		{
			n.oper |= ((OrConf)i).oper;
		} else
		{
			n.oper.add(i);
		}
	}

	return (n);
}

procedure and_comb_set(ref or : set<Node>) : (Node)
{
	def ret : Node;
	def var first : boolean = true;
	for (i : Node in or)
	{					
		if (first)
		{
			ret = i;
			first = false;
		} else
		{
			//emit("\nand:", print_oper(childs_comb), "&", print_oper(comb));
			(ret) = and_comb(ret, i); // 
		}
		//emit("\nchilds_comb_and:", print_oper(childs_comb));				
	}
	return (ret);
}

// (a | b) & (c | d) = (a & c) | (a & d) | (b & c) | (b & d)
// (a | b) & c = (a & c) | (b & c)
procedure and_or(x : Node, y : Node) : (OrConf)
{
	(def n : OrConf) = add(OrConf);
	def ref operx : set<Node>;
	def ref opery : set<Node>;
	if (typeof(x) == OrConf)
	{
		operx = ((OrConf)x).oper;
    } else
    {
		operx = set<Node>{x};
	}
	if (typeof(y) == OrConf)
	{
		opery = ((OrConf)y).oper;
    } else
    {
		opery = set<Node>{y};
	}
	for (ix : Node in operx)
	{			
		for (iy : Node in opery)
		{
			//emit("\nor_and_or:", print_oper(ix), print_oper(iy));
			(def and : Node) = and_comb(ix, iy);
			n.oper.add(and);
		}
	}
	return (n);
}

procedure and_comb(x : Node, y : Node) : (Node)
{	
	// emit("\n", print_oper(x), " & ", print_oper(y));
	if (typeof(x) == OrConf || typeof(y) == OrConf)
	{
		(def n : OrConf) = and_or(x, y);
		// emit("\nres:", print_oper(n));
		return (n);		
	} else
	{
		(def n : AndConf) = add(AndConf);	
		def ref and : set<Node> = set<Node>{x, y};
		for (i : Node in and)
		{
			if (typeof(i) == AndConf)
			{			
				n.oper |= ((AndConf)i).oper;
			} else 
			{
				n.oper.add(i);
			}
		}	
		// emit("\nres:", print_oper(n));
		return (n);
	}
	
}