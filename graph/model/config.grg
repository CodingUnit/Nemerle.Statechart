rule ReachableConfigInit()
{
	-:TopState-> top:State;	
	if {top.possible_conf.empty();}	
	
	iterated it
	{
		active:ActiveState;
		
		~(--> active;)
		
		modify
		{
			eval
			{
				top.possible_conf.add(active);
				top.possible_conf_str.add(active.contains_str.asArray().asString("&"));
				
			}
		}
	}
	// names equals
		
	t:InitReachableConfig(top);
	//init:InitInitialConfig(top);
	modify
	{
		//def ref initial : set<State> = Set<State>{};
		iterated it;
		t();
		//init();
	}
}

rule InitialSimpleInit()
{
	simple:State;
	
	~(simple -:Substate->;)
	if {simple.initial_conf.empty();}
	
	modify
	{
		eval 
		{ 
			simple.initial_conf 	= simple.possible_conf;
			simple.initial_conf_str = simple.possible_conf_str;
		}
	}
}

rule InitialInit()
{
	
	
	//~(simple -:Substate->;)
	parent:State -:Contains-> :InitialState --> state:State;
	
	if {parent.initial_conf.empty();}
	if {!state.initial_conf.empty();}
	
//	t:InitialInitRec(state);
	
	modify
	{
		eval
		{
			parent.initial_conf 	= state.initial_conf;
			parent.initial_conf_str = state.initial_conf_str;
			emit("\n0:parent.initial_conf", parent.initial_conf);
			emit("\n0:parent.initial_conf_str", parent.initial_conf_str);
		}
		//t();
	}
}


rule ConcurrentStateInitialInit()
{
	parent:ConcurrentState;
	
	if {parent.initial_conf.empty();}
	
	multiple
	{
		parent -:Region-> sub:SubRegion;
		
		break negative {if {sub.initial_conf.empty();}}
		
		modify			
		{
		}
	}
	
	modify
	{
		eval
		{
			
			parent.initial_conf = MergeRegionInitial(parent);
			parent.initial_conf_str = GetConfigStr(parent.initial_conf);
			emit("\n1:parent.initial_conf", parent.initial_conf);
			emit("\n1:parent.initial_conf_str", parent.initial_conf_str);
		}
	}
}

function MergeRegionInitial(parent : ConcurrentState) : array<ActiveState>
{
	def ref states : array<ActiveState> = array<ActiveState>[];
	def ref nodes : set<Node> = adjacentOutgoing(parent, Region);
	emit("\nmerge:", parent);
	for (i : State in nodes)
	{
		if (states.empty()) 
		{
			states = i.initial_conf;
		} else
		{
			states = IntersectArray(states, i.initial_conf);
		}
		emit("\nstates:", states);
	}
	return (states);
}

function IntersectArray(ref a1 : array<ActiveState>, ref a2 : array<ActiveState>) : array<ActiveState>
{
	def ref res : array<ActiveState> = array<ActiveState>[];
	emit("\na1", a1);
	emit("\na2", a2);
	for (i1 : ActiveState in a1)
	{
		if (i1 in a2)
		{
			res.add(i1);
		}
	}
	emit("\nres", res);
	return (res);
}

// pattern InitialInitRec(state:State)
// {	
	// (
		// parent:State -:Contains-> :InitialState --> state;
					
		// if {parent.initial_conf.empty();}
			// //if {!state.initial_conf.empty();}
		// t:InitialInitRec(parent);
			
		// modify
		// {
			// eval
			// {				
				// parent.initial_conf 	= state.initial_conf;
				// parent.initial_conf_str = state.initial_conf_str;
				// emit("\n0:parent.initial_conf", parent.initial_conf);
				// emit("\n0:parent.initial_conf_str", parent.initial_conf_str);
			// }
			// t();
		// }		
	// )?
	
	// modify {}

// }

// filter configurations to this state set, configurations not contained states st, will be filtered
function FilterConf(ref conf : array<ActiveState>, ref st : set<State>) : array<ActiveState>
{
	def ref nconf : array<ActiveState> = array<ActiveState>[];
	for (a : ActiveState in conf)
	{
		//emit("\nfilt it", a, "contains", a.contains);
		//emit("\nfilt &", st & a.contains);
		if ((st & a.contains) == st) // configuration contains state only
		{
			//emit("\nenter", a);
			nconf.add(a);
		}
	}
	//emit("\nnconf", nconf);
	return (nconf);
}

function ContainsConf(ref conf : array<ActiveState>, ref st : set<State>) : boolean
{
	for (a : ActiveState in conf)
	{
		if ((st & a.contains) != st) // configuration contains state only
		{
			return (false);
		}
	}
	return (true);
}

function GetConfigStr(ref st : array<ActiveState>) : array<string>
{
	def ref str : array<string> = array<string>[];
	for (s : ActiveState in st)
	{
		def ref arr : array<string> =  s.contains_str.asArray();
		def var text : string = arr.asString("&");
		str.add(text);
		
	}
	return (str);
}

pattern InitReachableConfig(state : State)
{
	iterated
	{
		state -:Substate-> sub:State;
		
		t:InitReachableConfig(sub);
		
		
		modify
		{
			
			def ref this_conf : set<State> = set<State>{sub};
			//
			evalhere
			{
				//emit("\nthis_conf", this_conf);
				//emit("\nstate.possible_conf", state.possible_conf);				
				sub.possible_conf 	  = FilterConf(state.possible_conf, this_conf);				
				//emit("\nsub.possible_conf", sub.possible_conf);
				sub.possible_conf_str = GetConfigStr(sub.possible_conf);
				//emit("\nsub.possible_conf_str", sub.possible_conf_str);
				//sub.possible_conf = conf;
			}
			t();
		}
	}
	
	modify {}
}

/*
pattern InitInitialConfig(state : State)
{
	(
			if {state.initial_conf.empty();}
			
			t:InitialConfig(state);
			
			iterated
			{
				state -:Substate-> sub:State;
				
				rec:InitInitialConfig(sub);
				modify
				{
					evalhere
					{
						// sub.possible_conf = FilterConf(state.possible_conf, sub);
						// sub.possible_conf_str = array<string(){};
						// for (s : ActiveState in sub.possible_conf)
						// {
							// sub.possible_conf_str.add(s.asString("&"));
						// }
						
					}
					rec();
				}
			}
		
			modify
			{
				def ref init : set<State> = set<State>{};
				t(init);
				evalhere
				{
					state.initial_conf = FilterConf(state.possible_conf, init);
				}
			}
		|
			if {!state.initial_conf.empty();}
						
			iterated
			{
				state -:Substate-> sub:State;
				
				t:InitInitialConfig(sub);
				
				modify
				{
					evalhere
					{
						// if (state.initial_conf)
						// sub.initial_conf = 
						// sub.possible_conf = FilterConf(state.possible_conf, sub);
						// sub.possible_conf_str = array<string(){};
						// for (s : ActiveState in sub.possible_conf)
						// {
							// sub.possible_conf_str.add(s.asString("&"));
						// }
						
					}
					t();
				}
			}
			
			modify {}
		
	)
	 modify {}	
}
*/
rule ActiveStatesInit1()
{
	active:ActiveState;
	state:State;
	
	if {state.id == active.id;}
	~(if {state in active.contains;})
	
	
	modify
	{
		eval
		{
			active.contains.add(state);
			active.contains_str.add(state.name);
			emit("\nadd_contains_str:", state.name, "contains:", active.contains_str);
		}
	}
}

rule ActiveStatesInit()
{
	active:ActiveState;
	~(--> active;)
	
	//def ref all : set<Node> = reachable(active, Edge) | set<Node>{active};
	
	if {active.contains.size() == 1 && reachable(active, Edge).size() > 1;}
	
	modify
	{
		eval
		{
			def ref all : set<Node> = reachable(active, Edge) | set<Node>{active};
			def ref all_st_name : set<string> = set<string>{};
			def ref all_st : set<State> = set<State>{};
			for (a : ActiveState in all)
			{				
				all_st |= a.contains;
			}
			for (a : ActiveState in all)
			{
				if (typeof(a) == ActiveSimpleState)
				{
					emit("\ncontains_str", a.contains_str);
					all_st_name |= a.contains_str;
				}
			}
			// emitdebug("all_st", all_st);
			emit("\nall_st_name", all_st_name);
			for (a : ActiveState in all)
			{
				a.contains = all_st;
				a.contains_str = all_st_name;
			}
		}
	}
}

// rule ActiveStatesInit2()
// {
	// active:ActiveSubRegionState;
	
	// if {active.sub_region_contains.empty();}
	
	// modify
	// {
		// eval
		// {
			// def ref all : set<Node> = reachableOutgoing(active, Edge) | set<Node>{active};
			// def ref all_st : set<string> = set<string>{};
			// for (a : ActiveState in all)
			// {				
				// all_st.add(a.name);
			// }
			// for (a : ActiveState in all)
			// {
				// a.sub_region_contains = all_st;
			// }
		// }
	// }
// }

// rule CreateSimpleStatesTargets()
// {
	// -:StateTransition-> st:State;
	
	// if {st.simple_states.empty();}
	// t:InitialConfig(st);
	
	// modify
	// {
		// def ref tar : set<State> = set<State>{};
		// t(tar);
		// evalhere 
		// { 
			// for (i : State in tar)
			// {
				// st.simple_states.add(i.name); 
			// }
		// }
	// }
// }
// create transition for configs
rule CreateTranConfig()
{
	//def ref conf : set<State>;
	src:State -t:StateTransition-> tar:State;
		
	
	def tar_conf : ActiveState;
	def src_conf : ActiveState;
	
	def lca : Node;
	yield {yield lca = LCA(src, tar); }
	// ~(def sub_region : SubRegion; :GetSubRegion((State)LCA(src, tar), yield sub_region);)
		
	// :SourceConfigs(src, yield src_conf);
	// :TargetConfig(tar,  yield tar_conf);
		
	modify
	{
		src_conf -:copy<t>-> tar_conf;
	}
}

rule CreateTranConfigRegion()
{
	//def ref conf : set<State>;
	src:State -t:StateTransition-> tar:State;
	
	//:TargetConfig(tar);
	
	def sub_region : SubRegion;
	lca : State;
	if {lca == (State)LCA(src, tar);}
		//:LCA(src, tar, yield lca);
	//yield {yield lca = (State)LCA(src, tar); }
	:GetSubRegion(lca, yield sub_region);
	//if {reachableIncoming(lca, Contains, SubRegion);}	
	//def tar_conf : ActiveState;
	//def src_conf : ActiveState;
		
		
	
	//:TargetConfigRegion(src, tar, yield src_conf, yield tar_conf);
		//:TargetConfig(tar,  yield tar_conf);
	//~(src_conf -:Transition-> tar_conf;)		
	modify 
	{
		eval
		{
			def ref conf : array<ActiveState> = src.possible_conf;
			def ref ttar : array<ActiveState> = tar.initial_conf;
			for (i : int -> s : ActiveState in conf)
			{
				def tt : ActiveState = ttar[i];
				addCopy(t, s, tt);
			}
			//src_conf -:copy<t>-> tar_conf;
		}
	}
	
	// yield
	// {
		
	//:SourceConfigs(src, t);
}

// function IsSubRegionPart(st : State) : boolean
// {
	
// }

pattern GetSubRegion(st : State, def parent : SubRegion)
{
	(
		p:SubRegion -:Contains-> st;
		
		yield {yield parent = p;}
	|
		p:State -:Contains-> st;
		~(:SubRegion -:Contains-> st;)
		:GetSubRegion(p, yield parent);
	)
}

// pattern TargetConfig(tar : State, def ret : ActiveState)
// {
	// //def tar_conf : ActiveState;
	
	// //yield {yield tar_conf = States2Conf(tar.simple_states);}
	// st:ActiveState;	
	// if {st.contains >= tar.simple_states;}
		// //:InitialConfig(tar, st);
		
	// yield {yield ret = st;}	
// }
/*
pattern TargetConfigRegion(src : State, tar : State,  -tran:StateTransition->, def srcconf : ActiveState, def tgtconf : ActiveState)
{
	//def tar_conf : ActiveState;
	
	//yield {yield tar_conf = States2Conf(tar.simple_states);}
	st_src:ActiveState;
	st_tar:ActiveState;

	~(--> st_src; )
	~(--> st_tar; )
	// def ref diff_src : set<string>;
	// def ref diff_tar : set<string>;
	
	if {st_src in src.reachable_conf;}
	//if {st_tar in tar.reachable_conf;}
	
	// yield 
	// { 
		// yield diff_src = ;
		// yield diff_tar = ;
	// }	
	
	//st_src.contains \ 
		
	
	
	if {st_tar.contains >= tar.simple_states;}
	
	if {(st_src.contains \ st_src.sub_region_contains) == (st_tar.contains \ st_tar.sub_region_contains);}
	
	~(
		st_src -t:StateTransition-> st_tar;
		if {t.out_str == tran.out_str;}
	 )
	//if {s}
		//:InitialConfig(tar, st);
		
	yield {yield srcconf = st_src; yield tgtconf = st_tar;}	
}*/

pattern IterateArray(ref src : array<ActiveState>, var idx : int, def ret : ActiveState)
{
	(		
		if {idx == src.size();}
	|
		if {idx != src.size();}
		
		yield {yield ret = src[idx];}
		
		:IterateArray(src, idx + 1, yield ret);
	)
}

pattern IterateTwoArray(ref src : array<ActiveState>, ref tar : array<ActiveState>, var idx : int, def ret1 : ActiveState, def ret2 : ActiveState)
{
	//if {src.size() == tar.size();}
	(		
		if {idx == src.size();}
		modify {}
	|
		if {idx != src.size();}		
		//yield {yield ret1 = src[idx];}//yield ret2 = tar[idx];}
		
		:IterateTwoArray(src, tar, idx + 1, yield ret1, yield ret2);
		
		modify {}
	)
}

pattern TargetConfigRegion(src : State, tar : State, def srcconf : ActiveState, def tgtconf : ActiveState)
{
	//def tar_conf : ActiveState;
	
	//yield {yield tar_conf = States2Conf(tar.simple_states);}
	//:IterateArray(src.possible_conf, 0, yield srcconf);
	//:IterateTwoArray(src.possible_conf, tar.initial_conf, 0, yield srcconf, yield tgtconf);
}

rule MoveConfigTransitionToTop()
{
	st:ActiveState -->;
		
}

// pattern SourceConfigs(src : State, def ret : ActiveState)
// {
	// multiple
	// {
		// st:ActiveState;
		// if {st in src.reachable_conf;}
		// yield {yield ret = st;}
	// }
// }

// function States2Conf(ref conf : set<State>) : ActiveState
// {
// // def res : ActiveState;
	 // def ref min_sel : set<ActiveState>;
	 // def ref names : set<string>;
	 // def var min : int = Math::intMax();
	 // for (ret : State in conf)
	 // {
		// def var size : int = ret.reachable_conf.size();
		// if (size < min)
		// {
			// min = size;
			// min_sel = ret.reachable_conf;
		// }
		
		// //yield act = ret;
	 // }
	 // for (c : State in conf)
	 // {
		// names.add(c.name);
	 // }
	 
	 // for (c : ActiveState in min_sel)
	 // {
		// if (c.contains >= names)
		// {
			// return (c);
		// }
	 // }
	 // return (null);
		// //yield act = res;
// }

// pattern FindConfig(ref conf : set<State>)
// {
	
// }

// pattern InitialConfig(rec_tar : State) modify(ref tar : set<State>)
// {
	
	// (		
		// ~(rec_tar -:Substate->;)
		// //target:ActiveConfig;
		// //if {target.name == tar.name;}conf.add(tar);
		// //if {st.name == rec_tar.name;}
		 // //if {rec_tar.name in st.contains;}
		 // modify
		 // {
			// eval { tar.add(rec_tar);}
		 // }
		
	// |
		// ~(:ConcurrentState<rec_tar>;)
		// rec_tar -:Contains-> :InitialState -:PseudoTransition-> child:State;
		
		// t:InitialConfig(child);
		
		// modify {t(tar);}
	// | 	
		// c:ConcurrentState<rec_tar>;
		
		// t:InitialConfRegion(c);
		// // iterated
		// // {
			// // def ret : ActiveState;
			// // tar -:Region-> sub:SubRegion;
			// // :TargetConfigs(sub, rec_tar);
		// // }	
		// modify
		// {
			// t(tar);
		// }
	// )
	
	// modify {}
// }

// pattern InitialConfigSimpleStates(rec_tar : State, def simple : State, def ret : ActiveState)
// {
	// (		
		// ~(rec_tar -:Substate->;)
		
		// target:ActiveState;
		// ~(rec_tar -:Config-> target;)
		// if {target.id == rec_tar.id;}
		
		// yield {yield simple = rec_tar;}
		// yield {yield ret = target;}
		
	// |
		// ~(:ConcurrentState<rec_tar>;)
		// rec_tar -:Contains-> :InitialState -:PseudoTransition-> st:State;
		
		// :InitialConfigSimpleStates(rec_tar, yield simple, yield ret);
				
	// | 	
		// c:ConcurrentState<rec_tar>;
		
		// :InitialConfRegionSimpleStates(c, yield simple, yield ret);
		// // iterated
		// // {
			// // def ret : ActiveState;
			// // tar -:Region-> sub:SubRegion;
			// // :TargetConfigs(sub, rec_tar);
		// // }	
	// )
		
// }

// pattern InitialConfRegionSimpleStates(rec_tar : ConcurrentState, def simple : State, def ret : ActiveState)
// {
	// iterated
	// {
		// rec_tar -:Region-> sub:SubRegion;
		// t:InitialConfigSimpleStates(sub, yield simple, yield ret);		
	// }	
// }

// pattern InitialConfRegion(rec_tar : ConcurrentState) modify(ref tar : set<State>)
// {
	// multiple
	// {
		// rec_tar -:Region-> sub:SubRegion;
		// t:InitialConfig(sub);		
		
		// modify
		// {
			// t(tar);
		// }
	// }	
	
	// modify {}
// }

//rule CreateConfEdges