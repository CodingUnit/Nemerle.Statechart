rule StateCombinations()
{
	-:TopState-> . -e:SimpleState-> state:State;
	and:CreateConfig(state);	
		
	modify
	{
		new_st : ActiveSimpleState;
		eval
		{
			new_st.name = state.name;
			new_st.entry_act = state.entry_act;
			new_st.exit_act = state.exit_act;
			new_st.do_act = state.do_act;
		}
		and(new_st);
		delete(e);
	} 
}

rule SimpleStates()
{	
	st:State;
	
	-:TopState-> top:State;
	
	~( st -:Substate->; )
	~( top -:SimpleState-> st; )
	//if (isReachableIncoming(st, top, Contains));
	
	modify
	{
		top -:SimpleState-> st;
	}
	//yield {yield ret = st;}
}

rule CreateConfigEdges()
{
	(
		src:State -:Transition->;
		
		iterated
		{
			st:ActiveState;
		
			~(src -:Config-> st;)
			if {st.name == src.name;}
		
			modify
			{
				src -:Config-> st;
			}
		}
		
		modify {}
	|
		-:Transition-> src:State;
		def st : ActiveState;
		def simple : State;
		
		:InitialConfigSimpleStates(src, yield simple, yield st);
		
		modify
		{
			simple -:Config-> st;
		}
	)
	
}

pattern CreateConfig(st : State) modify(root : ActiveState)
{	
	optional
	{
		parent:State -:Contains-> st;
		(
			if {typeof(parent) == State;}		
					
			and:CreateConfig(parent);
			//e:CreateConfigEdge(st);
			
			modify
			{
				root <-:And- nst:ActiveState;
				//parent -:Config-> nst;
				eval {yield new_st = nst;}
				and(nst);
			}
		| 				
			p:SubRegion<parent>;
			and:CreateConfig(parent);
			
			modify
			{
				root <-:And- nst:ActiveSubRegionState;
				//st -:Config-> nst;
				parent --> nst;
				eval
				{
					nst.idx 		  = p.idx;				
					yield new_st = nst;					
				}
				and(nst);
			}
		
		|	
			
			p:ConcurrentState<parent>;
			
			and:CreateConfig(parent);
			modify
			{
				root <-:And- nst:ActiveRegionState;
				//st -:Config-> nst;
				parent --> nst;
				eval
				{
					nst.regions = p.regions;
					yield new_st = nst;
				}
				and(nst);
			}
		)
		
		modify
		{	
			def new_st : ActiveState;
			
			eval
			{
				new_st.name 	  = parent.name;
				new_st.entry_act  = parent.entry_act;
				new_st.exit_act   = parent.exit_act;
				new_st.do_act     = parent.do_act;
			}			
		}
	}
	
	modify
	{	
	}
}

rule MarkAndRegions()
{
	st : ConcurrentState -e:Edge -> :ActiveState;	
	
	t:CreateAndOrRegion(st);
	
	modify { t(); }
}

// TODO: nested subregion in subregion
// pattern IterateConf(src : ActiveState)
// {
	
	// (
		// c : ActiveSubRegionState<src>;
		
		// ~(c --> :Oper;);
	// |
		// ~(c : ActiveSubRegionState<src>;)
		// parent : ActiveState --> src;
		// :IterateConf(parent);
	// )
	
// }

pattern CreateAndOrRegion(src:ConcurrentState)
{
	~(src --> :AndConf;)
	
	(
		src --> :SubRegion --> :ActiveSubRegionState <-- or:OrConf;
		
		modify { and_conf --> or; }
	)+
	
	modify { src --> and_conf:AndConf <-- :Eval; }	
}

rule OrSubRegion()
{
	st_sub:SubRegion;
	
	~( st_sub --> sub:ActiveSubRegionState <-- :OrConf; )
	
	iterated
	{
		st_sub -e:Edge-> sub:ActiveSubRegionState;
		
		modify { or --> sub; }
	}
	
	modify { or : OrConf; }
}

rule ClearAndRegion()
{
	st : ConcurrentState -a:Edge-> :AndConf;
	
	multiple
	{
		st -e:Edge-> :ActiveRegionState;
		
		modify
		{
			delete(e);
		}
	}
	
	modify
	{
		delete(a);
	}
}

rule ClearOrSubRegion()
{
	st_sub : SubRegion;	
	
	multiple
	{
		st_sub -e:Edge-> :ActiveSubRegionState;
		
		modify
		{
			delete(e);
		}
	}
	
	modify
	{				
	}
	
}

rule OrMoveToTopOfActiveState()
{
	sub:ActiveSubRegionState <-e:Edge- or:OrConf;
	
	def upper : ActiveState;
	:FindUpperActiveState(sub, yield upper);
	
	modify
	{
		delete(e);
		or --> upper;
	}
}

pattern FindUpperActiveState(st : ActiveState, def res : ActiveState)
{
	(
	  ~( --> st;)
	  yield {yield res = st;}
	|	
		parent:ActiveState --> st;
		:FindUpperActiveState(parent, yield res);
	)
}

pattern CopyConfig(n : Node, -ee:Edge->) modify(res : Node)
{
	iterated
	{
		n -e:Edge-> child:Node;
		
		// optional
		// {
			// src:Node -:Config-> n;
			
			// modify
			// {
				// src -:Config-> nn;
			// }
		// }
		
		t:CopyConfig(child, e);
		
		modify
		{				
			t(nn);			
		}
	}	
		
	modify
	{
		res -:typeof(ee)-> nn:copy<n>;	
	}
				
}

rule DoublesEqualTargets()
{
	src:Node --> n:Node <-e:Edge- other:Node;
		
	if {typeof(n) >= ActiveState || typeof(n) >= Oper;}		
	
	t:CopyConfig(n, e);
	modify
	{
		//def nn : Node;
		//evalhere {(yield nn) = insertInduced(reachableOutgoing(n, Edge), n);}
		delete(e);
		//other -e->! nn;
		t(other);
	}
}

rule UnfoldAndOrComplex()
{
	left:OrConf <-- and:AndConf --> right:OrConf;
		
	
	(		
		and --> other:OrConf;
		
		modify
		{
			and --> res_or:OrConf;
			eval
			{
				Product(left, right, res_or);
			}
		}
	|
		
		~(
		   left <-- and --> right;
		   and  --> other:OrConf;
		 )
		
		modify
		{
			res_or:OrConf<and>;
			eval
			{
				Product(left, right, res_or);
			}
		}
	)	
	
	modify
	{		
		delete(right);
		delete(left);
	}
}

// product of all nodes adjacent in two nodes, connect to parent
procedure Product(left : Node, right : Node, parent : Node)
{
	for (chl:Node in adjacentOutgoing(left)) // for all left
	{
		for (chr:Node in adjacentOutgoing(right)) // for all right
		{
			(def a:AndConf) = add(AndConf); // create and
			add(Edge, a, chr); // connect to it
			add(Edge, a, chl);
			add(Edge, parent, a); // connect to parent
		}
	}
	return;
}

rule EvalConf()
{
	(
		left:ActiveState <-- and:AndConf --> right:ActiveState;
		parent:Node 	 --> and;
		
		t:EvalAndConf(left, left, right);
		
		modify
		{
			delete(and);
			parent --> left;			
			t();
		}
	|
		ev:Eval --> or:OrConf;
		
		iterated it
		{
			or --> conf:ActiveState;
			
			modify {}
		}
		
		~(or --> :AndConf;)
		
		modify
		{
			emitdebug("Number of state config:", count(it));
			delete(ev);
			delete(or);
		}
	)
		
}

pattern EvalAndConf(parent :ActiveState, left:ActiveState, right : ActiveState)
{
	(
		if {left.name == right.name;}
		
		left  --> lnext:ActiveState;
		right --> rnext:ActiveState;
		t:EvalAndConf(left, lnext, rnext);
		
		modify
		{
			delete(right);
			t();
		}
	|
		if {left.name != right.name;}
		
		modify
		{
			parent -:And-> right;
		}
	)	
}

rule ReachableConfigInit()
{
	state:State;
	active:ActiveState;
	
	// names equals
	if {state.reachable_conf.empty();}
	if {state.name == active.name;}
	
	modify
	{
		eval
		{
			
		 // add to reachable set of source
			state.reachable_conf.add(active);
			//active.state = state;
			//def active:ActiveState;
			//active.reachable = set<ActiveState>(reachable(active, Edge) | set<Node>{active});
		}
	}
}

rule ActiveStatesInit()
{
	active:ActiveState;
	~(--> active;)
	
	if {active.contains.empty();}
	
	modify
	{
		eval
		{
			def ref all : set<Node> = reachable(active, Edge) | set<Node>{active};
			def ref all_st : set<string> = set<string>{};
			for (a : ActiveState in all)
			{				
				all_st.add(a.name);
			}
			for (a : ActiveState in all)
			{
				a.contains = all_st;
			}
		}
	}
}

rule CreateSimpleStatesTargets()
{
	-:Transition-> st:State;
	
	t:InitialConfig(st);
	
	modify
	{
		def ref tar : set<State>;
		t(tar);
		evalhere 
		{ 
			for (i : State in tar)
			{
				st.simple_states.add(i.name); 
			}
		}
	}
}
// create transition for configs
rule CreateTranConfig()
{
	//def ref conf : set<State>;
	src:State -t:Transition-> tar:State;
	
	//:TargetConfig(tar);
	
	def tar_conf : ActiveState;
	def src_conf : ActiveState;
	
	:SourceConfigs(src, yield src_conf);
	:TargetConfig(tar,  yield tar_conf);
	//yield {yield tar_conf = States2Conf(tar.simple_states);}
	modify
	{
		src_conf -:copy<t>-> tar_conf;
	}
	// yield
	// {
		
	//:SourceConfigs(src, t);
}

pattern TargetConfig(tar : State, def ret : ActiveState)
{
	//def tar_conf : ActiveState;
	
	//yield {yield tar_conf = States2Conf(tar.simple_states);}
	st:ActiveState;
	if {st.contains >= tar.simple_states;}
	yield {yield ret = st;}
}

pattern SourceConfigs(src : State, def ret : ActiveState)
{
	st:ActiveState;
	if {st in src.reachable_conf;}
	yield {yield ret = st;}
}

function States2Conf(ref conf : set<State>) : ActiveState
{
// def res : ActiveState;
	 def ref min_sel : set<ActiveState>;
	 def ref names : set<string>;
	 def var min : int = Math::intMax();
	 for (ret : State in conf)
	 {
		def var size : int = ret.reachable_conf.size();
		if (size < min)
		{
			min = size;
			min_sel = ret.reachable_conf;
		}
		
		//yield act = ret;
	 }
	 for (c : State in conf)
	 {
		names.add(c.name);
	 }
	 
	 for (c : ActiveState in min_sel)
	 {
		if (c.contains >= names)
		{
			return (c);
		}
	 }
	 return (null);
		//yield act = res;
}

pattern FindConfig(ref conf : set<State>)
{
	
}

pattern InitialConfig(rec_tar : State) modify(ref tar : set<State>)
{
	
	(		
		~(rec_tar -:Substate->;)
		//target:ActiveConfig;
		//if {target.name == tar.name;}conf.add(tar);
		modify
		{
			eval { tar.add(rec_tar);}
		}
		
	|
		~(:ConcurrentState<rec_tar>;)
		rec_tar -:Contains-> :InitialState -:PseudoTransition-> st:State;
		
		t:InitialConfig(rec_tar);
		
		modify {t(tar);}
	| 	
		c:ConcurrentState<rec_tar>;
		
		t:InitialConfRegion(c);
		// iterated
		// {
			// def ret : ActiveState;
			// tar -:Region-> sub:SubRegion;
			// :TargetConfigs(sub, rec_tar);
		// }	
		modify
		{
			t(tar);
		}
	)
	
	modify {}
}

pattern InitialConfigSimpleStates(rec_tar : State, def simple : State, def ret : ActiveState)
{
	(		
		~(rec_tar -:Substate->;)
		
		target:ActiveState;
		~(rec_tar -:Config-> target;)
		if {target.name == rec_tar.name;}
		
		yield {yield simple = rec_tar;}
		yield {yield ret = target;}
		
	|
		~(:ConcurrentState<rec_tar>;)
		rec_tar -:Contains-> :InitialState -:PseudoTransition-> st:State;
		
		:InitialConfigSimpleStates(rec_tar, yield simple, yield ret);
				
	| 	
		c:ConcurrentState<rec_tar>;
		
		:InitialConfRegionSimpleStates(c, yield simple, yield ret);
		// iterated
		// {
			// def ret : ActiveState;
			// tar -:Region-> sub:SubRegion;
			// :TargetConfigs(sub, rec_tar);
		// }	
	)
		
}

pattern InitialConfRegionSimpleStates(rec_tar : ConcurrentState, def simple : State, def ret : ActiveState)
{
	iterated
	{
		rec_tar -:Region-> sub:SubRegion;
		t:InitialConfigSimpleStates(sub, yield simple, yield ret);		
	}	
}

pattern InitialConfRegion(rec_tar : ConcurrentState) modify(ref tar : set<State>)
{
	iterated
	{
		rec_tar -:Region-> sub:SubRegion;
		t:InitialConfig(sub);		
		
		modify
		{
			t(tar);
		}
	}	
	
	modify {}
}

//rule CreateConfEdges