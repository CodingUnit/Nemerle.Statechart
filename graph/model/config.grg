rule CreateActiveBaseState()
{
  //(
	active:ActiveState \ ActiveBaseState;
	
	~(-:And-> active;)
	
	modify
    {
	  :ActiveBaseState<active>;
    }
  
	// |
	
	// active:ActiveRegionState \ ActiveBaseRegionState;
	
	// ~(-:And-> active;)
	
	// modify
    // {
	  // :ActiveBaseRegionState<active>;
    // }
  // )
  //if {typeof(active) != ActiveBaseState;}
  //~(:ActiveBaseState<active>;)
  
  
  

}

// rule CreateActiveStateDepth()
// {
  // active:ActiveBaseState;
  
  // //~(-:And-> active;)
  
  // if {active.depth == 0;}
  
  // t:CreateActiveDepthRec(active, 1);
  
  // modify { t();}
// }

// pattern CreateActiveDepthRec(n : ActiveState, var depth : int)
// {
  // iterated
  // {
	// n -:And-> child:ActiveState;
	
	// t:CreateActiveDepthRec(child, depth + 1);
	
	// modify { t(); }
  // }
  
  // modify { eval { n.depth = depth; } }
// }

// init contains_conf field sub configurations of active state includes it
rule CreateReachableActiveState()
{
	state:ActiveState;
	
	if {state.contains_conf.empty();}
	
	modify
	{
		eval
		{			
			def ref nodes : set<ActiveState> = set<ActiveState>{};
			//def ref src : set<Node> = ;
			for (s : ActiveState in reachableOutgoing(state, And))
			{
				nodes.add(s);
			}
			state.contains_conf = nodes;
			state.contains_conf.add(state);
			state.sub_conf = nodes;
		}
	}
	
}

rule ReachableConfigInit()
{
	-:TopState-> top:State;	
	if {top.possible_conf.empty();}	
	
	iterated it
	{
		active:ActiveBaseState;
		
		//~(--> active;)
		
		modify
		{
			eval
			{
				top.possible_conf.add(active);
				top.possible_conf_str.add(active.contains_str.asArray().asString("&"));
				
			}
		}
	}
	// names equals
		
	t:InitReachableConfig(top);
	//init:InitInitialConfig(top);
	modify
	{
		//def ref initial : set<State> = Set<State>{};
		iterated it;
		t();
		//init();
	}
}

rule InitialSimpleInit()
{
	-:SimpleState-> simple:State;
		
	if {simple.initial_conf.empty();}
	
	modify
	{
		eval 
		{ 
			simple.initial_conf 	= simple.possible_conf;
			simple.initial_conf_str = simple.possible_conf_str;
		}
	}
}

rule InitialInit()
{
	
	
	//~(simple -:Substate->;)
	parent:State -:Contains-> :InitialState --> state:State;
	
	if {parent.initial_conf.empty();}
	if {!state.initial_conf.empty();}
	
//	t:InitialInitRec(state);
	
	modify
	{
		eval
		{
			parent.initial_conf 	= state.initial_conf;
			parent.initial_conf_str = state.initial_conf_str;
			//emit("\n0:parent.initial_conf", parent.initial_conf);
			//emit("\n0:parent.initial_conf_str", parent.initial_conf_str);
		}
		//t();
	}
}


rule ConcurrentStateInitialInit()
{
	parent:ConcurrentState;
	
	if {parent.initial_conf.empty();}
	
	multiple
	{
		parent -:Region-> sub:SubRegion;
		
		break negative {if {sub.initial_conf.empty();}}
		
		modify			
		{
		}
	}
	
	modify
	{
		eval
		{
			
			parent.initial_conf = MergeRegionInitial(parent);
			parent.initial_conf_str = GetConfigStr(parent.initial_conf);
			//emit("\n1:parent.initial_conf", parent.initial_conf);
			//emit("\n1:parent.initial_conf_str", parent.initial_conf_str);
		}
	}
}

function MergeRegionInitial(parent : ConcurrentState) : set<ActiveState>
{
	def ref states : set<ActiveState> = set<ActiveState>{};
	//def ref nodes : set<Node> = ;
	//emit("\nmerge:", parent);
	for (i : State in adjacentOutgoing(parent, Region))
	{
		if (states.empty()) 
		{
			states = i.initial_conf;
		} else
		{
			states &= i.initial_conf;//IntersectArray(states, i.initial_conf);
		}
		//emit("\nstates:", states);
	}
	return (states);
}

// filter configurations to this state set, configurations not contained states st, will be filtered
function FilterConf(ref conf : set<ActiveState>, ref st : set<State>) : set<ActiveState>
{
	def ref nconf : set<ActiveState> = set<ActiveState>{};
	for (a : ActiveState in conf)
	{
		//emit("\nfilt it", a, "contains", a.contains);
		//emit("\nfilt &", st & a.contains);
		//if ((st & a.contains) == st) // configuration contains state only
		if (st <= a.contains) // configuration contains state only
		{
			//emit("\nenter", a);
			nconf.add(a);
		}
	}
	//emit("\nnconf", nconf);
	return (nconf);
}

function GetConfigStr(ref st : set<ActiveState>) : set<string>
{
	def ref str : set<string> = set<string>{};
	for (s : ActiveState in st)
	{
		def ref arr : array<string> =  s.contains_str.asArray();
		def var text : string = arr.asString("&");
		str.add(text);
		
	}
	return (str);
}

pattern InitReachableConfig(state : State)
{
	iterated
	{
		state -:Substate-> sub:State;
		
		t:InitReachableConfig(sub);
		
		
		modify
		{
			
			def ref this_conf : set<State> = set<State>{sub};
			//
			evalhere
			{
				//emit("\nthis_conf", this_conf);
				//emit("\nstate.possible_conf", state.possible_conf);				
				sub.possible_conf 	  = FilterConf(state.possible_conf, this_conf);				
				//emit("\nsub.possible_conf", sub.possible_conf);
				sub.possible_conf_str = GetConfigStr(sub.possible_conf);
				//emit("\nsub.possible_conf_str", sub.possible_conf_str);
				//sub.possible_conf = conf;
			}
			t();
		}
	}
	
	modify {}
}

rule ActiveStatesInit1()
{
	active:ActiveState;
	state:State;
	
	if {state.id == active.id;}
	~(if {state in active.contains;})
	
	
	modify
	{
		eval
		{
			active.contains_id.add(state.id);
			active.contains.add(state);
			active.contains_str.add(state.name);
			emit("\nadd_contains_str:", state.name, "contains:", active.contains_str);
		}
	}
}

rule ActiveStatesInit()
{
	active:ActiveBaseState;
	//~(--> active;)
	
	//def ref all : set<Node> = reachable(active, Edge) | set<Node>{active};
	
	if {active.contains.size() == 1 && reachable(active, Edge).size() > 1;}
	
	modify
	{
		eval
		{
			def ref all : set<Node> = reachable(active, Edge) | set<Node>{active};
			def ref all_st_name : set<string> = set<string>{};
			def ref all_st : set<State> = set<State>{};
			def ref all_st_id : set<int> = set<int>{};
			
			for (a : ActiveState in all)
			{				
				all_st |= a.contains;
				all_st_id |= a.contains_id;
			}
			for (a : ActiveState in all)
			{
				if (typeof(a) == ActiveSimpleState)
				{
					//emit("\ncontains_str", a.contains_str);
					all_st_name |= a.contains_str;
				}
			}
			// emitdebug("all_st", all_st);
			//emit("\nall_st_name", all_st_name);
			active.contains = all_st;
			active.contains_id = all_st_id;
			active.contains_str = all_st_name;
		}
	}
}

rule CreateLCA()
{
	src:State -t:StateTransition-> tar:State;
		
	if {t.lca.empty();}
	
	lca : State;
	:LCA(src, tar, lca); // least common ancestor of source and target
	
	modify
	{
		eval {t.lca.add(lca);}
	}
}
// create transition for configs
rule CreateTranConfigFromRegion()
{	
	src:State -t:StateTransition-> tar:State;
		
	def src_region : ConcurrentState;
	:GetRegion(src, yield src_region);
	
	negative
	{
		:ActiveState -t2:StateTransition-> :ActiveState;
		
		if {t.id == t2.id;}
	}
	
	
	def src_conf : ActiveState;	
	def tar_conf : ActiveState;	
	
	
	lca : State;
	:LCA(src, tar, lca); // least common ancestor
	// not in sub region
	~(def sub_region : SubRegion; :GetSubRegion(lca, yield sub_region);)
			
	yield 
	{
		yield tar_conf = tar.initial_conf.peek(0);
		yield src_conf = src.possible_conf.peek(0);
	}	
		
	modify
	{
		src_conf -e:GroupConfigTransition-> tar_conf;
		
		eval
		{
			e.source  = src.possible_conf;
			e.trigger = t.trigger;
		    e.guard   = t.guard;
			e.action  = t.action;
			e.source_state = src.name;
			e.target_state = tar.name;
			e.out_str = t.out_str;
			e.id	  = t.id;
		}
	}
}

rule CreateTranConfig()
{
	src:State -t:StateTransition-> tar:State;
	
	// not created active state transition
	negative
	{
		:ActiveState -t2:StateTransition-> :ActiveState;
		if {t.id == t2.id;}
	}
	
	// no subregion
	negative
	{
		def sub_region : SubRegion; 
		:GetSubRegion(lca, yield sub_region);
	}
	def tar_conf : ActiveState;	
	
	lca : State;
	:LCA(src, tar, lca);
			
	yield 
	{
		yield tar_conf = tar.initial_conf.peek(0);
	}	
		
	modify
	{
		def ref src_conf : set<ActiveState> = src.possible_conf;
		eval
		{			
			for (s : ActiveState in src_conf)
			{				
				//addCopy(t, s, tar_conf);
				
				(def -n:Edge->) = addCopy(t, s, tar_conf);
				(def -r:ActiveStateTransition->) = retype(n, ActiveStateTransition);
				r.source_state = src.name;
				r.target_state = tar.name;
			}			
		}
	}
}

rule CreateTranConfigRegion()
{	
	src:State -t:StateTransition-> tar:State;
	
	negative
	{
		:ActiveState -t2:StateTransition-> :ActiveState;
		if {t.id == t2.id;}
	}
	
	def sub_region : SubRegion;
	
	lca : State;
	:LCA(src, tar, lca);
	:GetSubRegion(lca, yield sub_region);
	
	modify 
	{
		def ref sub_region_states : set<State> = sub_region.sub_states;
		def ref conf : set<ActiveState> = src.possible_conf;
		def ref ttar : set<ActiveState> = tar.initial_conf;		
		eval
		{
			for (s : ActiveState in conf)
			{
				def ref src_other_reg : set<State> = s.contains \ sub_region_states;
				for (tt : ActiveState in ttar)
				{
					def ref tar_other_reg : set<State> = tt.contains \ sub_region_states;
					if (src_other_reg == tar_other_reg)
					{					
						(def -n:Edge->) = addCopy(t, s, tt);
						(def -r:ActiveStateTransition->) = retype(n, ActiveStateTransition);
						r.source_state = src.name;
						r.target_state = tar.name;
					}
				}
			}
		
		}
		//tty();
	}
	
}

// function IsSubRegionPart(st : State) : boolean
// {
	
// }

pattern GetSubRegion(st : State, def parent : SubRegion)
{
	(
		reg:SubRegion<st>;
		yield {yield parent = reg;}
	|
		p:State -:Contains-> st;
		
		~(:SubRegion<st>;)
		
		:GetSubRegion(p, yield parent);		
	)
}

pattern GetRegion(st : State, def parent : ConcurrentState)
{
	(
		reg:ConcurrentState<st>;
		yield {yield parent = reg;}
	|
		p:State -:Contains-> st;
		
		~(:ConcurrentState<st>;)
		
		:GetRegion(p, yield parent);		
	)
}

// pattern IterateArray(ref src : set<ActiveState>, var idx : int, def ret : ActiveState)
// {
	// optional
	// {
		// //if {idx != 0;}
		
		// if {idx != src.size();}
		
		// //yield {yield si = uniqueof(src.peek(idx));}
	
		// st:ActiveState;
		// if {st == src.peek(idx);}
		
		// //:GetElem(uniqueof(src.peek(idx)), yield ret);
		// //yield {yield ret = st;}
		
		// :IterateArray(src, idx + 1, yield ret);
		
	// // |
		// // if {idx == 0;}
		
		// // :IterateArray(src, "", idx, yield ret);
	
	// }
// }

// pattern IterateTwoArray(ref src : array<ActiveState>, ref tar : array<ActiveState>, var idx : int, def ret1 : ActiveState, def ret2 : ActiveState)
// {
	// //if {src.size() == tar.size();}
	// (		
		// if {idx == src.size();}
		// modify {}
	// |
		// if {idx != src.size();}		
		// //yield {yield ret1 = src[idx];}//yield ret2 = tar[idx];}
		
		// :IterateTwoArray(src, tar, idx + 1, yield ret1, yield ret2);
		
		// modify {}
	// )
// }

