node class ActiveState extends StateNode
{	
	entry_act : string;
	exit_act  : string;
	do_act    : string;	
	contains  : set<State>;
	sub_conf  : set<ActiveState>;
	contains_id : set<int>;
	contains_str : set<string>;
	sub_region_contains : set<string>;
}

index id2active { ActiveState.id }

node class ActiveBaseState extends ActiveState
{
	contains_conf : set<ActiveState>;
}

node class ActiveBaseRegionState extends ActiveState;
node class ActiveSimpleState extends ActiveState;
node class ActiveRegionState extends ActiveState
{
	regions : int;
}

node class ActiveSubRegionState extends ActiveState
{
	idx : int;
}

node class Oper;

node class AndConf extends Oper;

node class OrConf extends Oper;

node class Eval;

directed edge class GroupConfigTransition extends StateTransition
{
	source : set<ActiveState>;
}

directed edge class Config;
directed edge class And;// extends Contains;

directed edge class ActiveStateTransition extends StateTransition
{
	lca_conf : set<ActiveState>;
	source : set<ActiveState>;
	target : set<ActiveState>;
}

directed edge class TransitionPath;

node class Path;

node class Helper extends Path;

node class Lca extends Helper
{
	name : string;
}

node class StateExit extends Path
{
	name : string;
}

node class StateEntry extends Path
{
	name : string;
}

node class StateAction extends Path
{
	action : string;
}

node class TransitionAction extends Path;