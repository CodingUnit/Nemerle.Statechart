node class ActiveState extends StateNode
{	
	entry_act : array<string>;
	exit_act  : array<string>;
	do_act    : array<string>;	
	defer	  : array<string>;
	contains  : set<State>;
	contains_conf  : set<ActiveState>;
	sub_conf	   : set<ActiveState>;
	contains_id : set<int>;
	contains_str : set<string>;
	sub_region_contains : set<string>;
}

index id2active { ActiveState.id }

node class ActiveBaseState extends ActiveState
{
	//contains_conf : set<ActiveState>;
}

//node class ActiveBaseRegionState extends ActiveBaseState, ActiveRegionState;
node class ActiveSimpleState extends ActiveState;
node class ActiveRegionState extends ActiveState
{
	regions : int;
}

node class ActiveSubRegionState extends ActiveState
{
	idx : int;
}

node class Oper;

node class AndConf extends Oper;

node class OrConf extends Oper;

node class Eval;

directed edge class GroupConfigTransition extends ActiveStateTransition
{
	//source : set<ActiveState>;
}

directed edge class Config;
directed edge class And;// extends Contains;

directed edge class ActiveStateTransition extends StateTransition
{
	lca_conf     : set<ActiveState>;
	source       : set<ActiveState>;
	source_state : string;
	target       : set<ActiveState>;
	target_state : string;
}

directed edge class Step;
directed edge class Next extends Step;

node class Path
{
	name : string;
}

node class Helper extends Path;

node class Lca extends Helper
{	
}

node class StateExit extends Path
{
}

node class StateEntry extends Path
{
}

node class Action extends Path;
node class StateAction extends Action
{
}

node class StartDoActivity extends Path;
node class StopDoActivity extends Path;

node class TransitionAction extends Action;

node class TranStart extends Path;
node class GuardCheck extends TranStart;
node class ElseGuard extends GuardCheck;

directed edge class True extends Step;
directed edge class False extends Step;
// directed edge class Event extends Step
// {
	// trigger : string;
	// source_state : string;
	// target_state : string;
// }
