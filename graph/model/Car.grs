# begin of graph "lgspGraph_3" saved by GrsExport

new graph "StateMachine" "lgspGraph_3"
new :StateMachine($ = "Car", id = 7, depth = 0, name = "Car")
new :State($ = "Drive", id = 2, depth = 0, name = "Drive", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "Stand", id = 1, depth = 0, name = "Stand", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "MotorOn", id = 4, depth = 0, name = "MotorOn", entry_act = array<string>["RadioOn()"], exit_act = array<string>["RadioOff()"], do_act = array<string>["coolEngine()"], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "EngineOff", id = 0, depth = 0, name = "EngineOff", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "", id = 6, depth = 0, name = "", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :InitialState($ = "$6", id = 5, depth = 0)
new :InitialState($ = "$3", id = 3, depth = 0)
new :SelfTarget($ = "$F", id = 0, depth = 0)
new :Unresolved($ = "EngineOff2", id = 0, depth = 0, name = "EngineOff")
new :Unresolved($ = "Stand2", id = 0, depth = 0, name = "Stand")
new :Unresolved($ = "EngineOff1", id = 0, depth = 0, name = "EngineOff")
new :Unresolved($ = "Stand1", id = 0, depth = 0, name = "Stand")
new :Unresolved($ = "Drive1", id = 0, depth = 0, name = "Drive")
new :Unresolved($ = "MotorOn1", id = 0, depth = 0, name = "MotorOn")
# total number of nodes: 15

new @("Car") - :TopState($ = "$8") -> @("")
new @("Drive") - :ExternalTransition($ = "$11", id = 0, set_flag = 0L, trigger = "BREAK_PEDAL", guard = "[speed > 1]", action = "Break()", out_str = "BREAK_PEDAL [speed > 1] / Break()") -> @("$F")
new @("Drive") - :InternalTransition($ = "$12", id = 0, set_flag = 0L, trigger = "GAS_PEDAL", guard = "", action = "accelerate()", out_str = "GAS_PEDAL / accelerate()") -> @("Drive")
new @("Drive") - :ExternalTransition($ = "$E", id = 0, set_flag = 0L, trigger = "BREAK_PEDAL", guard = "[speed == 1]", action = "Break()", out_str = "BREAK_PEDAL [speed == 1] / Break()") -> @("Stand1")
new @("Stand") - :ExternalTransition($ = "$C", id = 0, set_flag = 0L, trigger = "GAS_PEDAL", guard = "", action = "accelerate()", out_str = "GAS_PEDAL / accelerate()") -> @("Drive1")
new @("MotorOn") - :Substate($ = "$2") -> @("Drive")
new @("MotorOn") - :Contains($ = "$4") -> @("$3")
new @("MotorOn") - :Contains($ = "$B") -> @("Drive1")
new @("MotorOn") - :Contains($ = "$D") -> @("Stand1")
new @("MotorOn") - :Contains($ = "$10") -> @("$F")
new @("MotorOn") - :ExternalTransition($ = "$14", id = 0, set_flag = 0L, trigger = "TURN_KEY", guard = "", action = "stop()", out_str = "TURN_KEY / stop()") -> @("EngineOff1")
new @("MotorOn") - :Contains($ = "$15") -> @("Stand2")
new @("MotorOn") - :Substate($ = "$1") -> @("Stand")
new @("EngineOff") - :ExternalTransition($ = "$A", id = 0, set_flag = 0L, trigger = "TURN_KEY", guard = "[isBatteryOk()]", action = "start()", out_str = "TURN_KEY [isBatteryOk()] / start()") -> @("MotorOn1")
new @("") - :Substate($ = "$5") -> @("MotorOn")
new @("") - :Contains($ = "$7") -> @("$6")
new @("") - :Contains($ = "$9") -> @("MotorOn1")
new @("") - :Contains($ = "$13") -> @("EngineOff1")
new @("") - :Contains($ = "$17") -> @("EngineOff2")
new @("") - :Substate($ = "$0") -> @("EngineOff")
new @("$6") - :PseudoTransition($ = "$18", id = 0, set_flag = 0L, guard = "", action = "initialize()", out_str = " / initialize()") -> @("EngineOff2")
new @("$3") - :PseudoTransition($ = "$16", id = 0, set_flag = 0L, guard = "", action = "Oil-Display()", out_str = " / Oil-Display()") -> @("Stand2")
# total number of edges: 22

@("Drive").sub_regions = set<SubRegion>{}
@("Drive").regions = set<ConcurrentState>{}
@("Drive").sub_states = set<State>{}
@("Drive").possible_conf = set<ActiveState>{}
@("Drive").initial_conf = set<ActiveState>{}
@("$11").lca = set<State>{}
@("$11").sub_regions = set<SubRegion>{}
@("$11").regions = set<ConcurrentState>{}
@("$12").lca = set<State>{}
@("$12").sub_regions = set<SubRegion>{}
@("$12").regions = set<ConcurrentState>{}
@("$E").lca = set<State>{}
@("$E").sub_regions = set<SubRegion>{}
@("$E").regions = set<ConcurrentState>{}
@("Stand").sub_regions = set<SubRegion>{}
@("Stand").regions = set<ConcurrentState>{}
@("Stand").sub_states = set<State>{}
@("Stand").possible_conf = set<ActiveState>{}
@("Stand").initial_conf = set<ActiveState>{}
@("$C").lca = set<State>{}
@("$C").sub_regions = set<SubRegion>{}
@("$C").regions = set<ConcurrentState>{}
@("MotorOn").sub_regions = set<SubRegion>{}
@("MotorOn").regions = set<ConcurrentState>{}
@("MotorOn").sub_states = set<State>{}
@("MotorOn").possible_conf = set<ActiveState>{}
@("MotorOn").initial_conf = set<ActiveState>{}
@("$14").lca = set<State>{}
@("$14").sub_regions = set<SubRegion>{}
@("$14").regions = set<ConcurrentState>{}
@("EngineOff").sub_regions = set<SubRegion>{}
@("EngineOff").regions = set<ConcurrentState>{}
@("EngineOff").sub_states = set<State>{}
@("EngineOff").possible_conf = set<ActiveState>{}
@("EngineOff").initial_conf = set<ActiveState>{}
@("$A").lca = set<State>{}
@("$A").sub_regions = set<SubRegion>{}
@("$A").regions = set<ConcurrentState>{}
@("").sub_regions = set<SubRegion>{}
@("").regions = set<ConcurrentState>{}
@("").sub_states = set<State>{}
@("").possible_conf = set<ActiveState>{}
@("").initial_conf = set<ActiveState>{}
@("$18").lca = set<State>{}
@("$18").sub_regions = set<SubRegion>{}
@("$18").regions = set<ConcurrentState>{}
@("$16").lca = set<State>{}
@("$16").sub_regions = set<SubRegion>{}
@("$16").regions = set<ConcurrentState>{}
# end of graph "lgspGraph_3" saved by GrsExport

