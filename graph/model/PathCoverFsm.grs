# begin of graph "lgspGraph_8" saved by GrsExport

new graph "StateMachine" "lgspGraph_8"
new :StateMachine($ = "PathCoverFsm", id = 8, depth = 0, name = "PathCoverFsm", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "D", id = 6, depth = 0, name = "D", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 4, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "E", id = 5, depth = 0, name = "E", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 3, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "C", id = 4, depth = 0, name = "C", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 2, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "B", id = 3, depth = 0, name = "B", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "A", id = 1, depth = 0, name = "A", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "", id = 7, depth = 0, name = "", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :DeepHistory($ = "$4", id = 2, depth = 0)
new :DeepHistory($ = "$0", id = 0, depth = 0)
new :SelfTarget($ = "$1D", id = 0, depth = 0)
new :SelfTarget($ = "$13", id = 0, depth = 0)
new :Unresolved($ = "B3", id = 0, depth = 0, name = "B")
new :Unresolved($ = "A4", id = 0, depth = 0, name = "A")
new :Unresolved($ = "D2", id = 0, depth = 0, name = "D")
new :Unresolved($ = "E2", id = 0, depth = 0, name = "E")
new :Unresolved($ = "E1", id = 0, depth = 0, name = "E")
new :Unresolved($ = "A3", id = 0, depth = 0, name = "A")
new :Unresolved($ = "D1", id = 0, depth = 0, name = "D")
new :Unresolved($ = "A2", id = 0, depth = 0, name = "A")
new :Unresolved($ = "B2", id = 0, depth = 0, name = "B")
new :Unresolved($ = "B1", id = 0, depth = 0, name = "B")
new :Unresolved($ = "A1", id = 0, depth = 0, name = "A")
new :UnresolvedHistory($ = "B4", id = 0, depth = 0, name = "B")
new :UnresolvedHistory($ = "$E", id = 0, depth = 0, name = "")
# total number of nodes: 24

new @("PathCoverFsm") - :TopState($ = "$D") -> @("")
new @("D") - :ExternalTransition($ = "$25", id = 0, set_flag = 0L, trigger = "e", guard = "", action = "", out_str = "e") -> @("B3")
new @("D") - :ExternalTransition($ = "$27", id = 0, set_flag = 0L, trigger = "n", guard = "", action = "", out_str = "n") -> @("B4")
new @("D") - :Parent($ = "$B") -> @("A2")
new @("E") - :ExternalTransition($ = "$21", id = 0, set_flag = 0L, trigger = "i", guard = "", action = "", out_str = "i") -> @("D2")
new @("E") - :ExternalTransition($ = "$23", id = 0, set_flag = 0L, trigger = "j", guard = "", action = "", out_str = "j") -> @("A4")
new @("E") - :Parent($ = "$9") -> @("B2")
new @("C") - :InternalTransition($ = "$1A", id = 0, set_flag = 0L, trigger = "a", guard = "", action = "()", out_str = "a / ()") -> @("C")
new @("C") - :ExternalTransition($ = "$1C", id = 0, set_flag = 0L, trigger = "b", guard = "", action = "", out_str = "b") -> @("E2")
new @("C") - :ExternalTransition($ = "$1F", id = 0, set_flag = 0L, trigger = "m", guard = "", action = "", out_str = "m") -> @("$1D")
new @("C") - :Parent($ = "$7") -> @("B1")
new @("B") - :Contains($ = "$5") -> @("$4")
new @("B") - :ExternalTransition($ = "$12", id = 0, set_flag = 0L, trigger = "d", guard = "", action = "", out_str = "d") -> @("D1")
new @("B") - :ExternalTransition($ = "$15", id = 0, set_flag = 0L, trigger = "f", guard = "", action = "", out_str = "f") -> @("$13")
new @("B") - :ExternalTransition($ = "$17", id = 0, set_flag = 0L, trigger = "k", guard = "", action = "", out_str = "k") -> @("A3")
new @("B") - :ExternalTransition($ = "$19", id = 0, set_flag = 0L, trigger = "c", guard = "", action = "", out_str = "c") -> @("E1")
new @("B") - :Parent($ = "$3") -> @("A1")
new @("A") - :Contains($ = "$F") -> @("$E")
new @("A") - :ExternalTransition($ = "$10", id = 0, set_flag = 0L, trigger = "g", guard = "", action = "", out_str = "g") -> @("$E")
new @("A") - :Contains($ = "$1") -> @("$0")
new @("") - :Substate($ = "$6") -> @("B")
new @("") - :Substate($ = "$8") -> @("C")
new @("") - :Substate($ = "$A") -> @("E")
new @("") - :Substate($ = "$C") -> @("D")
new @("") - :Contains($ = "$11") -> @("D1")
new @("") - :Contains($ = "$14") -> @("$13")
new @("") - :Contains($ = "$16") -> @("A3")
new @("") - :Contains($ = "$18") -> @("E1")
new @("") - :Contains($ = "$1B") -> @("E2")
new @("") - :Contains($ = "$1E") -> @("$1D")
new @("") - :Contains($ = "$20") -> @("D2")
new @("") - :Contains($ = "$22") -> @("A4")
new @("") - :Contains($ = "$24") -> @("B3")
new @("") - :Contains($ = "$26") -> @("B4")
new @("") - :Substate($ = "$2") -> @("A")
# total number of edges: 35

@("PathCoverFsm").sub_regions = set<SubRegion>{}
@("PathCoverFsm").regions = set<ConcurrentState>{}
@("PathCoverFsm").sub_states = set<State>{}
@("PathCoverFsm").possible_conf = set<ActiveState>{}
@("PathCoverFsm").initial_conf = set<ActiveState>{}
@("D").sub_regions = set<SubRegion>{}
@("D").regions = set<ConcurrentState>{}
@("D").sub_states = set<State>{}
@("D").possible_conf = set<ActiveState>{}
@("D").initial_conf = set<ActiveState>{}
@("$25").lca = set<State>{}
@("$25").sub_regions = set<SubRegion>{}
@("$25").regions = set<ConcurrentState>{}
@("$27").lca = set<State>{}
@("$27").sub_regions = set<SubRegion>{}
@("$27").regions = set<ConcurrentState>{}
@("E").sub_regions = set<SubRegion>{}
@("E").regions = set<ConcurrentState>{}
@("E").sub_states = set<State>{}
@("E").possible_conf = set<ActiveState>{}
@("E").initial_conf = set<ActiveState>{}
@("$21").lca = set<State>{}
@("$21").sub_regions = set<SubRegion>{}
@("$21").regions = set<ConcurrentState>{}
@("$23").lca = set<State>{}
@("$23").sub_regions = set<SubRegion>{}
@("$23").regions = set<ConcurrentState>{}
@("C").sub_regions = set<SubRegion>{}
@("C").regions = set<ConcurrentState>{}
@("C").sub_states = set<State>{}
@("C").possible_conf = set<ActiveState>{}
@("C").initial_conf = set<ActiveState>{}
@("$1A").lca = set<State>{}
@("$1A").sub_regions = set<SubRegion>{}
@("$1A").regions = set<ConcurrentState>{}
@("$1C").lca = set<State>{}
@("$1C").sub_regions = set<SubRegion>{}
@("$1C").regions = set<ConcurrentState>{}
@("$1F").lca = set<State>{}
@("$1F").sub_regions = set<SubRegion>{}
@("$1F").regions = set<ConcurrentState>{}
@("B").sub_regions = set<SubRegion>{}
@("B").regions = set<ConcurrentState>{}
@("B").sub_states = set<State>{}
@("B").possible_conf = set<ActiveState>{}
@("B").initial_conf = set<ActiveState>{}
@("$12").lca = set<State>{}
@("$12").sub_regions = set<SubRegion>{}
@("$12").regions = set<ConcurrentState>{}
@("$15").lca = set<State>{}
@("$15").sub_regions = set<SubRegion>{}
@("$15").regions = set<ConcurrentState>{}
@("$17").lca = set<State>{}
@("$17").sub_regions = set<SubRegion>{}
@("$17").regions = set<ConcurrentState>{}
@("$19").lca = set<State>{}
@("$19").sub_regions = set<SubRegion>{}
@("$19").regions = set<ConcurrentState>{}
@("A").sub_regions = set<SubRegion>{}
@("A").regions = set<ConcurrentState>{}
@("A").sub_states = set<State>{}
@("A").possible_conf = set<ActiveState>{}
@("A").initial_conf = set<ActiveState>{}
@("$10").lca = set<State>{}
@("$10").sub_regions = set<SubRegion>{}
@("$10").regions = set<ConcurrentState>{}
@("").sub_regions = set<SubRegion>{}
@("").regions = set<ConcurrentState>{}
@("").sub_states = set<State>{}
@("").possible_conf = set<ActiveState>{}
@("").initial_conf = set<ActiveState>{}
# end of graph "lgspGraph_8" saved by GrsExport

