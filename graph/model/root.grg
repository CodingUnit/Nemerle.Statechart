// graph rewrite rule file, shows how to define a model to use, and how a rule looks like,
// with the pattern to match and the rewrite to apply, with lhs and rhs elements being indentified by their name

#using "StateMachine.gm"

// find final state in parent of this node
test FindFinalState(state : State) : (FinalState)
{
	parent:State -:Contains-> state;
	parent -:Contains-> final:FinalState;
	hom(parent, state);
	
	return (final);	 				
}

rule CreateFinalState(state : State) : (FinalState)
{
	parent:State -:Contains-> state;	
	hom(parent, state);
	
	negative
	{
		parent -:Contains-> :FinalState;		
	}	
	
	modify
	{
	  parent -:Contains-> final:FinalState;
	  return (final);
	}	
}

// find qualified target state.substate or state.pseudo syntax
test FindQualified(var state : string, var tar : string) : (StateMachineNode)
{
  st:State -:Contains-> t:NamedNode;  
  hom(st, t);  
  
  if { nameof(st) == state && t.name == tar;}
   
  return (t);  
}

// find qualified target state.substate or state.pseudo syntax
test FindQualifiedPath(ref tar : array<string>, var sz : int) : (StateMachineNode)
{
  st:State -:Contains-> t:NamedNode;    
  hom(st, t);  
  iterated
  {	
    if { st.name == tar[0] && t.name == tar[1];}  
	
    :QualifiedRec(t, tar, 2, sz);
	
  }
  return (t);
}

pattern QualifiedRec(state : NamedNode, ref tar : array<string>, var idx : int, var sz : int)
{
	optional
	{
		state -:Contains-> t:NamedNode;		
		if { idx != tar.size() && t.name == tar[idx];}  
		:QualifiedRec(t, tar, idx + 1, sz);
	}
}
// find qualified target state.substate or state.pseudo syntax
test FindQualifiedNode(state : State, var tar : string) : (StateMachineNode)
{
  state -:Contains-> t:NamedNode;  
  hom(state, t);  
  
  if { t.name == tar;}
   
  return (t);  
}


// find qualified target state.substate or state.pseudo syntax
test FindQualifiedType(var state : string, tar : StateMachineNode) : (StateMachineNode)
{
  st:State -:Contains-> t:typeof(tar);  
  hom(st, t);  
  
  if { st.name == state; }
  //if { typeof(t) == typeof(tar);}
   
  return (t);  
}

// find qualified target state.substate or state.pseudo syntax
test FindNamed(var name : string) : (NamedNode)
{
  t:NamedNode;  
  
  if { t.name == name; }   
  return (t);
}
