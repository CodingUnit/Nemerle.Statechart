// graph rewrite rule file, shows how to define a model to use, and how a rule looks like,
// with the pattern to match and the rewrite to apply, with lhs and rhs elements being indentified by their name

#using "StateMachine.gm"

// find final state in parent of this node
test FindFinalState(state : State) : (FinalState)
{
	final:FinalState <-:Contains- parent:State -:Contains-> state;
	//parent -:Contains-> final:FinalState;
	hom(parent, state);
	//hom(parent, final);
	return (final);
}

// find qualified target state.substate or state.pseudo syntax
test FindQualified(var state : string, var tar : string) : (StateMachineNode)
{
  st:State -:Contains-> t:StateMachineNode;
  hom(st, t);
  negative
  {
	if { nameof(t) == tar; }
	if { nameof(st) == state; }
  }
  return (t);
}