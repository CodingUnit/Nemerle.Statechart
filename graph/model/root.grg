// graph rewrite rule file, shows how to define a model to use, and how a rule looks like,
// with the pattern to match and the rewrite to apply, with lhs and rhs elements being indentified by their name

#using "StateMachine.gm"

/*
rule FindOrCreate(parent : StateMachineNode, type : StateMachineNode) : (StateMachineNode)
{
  def n:StateMachineNode;
  alternative
  {
    found
	{
	  parent -:Contains-> t:typeof(type);
	  hom(parent, t);
	  modify
	  {
		  yield (n = t);
      }
	}
	not_found
	{
	  negative
	  {
		parent -:Contains-> t:typeof(type);
		hom(parent, t);
	  }
	  modify
	  {
		parent -:Contains-> t:typeof(type);
		eval
		{
			yield n = t;
		}
	  }
	}
  }
  // for (n:namednode in nodes(namednode))
  // {
    // if (n.name == name) return (n);
  // }
  // (def n:namednode) = add(namednode);
  // return (n);
  modify
  {	
	return (n);
  }
}*/

// rule Create(parent : StateMachineNode, name : string, type : StateMachineNode) : StateMachineNode
// {
// }

// create final state in parent of this node
rule CreateFinalState(state : State) : (FinalState)
{
	parent:State -:Contains-> state; // parent of state		
	hom(parent, state);
	
	negative
	{
	  parent -:Contains-> :FinalState; // if parent contains final state	  
	}
	// create another if has'nt
	modify
	{
	  parent -:Contains-> final:FinalState;
	  return (final);
	}	
}

// find teminate in top state
test FindTerminate() : (Terminate)
{
    -:TopState-> top:State;
	top -:Contains-> term:Terminate;
	
	return (term);
		
}
// create final state in parent of this node
rule CreateTerminate() : (Terminate)
{	
	-:TopState-> top:State;
	
	negative
	{
	  :Terminate; // if top contains teminate
	}
	// create new if has'nt
	modify
	{
	  top -:Contains-> term:Terminate;
	  return (term);
	}	
}

// find final state in parent of this node
test FindFinalState(state : State) : (FinalState)
{
	parent:State -:Contains-> state; // parent of state		
	parent -:Contains-> final:FinalState; // if parent contains final state	  
	hom(parent, state);
		
	return (final);
}

test ParentOf(elem : Node) : (State)
{
  parent:State -:Contains-> elem;
  
  return (parent);
}

rule MoveSubstateToParent()
{
  state:State -p:Parent-> parent:State;
  
  modify
  {
    delete(p);
    parent -:Substate-> state;
  }
}

// find qualified target state.substate or state.pseudo syntax
test FindQualified(var state : string, var tar : string) : (StateMachineNode)
{
  st:State -:Contains-> t:NamedNode;  
  hom(st, t);  
  
  if { nameof(st) == state && t.name == tar;}
   
  return (t);  
}

// find qualified target state.substate or state.pseudo syntax
test FindQualifiedPath(ref tar : array<string>) : (StateMachineNode)
{
  st:State;    
  def n:StateMachineNode;  
  
  if { st.name == tar[0]; }  
  yield { yield n = st; }
  :QualifiedRec(st, tar, 1, yield n);  
  return (n);
}

pattern QualifiedRec(state : NamedNode, ref tar : array<string>, var idx : int, def ret : StateMachineNode)
{
	alternative
	{
		next
	    {
			negative
			{
				if {idx == tar.size();}
			}
		
			state -:Contains-> t:NamedNode;
			
			if { t.name == tar[idx];}
			yield
			{
				yield ret = t;
			}	
		    :QualifiedRec(t, tar, idx + 1, yield ret);
	    }
	    end
	    {
			if {idx == tar.size();}         
	    }	   
	}
}

// find qualified target state.substate or state.pseudo syntax
test FindQualifiedType(state : State, tar : StateMachineNode) : (StateMachineNode)
{
  state -:Contains-> t:typeof(tar);
  hom(state, t);  
  return (t);  
}

// find qualified target state.substate or state.pseudo syntax
test FindHistory(state : State, hist : History) : (History)
{
  def ret : History;
  
  :HistoryFindRec(state, hist, yield ret);
  return(ret);    
}

pattern HistoryFindRec(state : State, hist : History, def ret : History)
{
	alternative
	{
	  found
	  {
	    state -:Contains-> h:History; // search for history in state
		
		if {typeof(h) >= typeof(hist);} // if type is above or equal to external type
		
		yield
		{
			yield ret = h; // yield to output
		}					
		
	  }
	  not_found
	  {
	    parent:State -:Contains-> state; // get parent of state
		
	    negative
		{
			state -:Contains-> h:History; // it does not contain history
		}
		
		
		:HistoryFindRec(parent, hist, yield ret); // recursive search for history in parent
	  }
	}
}
// find qualified target state.substate or state.pseudo syntax
test FindNamed(var name : string) : (NamedNode)
{
  t:NamedNode;  
  
  if { t.name == name; }   
  return (t);
}

//rule InstanceSubMachine()