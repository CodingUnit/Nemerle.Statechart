// this is the version presented in the quick introduction to the user manual

//enum tpseudo {history }

abstract node class StateMachineNode
{
    id   : int;	
}

abstract node class NamedNode extends StateMachineNode
{
    name   : string;	
}

abstract node class StateNode extends StateMachineNode;

node class StateMachine extends NamedNode;

node class State extends NamedNode
{    
	entry_act : string;
	exit_act  : string;
	do_act    : string;
}

node edge unique;
index unique;

node class SubMachineState extends State;
node class ConcurrentState extends State;
node class FinalState 	   extends StateNode;

node class Unresolved extends NamedNode;
node class Unknown    extends StateMachineNode;

abstract node class PseudoState extends StateMachineNode;
abstract node class NamedPseudoState extends PseudoState, NamedNode;

node class InitialState        extends PseudoState;
node class History    		   extends PseudoState;
node class DeepHistory    	   extends History;
node class ShallowHistory 	   extends History;
node class EntryPoint 		   extends NamedPseudoState;
node class ExitPoint           extends NamedPseudoState;
node class Terminate           extends PseudoState;
node class Join                extends NamedPseudoState;
node class Junction            extends NamedPseudoState;
node class Choice              extends NamedPseudoState;
node class Merge               extends NamedPseudoState;
node class Fork                extends PseudoState;

directed edge class Contains;// connect StateBase[?] --> StateBase[*]

directed edge class Transition;

directed edge class StateTransition extends Transition
{
    trigger : string;
	guard   : string;
	action  : string;
	out_str : string;
	
}

directed edge class PseudoTransition extends Transition
{
	guard   : string;
	action  : string;
	out_str : string;
}

directed edge class ExternalTransition extends StateTransition;
directed edge class InternalTransition extends StateTransition;
directed edge class LocalTransition    extends StateTransition;

directed edge class TopState extends Contains;

directed edge class Substate extends Contains;// connect StateBase[?] --> StateBase[*]

directed edge class Parent;

directed edge class Region extends Substate;

directed edge class SubMachineInstance extends Contains;



