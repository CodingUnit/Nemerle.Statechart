// this is the version presented in the quick introduction to the user manual

//enum tpseudo {history }

abstract node class StateMachineNode
{
    id   : int;	
	depth : int;
}

abstract node class NamedNode extends StateMachineNode
{
    name   : string;	
}

abstract node class StateNode extends NamedNode;

node class StateMachine extends StateNode;

node class State extends StateNode
{
	idx 	      : int; // index in parent state in code
	entry_act     : array<string>;
	exit_act      : array<string>;
	do_act        : array<string>;
	defer		  : array<string>;
	
	sub_states    : set<State>; // sub states
	possible_conf : set<ActiveState>; // configs of that state name
	possible_conf_str : set<string>;
	initial_conf  : set<ActiveState>; // initial config of state
	initial_conf_str : set<string>;
	//simple_states  : set<string>;
}

node edge unique;
index unique;

index id2st { State.id }

node class SubMachineState extends State
{
	typename : string;
}

node class ConcurrentState extends State
{
	regions : int;
}

node class SubRegion extends State
{	
}

node class FinalState 	   extends StateNode;

abstract node class PseudoState extends StateMachineNode;
abstract node class NamedPseudoState extends PseudoState, NamedNode;

node class InitialState        extends PseudoState;
node class History    		   extends PseudoState;
node class DeepHistory    	   extends History;
node class ShallowHistory 	   extends History;
node class EntryPoint 		   extends NamedPseudoState;
node class ExitPoint           extends NamedPseudoState;
node class Terminate           extends PseudoState;
node class Join                extends NamedPseudoState;
node class Junction            extends NamedPseudoState;
node class Choice              extends NamedPseudoState;
node class Merge               extends NamedPseudoState;
node class Fork                extends PseudoState;

abstract node class Target extends StateMachineNode;
node class SelfTarget        extends Target;
node class NoTarget          extends Target;

//=====================

directed edge class Transition
{
	lca : set<State>; // least common ancestor
	id  : int; 		  // identifier of transition
}

directed edge class StateTransition extends Transition
{
    trigger : string;
	guard   : string;
	action  : string;
	out_str : string;
	
}

directed edge class PseudoTransition extends Transition
{
	guard   : string;
	action  : string;
	out_str : string;
}

directed edge class ExternalTransition extends StateTransition;
directed edge class InternalTransition extends StateTransition;
directed edge class LocalTransition    extends StateTransition;



//=======================
directed edge class Contains;// connect StateBase[?] --> StateBase[*]

directed edge class TopState extends Contains;

directed edge class Substate extends Contains;// connect StateBase[?] --> StateBase[*]

directed edge class Parent;

directed edge class Region extends Substate;

directed edge class SubMachineInstance;

directed edge class SimpleState extends Substate;

