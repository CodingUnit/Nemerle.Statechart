// this is the version presented in the quick introduction to the user manual

//enum tpseudo {history }

abstract node class StateMachineNode
{
    id   : int;	
	depth : int;
}

abstract node class NamedNode extends StateMachineNode
{
    name   : string;	
}

abstract node class StateNode extends NamedNode;

node class StateMachine extends StateNode;

node class ActiveState extends StateNode
{	
	entry_act : string;
	exit_act  : string;
	do_act    : string;	
	contains  : set<State>;
	contains_str : set<string>;
	sub_region_contains : set<string>;
}

node class ActiveSimpleState extends ActiveState;
node class ActiveRegionState extends ActiveState
{
	regions : int;
}

node class ActiveSubRegionState extends ActiveState
{
	idx : int;
}

node class State extends StateNode
{
	idx 	  : int; // index in parent state in code
	entry_act : string;
	exit_act  : string;
	do_act    : string;
	possible_conf : array<ActiveState>; // configs of that state name
	possible_conf_str : array<string>;
	initial_conf  : array<ActiveState>; // initial config of state
	initial_conf_str : array<string>;
	//simple_states  : set<string>;
}

node edge unique;
index unique;

node class Oper;

node class AndConf extends Oper;

node class OrConf extends Oper;

node class Eval;
node class SubMachineState extends State
{
  typename : string;
}

node class ConcurrentState extends State
{
	regions : int;
}

node class SubRegion extends State
{	
}

node class FinalState 	   extends StateNode;

abstract node class NotResolved extends StateMachineNode;

node class UnresolvedNamed extends NotResolved
{
	name : string;
}

node class Unresolved extends UnresolvedNamed;

node class UnresolvedType extends NotResolved;
node class UnresolvedTypeNamed extends UnresolvedNamed;



//node class UnresolvedState extends Unresolved;
node class UnresolvedFinalState extends UnresolvedType;

node class UnresolvedTerminate extends UnresolvedType;

// // unresolved but need hierarchy search
node class UnresolvedExitPoint extends UnresolvedTypeNamed;

node class UnresolvedEntryPoint extends UnresolvedTypeNamed;

node class UnresolvedSubMachine extends UnresolvedTypeNamed
{
  typename : string;
}

node class UnresolvedHistory extends UnresolvedTypeNamed;
node class UnresolvedDeepHistory extends UnresolvedTypeNamed;
node class UnresolvedShallowHistory extends UnresolvedTypeNamed;

node class Unknown    extends StateMachineNode;

abstract node class PseudoState extends StateMachineNode;
abstract node class NamedPseudoState extends PseudoState, NamedNode;

node class InitialState        extends PseudoState;
node class History    		   extends PseudoState;
node class DeepHistory    	   extends History;
node class ShallowHistory 	   extends History;
node class EntryPoint 		   extends NamedPseudoState;
node class ExitPoint           extends NamedPseudoState;
node class Terminate           extends PseudoState;
node class Join                extends NamedPseudoState;
node class Junction            extends NamedPseudoState;
node class Choice              extends NamedPseudoState;
node class Merge               extends NamedPseudoState;
node class Fork                extends PseudoState;

abstract node class Target extends StateMachineNode;
node class SelfTarget        extends Target;
node class NoTarget          extends Target;

directed edge class Contains;// connect StateBase[?] --> StateBase[*]

directed edge class Transition;

directed edge class StateTransition extends Transition
{
    trigger : string;
	guard   : string;
	action  : string;
	out_str : string;
	
}

directed edge class PseudoTransition extends Transition
{
	guard   : string;
	action  : string;
	out_str : string;
}

directed edge class ExternalTransition extends StateTransition;
directed edge class InternalTransition extends StateTransition;
directed edge class LocalTransition    extends StateTransition;

directed edge class TopState extends Contains;

directed edge class Substate extends Contains;// connect StateBase[?] --> StateBase[*]

directed edge class Parent;

directed edge class Region extends Substate;

directed edge class SubMachineInstance;

directed edge class Config;
directed edge class And;// extends Contains;

directed edge class SimpleState;