# begin of graph "lgspGraph_0" saved by GrsExport

new graph "StateMachine" "lgspGraph_0"
new :StateMachine($ = "", id = 29, depth = 0, name = "")
new :State($ = "Run", id = 18, depth = 0, name = "Run", idx = 1, entry_act = array<string>["set_am_pm()"], exit_act = array<string>[], do_act = array<string>["update_time()"], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "DisplayCurrentTime", id = 14, depth = 0, name = "DisplayCurrentTime", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["disp_cur_time_blink()"], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "CheckMode", id = 17, depth = 0, name = "CheckMode", idx = 1, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "DisplayAlarmTime", id = 15, depth = 0, name = "DisplayAlarmTime", idx = 0, entry_act = array<string>["disp_alarm_time()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Beep", id = 16, depth = 0, name = "Beep", idx = 1, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["Beep()"], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "AlarmSet", id = 24, depth = 0, name = "AlarmSet", idx = 2, entry_act = array<string>["al_icon_on()","setup_time = alarm"], exit_act = array<string>["al_icon_off()"], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "SetupTime", id = 23, depth = 0, name = "SetupTime", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "SetNormal", id = 19, depth = 0, name = "SetNormal", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["disp_cur_set_time()"], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "SetFast", id = 22, depth = 0, name = "SetFast", idx = 1, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "SetFastHour", id = 20, depth = 0, name = "SetFastHour", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["set_hour_fast()"], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "SetFastMin", id = 21, depth = 0, name = "SetFastMin", idx = 2, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["set_min_fast()"], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "TimeSet", id = 27, depth = 0, name = "TimeSet", idx = 0, entry_act = array<string>["setup_time = Now"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "DisplayCurrentTime1", id = 26, depth = 0, name = "DisplayCurrentTime", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "1", id = 28, depth = 0, name = "", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "PMIconOff", id = 0, depth = 0, name = "PMIconOff", idx = 0, entry_act = array<string>["set_am()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "PMIconOn", id = 1, depth = 0, name = "PMIconOn", idx = 1, entry_act = array<string>["set_pm()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "AlarmOff", id = 3, depth = 0, name = "AlarmOff", idx = 0, entry_act = array<string>["alarm_icon_off()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "AlarmOn", id = 6, depth = 0, name = "AlarmOn", idx = 1, entry_act = array<string>["alarm_icon_on()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Idle", id = 4, depth = 0, name = "Idle", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Ringing", id = 5, depth = 0, name = "Ringing", idx = 1, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["Beep()"], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "BacklightOff", id = 8, depth = 0, name = "BacklightOff", idx = 0, entry_act = array<string>["light_off()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "BacklightOn", id = 9, depth = 0, name = "BacklightOn", idx = 1, entry_act = array<string>["light_on()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "NotPowered", id = 12, depth = 0, name = "NotPowered", idx = 1, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Operations", id = 13, depth = 0, name = "Operations", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :SubMachineState($ = "SetupTime1", id = 25, depth = 0, name = "SetupTime", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{}, typename = "SetupTime")
new :ConcurrentState($ = "Powered", id = 11, depth = 0, name = "Powered", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{}, regions = 0)
new :SubRegion($ = "$6F", id = 0, depth = 0, name = "Powered_SubRegion3", idx = 3, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :SubRegion($ = "2", id = 2, depth = 0, name = "Powered_SubRegion0", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :SubRegion($ = "3", id = 7, depth = 0, name = "Powered_SubRegion1", idx = 1, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :SubRegion($ = "4", id = 10, depth = 0, name = "Powered_SubRegion2", idx = 2, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :SelfTarget($ = "$2A", id = 0, depth = 0)
# total number of nodes: 32

new @("") - :TopState($ = "$21") -> @("1")
new @("Run") - :Substate($ = "$F") -> @("DisplayCurrentTime")
new @("Run") - :ExternalTransition($ = "$5F", id = 0, trigger = "alarm_set", guard = "", action = "", out_str = "alarm_set") -> @("AlarmSet")
new @("Run") - :ExternalTransition($ = "$60", id = 0, trigger = "time_set", guard = "", action = "", out_str = "time_set") -> @("TimeSet")
new @("Run") - :Substate($ = "$12") -> @("CheckMode")
new @("DisplayCurrentTime") - :ExternalTransition($ = "$62", id = 0, trigger = "push_min", guard = "[in_state(AlarmOn)]", action = "", out_str = "push_min [in_state(AlarmOn)]") -> @("Beep")
new @("DisplayCurrentTime") - :ExternalTransition($ = "$61", id = 0, trigger = "push_hour", guard = "", action = "", out_str = "push_hour") -> @("DisplayAlarmTime")
new @("CheckMode") - :Substate($ = "$10") -> @("DisplayAlarmTime")
new @("CheckMode") - :ExternalTransition($ = "$63", id = 0, trigger = "after(00:00:05)", guard = "", action = "", out_str = "after(00:00:05)") -> @("DisplayCurrentTime1")
new @("CheckMode") - :Substate($ = "$11") -> @("Beep")
new @("AlarmSet") - :ExternalTransition($ = "$64", id = 0, trigger = "run", guard = "", action = "alarm = setup_time", out_str = "run / alarm = setup_time") -> @("Run")
new @("AlarmSet") - :Substate($ = "$1A") -> @("SetupTime")
new @("SetupTime") - :Substate($ = "$15") -> @("SetNormal")
new @("SetupTime") - :Substate($ = "$19") -> @("SetFast")
new @("SetNormal") - :InternalTransition($ = "$47", id = 0, trigger = "push_hour", guard = "", action = "UpdateHours()", out_str = "push_hour / UpdateHours()") -> @("SetNormal")
new @("SetNormal") - :ExternalTransition($ = "$65", id = 0, trigger = "hold_min", guard = "", action = "", out_str = "hold_min") -> @("SetFastMin")
new @("SetNormal") - :ExternalTransition($ = "$66", id = 0, trigger = "hold_hour", guard = "", action = "", out_str = "hold_hour") -> @("SetFastHour")
new @("SetNormal") - :InternalTransition($ = "$48", id = 0, trigger = "push_min", guard = "", action = "UpdateMins()", out_str = "push_min / UpdateMins()") -> @("SetNormal")
new @("SetFast") - :Substate($ = "$16") -> @("SetFastHour")
new @("SetFast") - :ExternalTransition($ = "$67", id = 0, trigger = "release_min", guard = "", action = "", out_str = "release_min") -> @("SetNormal")
new @("SetFast") - :Substate($ = "$74") -> @("SetFastMin")
new @("SetFast") - :Substate($ = "$18") -> @("SetFastMin")
new @("TimeSet") - :ExternalTransition($ = "$68", id = 0, trigger = "run", guard = "", action = "set_cur_time()", out_str = "run / set_cur_time()") -> @("Run")
new @("TimeSet") - :Substate($ = "$1E") -> @("DisplayCurrentTime1")
new @("DisplayCurrentTime1") - :Substate($ = "$1D") -> @("SetupTime1")
new @("1") - :Substate($ = "$B") -> @("Powered")
new @("1") - :Substate($ = "$C") -> @("NotPowered")
new @("PMIconOff") - :ExternalTransition($ = "$55", id = 0, trigger = "after_12_hours", guard = "", action = "", out_str = "after_12_hours") -> @("PMIconOn")
new @("PMIconOn") - :ExternalTransition($ = "$56", id = 0, trigger = "pass_12_hours", guard = "", action = "", out_str = "pass_12_hours") -> @("PMIconOff")
new @("AlarmOff") - :ExternalTransition($ = "$57", id = 0, trigger = "alarm_on", guard = "", action = "", out_str = "alarm_on") -> @("AlarmOn")
new @("AlarmOn") - :Contains($ = "$2B") -> @("$2A")
new @("AlarmOn") - :Substate($ = "$4") -> @("Idle")
new @("AlarmOn") - :ExternalTransition($ = "$58", id = 0, trigger = "alarm_off", guard = "", action = "", out_str = "alarm_off") -> @("AlarmOff")
new @("AlarmOn") - :Substate($ = "$5") -> @("Ringing")
new @("Idle") - :ExternalTransition($ = "$59", id = 0, trigger = "current_time_is_alarm", guard = "[else]", action = "", out_str = "current_time_is_alarm [else]") -> @("Ringing")
new @("Idle") - :ExternalTransition($ = "$2C", id = 0, trigger = "current_time_is_alarm", guard = "[in_state(BacklightOn)]", action = "", out_str = "current_time_is_alarm [in_state(BacklightOn)]") -> @("$2A")
new @("Ringing") - :ExternalTransition($ = "$5B", id = 0, trigger = "after(00:01:00)", guard = "", action = "", out_str = "after(00:01:00)") -> @("Idle")
new @("Ringing") - :ExternalTransition($ = "$5A", id = 0, trigger = "drowse_light", guard = "", action = "defer_alarm()", out_str = "drowse_light / defer_alarm()") -> @("Idle")
new @("BacklightOff") - :ExternalTransition($ = "$5C", id = 0, trigger = "drowse_light", guard = "", action = "", out_str = "drowse_light") -> @("BacklightOn")
new @("BacklightOn") - :ExternalTransition($ = "$5D", id = 0, trigger = "drowse_light_release", guard = "", action = "", out_str = "drowse_light_release") -> @("BacklightOff")
new @("NotPowered") - :ExternalTransition($ = "$5E", id = 0, trigger = "battery", guard = "", action = "", out_str = "battery") -> @("Powered")
new @("Operations") - :Substate($ = "$72") -> @("Run")
new @("Operations") - :Substate($ = "$73") -> @("AlarmSet")
new @("Operations") - :Substate($ = "$6E") -> @("TimeSet")
new @("Powered") - :Region($ = "$A") -> @("4")
new @("Powered") - :Region($ = "$2") -> @("2")
new @("Powered") - :Region($ = "$70") -> @("$6F")
new @("Powered") - :Region($ = "$7") -> @("3")
new @("$6F") - :Substate($ = "$71") -> @("Operations")
new @("2") - :Region($ = "$0") -> @("PMIconOff")
new @("2") - :ExternalTransition($ = "$54", id = 0, trigger = "no_battery", guard = "", action = "", out_str = "no_battery") -> @("NotPowered")
new @("2") - :Region($ = "$1") -> @("PMIconOn")
new @("3") - :Region($ = "$3") -> @("AlarmOff")
new @("3") - :Region($ = "$6") -> @("AlarmOn")
new @("4") - :Region($ = "$8") -> @("BacklightOff")
new @("4") - :Region($ = "$9") -> @("BacklightOn")
# total number of edges: 56

@("Run").sub_states = set<State>{}
@("Run").possible_conf = set<ActiveState>{}
@("Run").initial_conf = set<ActiveState>{}
@("$5F").lca = set<State>{}
@("$60").lca = set<State>{}
@("DisplayCurrentTime").sub_states = set<State>{}
@("DisplayCurrentTime").possible_conf = set<ActiveState>{}
@("DisplayCurrentTime").initial_conf = set<ActiveState>{}
@("$62").lca = set<State>{}
@("$61").lca = set<State>{}
@("CheckMode").sub_states = set<State>{}
@("CheckMode").possible_conf = set<ActiveState>{}
@("CheckMode").initial_conf = set<ActiveState>{}
@("$63").lca = set<State>{}
@("DisplayAlarmTime").sub_states = set<State>{}
@("DisplayAlarmTime").possible_conf = set<ActiveState>{}
@("DisplayAlarmTime").initial_conf = set<ActiveState>{}
@("Beep").sub_states = set<State>{}
@("Beep").possible_conf = set<ActiveState>{}
@("Beep").initial_conf = set<ActiveState>{}
@("AlarmSet").sub_states = set<State>{}
@("AlarmSet").possible_conf = set<ActiveState>{}
@("AlarmSet").initial_conf = set<ActiveState>{}
@("$64").lca = set<State>{}
@("SetupTime").sub_states = set<State>{}
@("SetupTime").possible_conf = set<ActiveState>{}
@("SetupTime").initial_conf = set<ActiveState>{}
@("SetNormal").sub_states = set<State>{}
@("SetNormal").possible_conf = set<ActiveState>{}
@("SetNormal").initial_conf = set<ActiveState>{}
@("$47").lca = set<State>{}
@("$65").lca = set<State>{}
@("$66").lca = set<State>{}
@("$48").lca = set<State>{}
@("SetFast").sub_states = set<State>{}
@("SetFast").possible_conf = set<ActiveState>{}
@("SetFast").initial_conf = set<ActiveState>{}
@("$67").lca = set<State>{}
@("SetFastHour").sub_states = set<State>{}
@("SetFastHour").possible_conf = set<ActiveState>{}
@("SetFastHour").initial_conf = set<ActiveState>{}
@("SetFastMin").sub_states = set<State>{}
@("SetFastMin").possible_conf = set<ActiveState>{}
@("SetFastMin").initial_conf = set<ActiveState>{}
@("TimeSet").sub_states = set<State>{}
@("TimeSet").possible_conf = set<ActiveState>{}
@("TimeSet").initial_conf = set<ActiveState>{}
@("$68").lca = set<State>{}
@("DisplayCurrentTime1").sub_states = set<State>{}
@("DisplayCurrentTime1").possible_conf = set<ActiveState>{}
@("DisplayCurrentTime1").initial_conf = set<ActiveState>{}
@("1").sub_states = set<State>{}
@("1").possible_conf = set<ActiveState>{}
@("1").initial_conf = set<ActiveState>{}
@("PMIconOff").sub_states = set<State>{}
@("PMIconOff").possible_conf = set<ActiveState>{}
@("PMIconOff").initial_conf = set<ActiveState>{}
@("$55").lca = set<State>{}
@("PMIconOn").sub_states = set<State>{}
@("PMIconOn").possible_conf = set<ActiveState>{}
@("PMIconOn").initial_conf = set<ActiveState>{}
@("$56").lca = set<State>{}
@("AlarmOff").sub_states = set<State>{}
@("AlarmOff").possible_conf = set<ActiveState>{}
@("AlarmOff").initial_conf = set<ActiveState>{}
@("$57").lca = set<State>{}
@("AlarmOn").sub_states = set<State>{}
@("AlarmOn").possible_conf = set<ActiveState>{}
@("AlarmOn").initial_conf = set<ActiveState>{}
@("$58").lca = set<State>{}
@("Idle").sub_states = set<State>{}
@("Idle").possible_conf = set<ActiveState>{}
@("Idle").initial_conf = set<ActiveState>{}
@("$59").lca = set<State>{}
@("$2C").lca = set<State>{}
@("Ringing").sub_states = set<State>{}
@("Ringing").possible_conf = set<ActiveState>{}
@("Ringing").initial_conf = set<ActiveState>{}
@("$5B").lca = set<State>{}
@("$5A").lca = set<State>{}
@("BacklightOff").sub_states = set<State>{}
@("BacklightOff").possible_conf = set<ActiveState>{}
@("BacklightOff").initial_conf = set<ActiveState>{}
@("$5C").lca = set<State>{}
@("BacklightOn").sub_states = set<State>{}
@("BacklightOn").possible_conf = set<ActiveState>{}
@("BacklightOn").initial_conf = set<ActiveState>{}
@("$5D").lca = set<State>{}
@("NotPowered").sub_states = set<State>{}
@("NotPowered").possible_conf = set<ActiveState>{}
@("NotPowered").initial_conf = set<ActiveState>{}
@("$5E").lca = set<State>{}
@("Operations").sub_states = set<State>{}
@("Operations").possible_conf = set<ActiveState>{}
@("Operations").initial_conf = set<ActiveState>{}
@("SetupTime1").sub_states = set<State>{}
@("SetupTime1").possible_conf = set<ActiveState>{}
@("SetupTime1").initial_conf = set<ActiveState>{}
@("Powered").sub_states = set<State>{}
@("Powered").possible_conf = set<ActiveState>{}
@("Powered").initial_conf = set<ActiveState>{}
@("$6F").sub_states = set<State>{}
@("$6F").possible_conf = set<ActiveState>{}
@("$6F").initial_conf = set<ActiveState>{}
@("2").sub_states = set<State>{}
@("2").possible_conf = set<ActiveState>{}
@("2").initial_conf = set<ActiveState>{}
@("$54").lca = set<State>{}
@("3").sub_states = set<State>{}
@("3").possible_conf = set<ActiveState>{}
@("3").initial_conf = set<ActiveState>{}
@("4").sub_states = set<State>{}
@("4").possible_conf = set<ActiveState>{}
@("4").initial_conf = set<ActiveState>{}
# end of graph "lgspGraph_0" saved by GrsExport

