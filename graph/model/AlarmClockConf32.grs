# begin of graph "lgspGraph_8" saved by GrsExport

new graph "StateMachine" "lgspGraph_8"
new :StateMachine($ = "PathCoverFsm", id = 8, depth = 0, name = "PathCoverFsm")
new :State($ = "B", id = 3, depth = 2, name = "B", idx = 1, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "C", id = 4, depth = 3, name = "C", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "E", id = 5, depth = 3, name = "E", idx = 1, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "D", id = 6, depth = 2, name = "D", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "", id = 7, depth = 0, name = "", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "A", id = 1, depth = 1, name = "A", idx = 0, entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :InitialState($ = "$40", id = 0, depth = 0)
new :InitialState($ = "$3D", id = 0, depth = 0)
new :InitialState($ = "$3A", id = 0, depth = 0)
new :DeepHistory($ = "$4", id = 2, depth = 3)
new :DeepHistory($ = "$0", id = 9, depth = 2)
new :ActiveState($ = "$52", id = 7, depth = 0, name = "", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveState($ = "$51", id = 1, depth = 1, name = "A", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveState($ = "$50", id = 3, depth = 2, name = "B", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveState($ = "$4B", id = 7, depth = 0, name = "", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveState($ = "$4A", id = 1, depth = 1, name = "A", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveState($ = "$49", id = 3, depth = 2, name = "B", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveState($ = "$45", id = 7, depth = 0, name = "", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveState($ = "$44", id = 1, depth = 1, name = "A", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveSimpleState($ = "$4F", id = 4, depth = 3, name = "C", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveSimpleState($ = "$48", id = 5, depth = 3, name = "E", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
new :ActiveSimpleState($ = "$43", id = 6, depth = 2, name = "D", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], contains_id = set<int>{}, contains_str = set<string>{}, sub_region_contains = set<string>{})
# total number of nodes: 23

new @("PathCoverFsm") - :TopState($ = "$D") -> @("")
new @("B") - :ExternalTransition($ = "$28", id = 59, trigger = "c", guard = "", action = "", out_str = "c") -> @("E")
new @("B") - :ExternalTransition($ = "$29", id = 15, trigger = "k", guard = "", action = "", out_str = "k") -> @("A")
new @("B") - :ExternalTransition($ = "$2A", id = 16, trigger = "d", guard = "", action = "", out_str = "d") -> @("D")
new @("B") - :SimpleState($ = "$35") -> @("C")
new @("B") - :SimpleState($ = "$36") -> @("E")
new @("B") - :ExternalTransition($ = "$38", id = 22, trigger = "f", guard = "", action = "", out_str = "f") -> @("B")
new @("B") - :Contains($ = "$41") -> @("$40")
new @("B") - :Contains($ = "$5") -> @("$4")
new @("C") - :ExternalTransition($ = "$2B", id = 17, trigger = "b", guard = "", action = "", out_str = "b") -> @("E")
new @("C") - :ExternalTransition($ = "$39", id = 10, trigger = "m", guard = "", action = "", out_str = "m") -> @("C")
new @("C") - :InternalTransition($ = "$1A", id = 31, trigger = "a", guard = "", action = "()", out_str = "a / ()") -> @("C")
new @("E") - :ExternalTransition($ = "$2D", id = 12, trigger = "i", guard = "", action = "", out_str = "i") -> @("D")
new @("E") - :ExternalTransition($ = "$2C", id = 14, trigger = "j", guard = "", action = "", out_str = "j") -> @("A")
new @("D") - :ExternalTransition($ = "$37", id = 23, trigger = "n", guard = "", action = "", out_str = "n") -> @("$4")
new @("D") - :ExternalTransition($ = "$2E", id = 13, trigger = "e", guard = "", action = "", out_str = "e") -> @("B")
new @("") - :Contains($ = "$3B") -> @("$3A")
new @("") - :Substate($ = "$2") -> @("A")
new @("A") - :Contains($ = "$1") -> @("$0")
new @("A") - :SimpleState($ = "$33") -> @("D")
new @("A") - :Substate($ = "$34") -> @("B")
new @("A") - :Contains($ = "$3E") -> @("$3D")
new @("A") - :ExternalTransition($ = "$10", id = 20, trigger = "g", guard = "", action = "", out_str = "g") -> @("$0")
new @("$40") - :PseudoTransition($ = "$42", id = 0) -> @("C")
new @("$3D") - :PseudoTransition($ = "$3F", id = 0) -> @("D")
new @("$3A") - :PseudoTransition($ = "$3C", id = 0) -> @("A")
new @("$52") - :And($ = "$53") -> @("$51")
new @("$51") - :And($ = "$54") -> @("$50")
new @("$50") - :And($ = "$55") -> @("$4F")
new @("$4B") - :And($ = "$4C") -> @("$4A")
new @("$4A") - :And($ = "$4D") -> @("$49")
new @("$49") - :And($ = "$4E") -> @("$48")
new @("$45") - :And($ = "$46") -> @("$44")
new @("$44") - :And($ = "$47") -> @("$43")
# total number of edges: 34

@("B").sub_states = set<State>{@("C"),@("E")}
@("B").possible_conf = set<ActiveState>{}
@("B").initial_conf = set<ActiveState>{}
@("$28").lca = set<State>{}
@("$29").lca = set<State>{}
@("$2A").lca = set<State>{}
@("$38").lca = set<State>{}
@("C").sub_states = set<State>{}
@("C").possible_conf = set<ActiveState>{}
@("C").initial_conf = set<ActiveState>{}
@("$2B").lca = set<State>{}
@("$39").lca = set<State>{}
@("$1A").lca = set<State>{}
@("E").sub_states = set<State>{}
@("E").possible_conf = set<ActiveState>{}
@("E").initial_conf = set<ActiveState>{}
@("$2D").lca = set<State>{}
@("$2C").lca = set<State>{}
@("D").sub_states = set<State>{}
@("D").possible_conf = set<ActiveState>{}
@("D").initial_conf = set<ActiveState>{}
@("$37").lca = set<State>{}
@("$2E").lca = set<State>{}
@("").sub_states = set<State>{@("A"),@("D"),@("B"),@("C"),@("E")}
@("").possible_conf = set<ActiveState>{}
@("").initial_conf = set<ActiveState>{}
@("A").sub_states = set<State>{@("D"),@("B"),@("C"),@("E")}
@("A").possible_conf = set<ActiveState>{}
@("A").initial_conf = set<ActiveState>{}
@("$10").lca = set<State>{}
@("$42").lca = set<State>{}
@("$3F").lca = set<State>{}
@("$3C").lca = set<State>{}
@("$52").contains = set<State>{}
@("$52").contains_conf = set<ActiveState>{}
@("$52").sub_conf = set<ActiveState>{}
@("$51").contains = set<State>{}
@("$51").contains_conf = set<ActiveState>{}
@("$51").sub_conf = set<ActiveState>{}
@("$50").contains = set<State>{}
@("$50").contains_conf = set<ActiveState>{}
@("$50").sub_conf = set<ActiveState>{}
@("$4B").contains = set<State>{}
@("$4B").contains_conf = set<ActiveState>{}
@("$4B").sub_conf = set<ActiveState>{}
@("$4A").contains = set<State>{}
@("$4A").contains_conf = set<ActiveState>{}
@("$4A").sub_conf = set<ActiveState>{}
@("$49").contains = set<State>{}
@("$49").contains_conf = set<ActiveState>{}
@("$49").sub_conf = set<ActiveState>{}
@("$45").contains = set<State>{}
@("$45").contains_conf = set<ActiveState>{}
@("$45").sub_conf = set<ActiveState>{}
@("$44").contains = set<State>{}
@("$44").contains_conf = set<ActiveState>{}
@("$44").sub_conf = set<ActiveState>{}
@("$4F").contains = set<State>{}
@("$4F").contains_conf = set<ActiveState>{}
@("$4F").sub_conf = set<ActiveState>{}
@("$48").contains = set<State>{}
@("$48").contains_conf = set<ActiveState>{}
@("$48").sub_conf = set<ActiveState>{}
@("$43").contains = set<State>{}
@("$43").contains_conf = set<ActiveState>{}
@("$43").sub_conf = set<ActiveState>{}
# end of graph "lgspGraph_8" saved by GrsExport

