# begin of graph "lgspGraph_4" saved by GrsExport

new graph "StateMachine" "lgspGraph_4"
new :StateMachine($ = "CodePad", id = 10, depth = 0, name = "CodePad", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "Unlocked", id = 8, depth = 0, name = "Unlocked", entry_act = array<string>["unlock_door()","clear()"], exit_act = array<string>[], do_act = array<string>["beep_enter()"], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "Talking", id = 4, depth = 0, name = "Talking", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "Call", id = 3, depth = 0, name = "Call", entry_act = array<string>["green_signal()"], exit_act = array<string>["red_signal()"], do_act = array<string>["room_call()"], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "InhabitantInteraction", id = 5, depth = 0, name = "InhabitantInteraction", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 2, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "EnteringPassword", id = 2, depth = 0, name = "EnteringPassword", entry_act = array<string>["clear_pass()","view_dash()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "EnteringRoomNumber", id = 1, depth = 0, name = "EnteringRoomNumber", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "Interaction", id = 6, depth = 0, name = "Interaction", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "Idle", id = 0, depth = 0, name = "Idle", entry_act = array<string>["clear()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "Locked", id = 7, depth = 0, name = "Locked", entry_act = array<string>["lock_door()"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :State($ = "", id = 9, depth = 0, name = "", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, initial_conf_str = set<string>{}, possible_conf_str = set<string>{})
new :Choice($ = "UnnamedChoice", id = 11, depth = 0, name = "UnnamedChoice")
new :Unresolved($ = "Unlocked4", id = 0, depth = 0, name = "Unlocked")
new :Unresolved($ = "Locked3", id = 0, depth = 0, name = "Locked")
new :Unresolved($ = "Unlocked3", id = 0, depth = 0, name = "Unlocked")
new :Unresolved($ = "Locked2", id = 0, depth = 0, name = "Locked")
new :Unresolved($ = "Locked1", id = 0, depth = 0, name = "Locked")
new :Unresolved($ = "Idle6", id = 0, depth = 0, name = "Idle")
new :Unresolved($ = "Unlocked2", id = 0, depth = 0, name = "Unlocked")
new :Unresolved($ = "Idle5", id = 0, depth = 0, name = "Idle")
new :Unresolved($ = "Idle4", id = 0, depth = 0, name = "Idle")
new :Unresolved($ = "Idle3", id = 0, depth = 0, name = "Idle")
new :Unresolved($ = "Talking1", id = 0, depth = 0, name = "Talking")
new :Unresolved($ = "Idle2", id = 0, depth = 0, name = "Idle")
new :Unresolved($ = "Unlocked1", id = 0, depth = 0, name = "Unlocked")
new :Unresolved($ = "Idle1", id = 0, depth = 0, name = "Idle")
new :Unresolved($ = "InhabitantInteraction1", id = 0, depth = 0, name = "InhabitantInteraction")
new :Unresolved($ = "EnteringPassword1", id = 0, depth = 0, name = "EnteringPassword")
new :Unresolved($ = "Interaction1", id = 0, depth = 0, name = "Interaction")
# total number of nodes: 29

new @("CodePad") - :TopState($ = "$9") -> @("")
new @("Unlocked") - :ExternalTransition($ = "$27", id = 0, set_flag = 0L, trigger = "after(00:00:05)", guard = "", action = "", out_str = "after(00:00:05)") -> @("Locked1")
new @("Talking") - :ExternalTransition($ = "$21", id = 0, set_flag = 0L, trigger = "after(00:00:15)", guard = "", action = "", out_str = "after(00:00:15)") -> @("Idle5")
new @("Talking") - :ExternalTransition($ = "$1F", id = 0, set_flag = 0L, trigger = "tube", guard = "", action = "", out_str = "tube") -> @("Idle4")
new @("Call") - :ExternalTransition($ = "$1D", id = 0, set_flag = 0L, trigger = "after(00:00:10)", guard = "", action = "", out_str = "after(00:00:10)") -> @("Idle3")
new @("Call") - :ExternalTransition($ = "$1B", id = 0, set_flag = 0L, trigger = "tube", guard = "", action = "", out_str = "tube") -> @("Talking1")
new @("InhabitantInteraction") - :Substate($ = "$4") -> @("Talking")
new @("InhabitantInteraction") - :Contains($ = "$1A") -> @("Talking1")
new @("InhabitantInteraction") - :Contains($ = "$1C") -> @("Idle3")
new @("InhabitantInteraction") - :Contains($ = "$1E") -> @("Idle4")
new @("InhabitantInteraction") - :Contains($ = "$20") -> @("Idle5")
new @("InhabitantInteraction") - :ExternalTransition($ = "$23", id = 0, set_flag = 0L, trigger = "enter_permitted", guard = "", action = "", out_str = "enter_permitted") -> @("Unlocked2")
new @("InhabitantInteraction") - :Substate($ = "$3") -> @("Call")
new @("EnteringPassword") - :ExternalTransition($ = "$18", id = 0, set_flag = 0L, trigger = "num(n)", guard = "[password.Length == pass_length - 1]", action = "enter_pass(n)", out_str = "num(n) [password.Length == pass_length - 1] / enter_pass(n)") -> @("UnnamedChoice")
new @("EnteringPassword") - :InternalTransition($ = "$19", id = 0, set_flag = 0L, trigger = "num(n)", guard = "[else]", action = "enter_pass(n)", out_str = "num(n) [else] / enter_pass(n)") -> @("EnteringPassword")
new @("EnteringPassword") - :ExternalTransition($ = "$12", id = 0, set_flag = 0L, trigger = "cancel", guard = "", action = "beep_fail()", out_str = "cancel / beep_fail()") -> @("Idle1")
new @("EnteringRoomNumber") - :ExternalTransition($ = "$E", id = 0, set_flag = 0L, trigger = "key", guard = "", action = " beep(11) ", out_str = "key /  beep(11) ") -> @("EnteringPassword1")
new @("EnteringRoomNumber") - :ExternalTransition($ = "$10", id = 0, set_flag = 0L, trigger = "after(00:00:03)", guard = "", action = "", out_str = "after(00:00:03)") -> @("InhabitantInteraction1")
new @("EnteringRoomNumber") - :InternalTransition($ = "$C", id = 0, set_flag = 0L, trigger = "num(n)", guard = "", action = "enter_room(n)", out_str = "num(n) / enter_room(n)") -> @("EnteringRoomNumber")
new @("Interaction") - :Substate($ = "$2") -> @("EnteringPassword")
new @("Interaction") - :Substate($ = "$5") -> @("InhabitantInteraction")
new @("Interaction") - :Contains($ = "$D") -> @("EnteringPassword1")
new @("Interaction") - :Contains($ = "$F") -> @("InhabitantInteraction1")
new @("Interaction") - :Contains($ = "$11") -> @("Idle1")
new @("Interaction") - :Contains($ = "$13") -> @("UnnamedChoice")
new @("Interaction") - :Contains($ = "$14") -> @("Unlocked1")
new @("Interaction") - :Contains($ = "$16") -> @("Idle2")
new @("Interaction") - :Contains($ = "$22") -> @("Unlocked2")
new @("Interaction") - :ExternalTransition($ = "$25", id = 0, set_flag = 0L, trigger = "cancel", guard = "", action = " beep(10) ", out_str = "cancel /  beep(10) ") -> @("Idle6")
new @("Interaction") - :Substate($ = "$1") -> @("EnteringRoomNumber")
new @("Idle") - :ExternalTransition($ = "$B", id = 0, set_flag = 0L, trigger = "num(n)", guard = "", action = "enter_room(n)", out_str = "num(n) / enter_room(n)") -> @("Interaction1")
new @("Locked") - :Substate($ = "$6") -> @("Interaction")
new @("Locked") - :Contains($ = "$A") -> @("Interaction1")
new @("Locked") - :Contains($ = "$24") -> @("Idle6")
new @("Locked") - :Substate($ = "$0") -> @("Idle")
new @("") - :Substate($ = "$8") -> @("Unlocked")
new @("") - :Contains($ = "$26") -> @("Locked1")
new @("") - :Contains($ = "$28") -> @("Locked2")
new @("") - :Contains($ = "$29") -> @("Unlocked3")
new @("") - :Contains($ = "$2B") -> @("Locked3")
new @("") - :Contains($ = "$2C") -> @("Unlocked4")
new @("") - :Substate($ = "$7") -> @("Locked")
new @("UnnamedChoice") - :PseudoTransition($ = "$17", id = 0, set_flag = 0L, guard = "[else]", action = "beep_fail()", out_str = " [else] / beep_fail()") -> @("Idle2")
new @("UnnamedChoice") - :PseudoTransition($ = "$15", id = 0, set_flag = 0L, guard = "[pass_ok]", action = "", out_str = " [pass_ok]") -> @("Unlocked1")
new @("Locked3") - :ExternalTransition($ = "$2D", id = 0, set_flag = 0L, trigger = "inside_button", guard = "", action = "", out_str = "inside_button") -> @("Unlocked4")
new @("Locked2") - :ExternalTransition($ = "$2A", id = 0, set_flag = 0L, trigger = "magnetic_key", guard = "[key_ok]", action = "", out_str = "magnetic_key [key_ok]") -> @("Unlocked3")
# total number of edges: 46

@("CodePad").sub_regions = set<SubRegion>{}
@("CodePad").regions = set<ConcurrentState>{}
@("CodePad").sub_states = set<State>{}
@("CodePad").possible_conf = set<ActiveState>{}
@("CodePad").initial_conf = set<ActiveState>{}
@("Unlocked").sub_regions = set<SubRegion>{}
@("Unlocked").regions = set<ConcurrentState>{}
@("Unlocked").sub_states = set<State>{}
@("Unlocked").possible_conf = set<ActiveState>{}
@("Unlocked").initial_conf = set<ActiveState>{}
@("$27").lca = set<State>{}
@("$27").sub_regions = set<SubRegion>{}
@("$27").regions = set<ConcurrentState>{}
@("Talking").sub_regions = set<SubRegion>{}
@("Talking").regions = set<ConcurrentState>{}
@("Talking").sub_states = set<State>{}
@("Talking").possible_conf = set<ActiveState>{}
@("Talking").initial_conf = set<ActiveState>{}
@("$21").lca = set<State>{}
@("$21").sub_regions = set<SubRegion>{}
@("$21").regions = set<ConcurrentState>{}
@("$1F").lca = set<State>{}
@("$1F").sub_regions = set<SubRegion>{}
@("$1F").regions = set<ConcurrentState>{}
@("Call").sub_regions = set<SubRegion>{}
@("Call").regions = set<ConcurrentState>{}
@("Call").sub_states = set<State>{}
@("Call").possible_conf = set<ActiveState>{}
@("Call").initial_conf = set<ActiveState>{}
@("$1D").lca = set<State>{}
@("$1D").sub_regions = set<SubRegion>{}
@("$1D").regions = set<ConcurrentState>{}
@("$1B").lca = set<State>{}
@("$1B").sub_regions = set<SubRegion>{}
@("$1B").regions = set<ConcurrentState>{}
@("InhabitantInteraction").sub_regions = set<SubRegion>{}
@("InhabitantInteraction").regions = set<ConcurrentState>{}
@("InhabitantInteraction").sub_states = set<State>{}
@("InhabitantInteraction").possible_conf = set<ActiveState>{}
@("InhabitantInteraction").initial_conf = set<ActiveState>{}
@("$23").lca = set<State>{}
@("$23").sub_regions = set<SubRegion>{}
@("$23").regions = set<ConcurrentState>{}
@("EnteringPassword").sub_regions = set<SubRegion>{}
@("EnteringPassword").regions = set<ConcurrentState>{}
@("EnteringPassword").sub_states = set<State>{}
@("EnteringPassword").possible_conf = set<ActiveState>{}
@("EnteringPassword").initial_conf = set<ActiveState>{}
@("$18").lca = set<State>{}
@("$18").sub_regions = set<SubRegion>{}
@("$18").regions = set<ConcurrentState>{}
@("$19").lca = set<State>{}
@("$19").sub_regions = set<SubRegion>{}
@("$19").regions = set<ConcurrentState>{}
@("$12").lca = set<State>{}
@("$12").sub_regions = set<SubRegion>{}
@("$12").regions = set<ConcurrentState>{}
@("EnteringRoomNumber").sub_regions = set<SubRegion>{}
@("EnteringRoomNumber").regions = set<ConcurrentState>{}
@("EnteringRoomNumber").sub_states = set<State>{}
@("EnteringRoomNumber").possible_conf = set<ActiveState>{}
@("EnteringRoomNumber").initial_conf = set<ActiveState>{}
@("$E").lca = set<State>{}
@("$E").sub_regions = set<SubRegion>{}
@("$E").regions = set<ConcurrentState>{}
@("$10").lca = set<State>{}
@("$10").sub_regions = set<SubRegion>{}
@("$10").regions = set<ConcurrentState>{}
@("$C").lca = set<State>{}
@("$C").sub_regions = set<SubRegion>{}
@("$C").regions = set<ConcurrentState>{}
@("Interaction").sub_regions = set<SubRegion>{}
@("Interaction").regions = set<ConcurrentState>{}
@("Interaction").sub_states = set<State>{}
@("Interaction").possible_conf = set<ActiveState>{}
@("Interaction").initial_conf = set<ActiveState>{}
@("$25").lca = set<State>{}
@("$25").sub_regions = set<SubRegion>{}
@("$25").regions = set<ConcurrentState>{}
@("Idle").sub_regions = set<SubRegion>{}
@("Idle").regions = set<ConcurrentState>{}
@("Idle").sub_states = set<State>{}
@("Idle").possible_conf = set<ActiveState>{}
@("Idle").initial_conf = set<ActiveState>{}
@("$B").lca = set<State>{}
@("$B").sub_regions = set<SubRegion>{}
@("$B").regions = set<ConcurrentState>{}
@("Locked").sub_regions = set<SubRegion>{}
@("Locked").regions = set<ConcurrentState>{}
@("Locked").sub_states = set<State>{}
@("Locked").possible_conf = set<ActiveState>{}
@("Locked").initial_conf = set<ActiveState>{}
@("").sub_regions = set<SubRegion>{}
@("").regions = set<ConcurrentState>{}
@("").sub_states = set<State>{}
@("").possible_conf = set<ActiveState>{}
@("").initial_conf = set<ActiveState>{}
@("$17").lca = set<State>{}
@("$17").sub_regions = set<SubRegion>{}
@("$17").regions = set<ConcurrentState>{}
@("$15").lca = set<State>{}
@("$15").sub_regions = set<SubRegion>{}
@("$15").regions = set<ConcurrentState>{}
@("$2D").lca = set<State>{}
@("$2D").sub_regions = set<SubRegion>{}
@("$2D").regions = set<ConcurrentState>{}
@("$2A").lca = set<State>{}
@("$2A").sub_regions = set<SubRegion>{}
@("$2A").regions = set<ConcurrentState>{}
# end of graph "lgspGraph_4" saved by GrsExport

