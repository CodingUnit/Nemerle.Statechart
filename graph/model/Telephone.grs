# begin of graph "lgspGraph_10" saved by GrsExport

new graph "StateMachine" "lgspGraph_10"
new :StateMachine($ = "Telephone", id = 14, depth = 0, name = "Telephone")
new :State($ = "Pinned", id = 9, depth = 0, name = "Pinned", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 8, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Talking", id = 8, depth = 0, name = "Talking", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 7, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Ringing", id = 7, depth = 0, name = "Ringing", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["play_ringing_tone()"], defer = array<string>[], set_flag = 0L, idx = 6, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Busy", id = 6, depth = 0, name = "Busy", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["play_busy_tone()"], defer = array<string>[], set_flag = 0L, idx = 5, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Invalid", id = 5, depth = 0, name = "Invalid", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["play_message()"], defer = array<string>[], set_flag = 0L, idx = 4, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Connecting", id = 4, depth = 0, name = "Connecting", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 3, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Dialing", id = 3, depth = 0, name = "Dialing", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 2, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Time-out", id = 2, depth = 0, name = "Time-out", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["play_message()"], defer = array<string>[], set_flag = 0L, idx = 1, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "DialTone", id = 1, depth = 0, name = "DialTone", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>["play_dial_tone()"], defer = array<string>[], set_flag = 0L, idx = 0, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Active", id = 10, depth = 0, name = "Active", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "Idle", id = 0, depth = 0, name = "Idle", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "", id = 13, depth = 0, name = "", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :EntryPoint($ = "activeEntry", id = 12, depth = 0, name = "activeEntry")
new :ExitPoint($ = "aborted", id = 11, depth = 0, name = "aborted")
new :Junction($ = "UnnamedJunction", id = 15, depth = 0, name = "UnnamedJunction")
new :SelfTarget($ = "$15", id = 0, depth = 0)
new :Unresolved($ = "Active2", id = 0, depth = 0, name = "Active")
new :Unresolved($ = "aborted1", id = 0, depth = 0, name = "aborted")
new :Unresolved($ = "Idle1", id = 0, depth = 0, name = "Idle")
new :Unresolved($ = "Talking2", id = 0, depth = 0, name = "Talking")
new :Unresolved($ = "Pinned1", id = 0, depth = 0, name = "Pinned")
new :Unresolved($ = "Talking1", id = 0, depth = 0, name = "Talking")
new :Unresolved($ = "Busy1", id = 0, depth = 0, name = "Busy")
new :Unresolved($ = "Ringing1", id = 0, depth = 0, name = "Ringing")
new :Unresolved($ = "Invalid1", id = 0, depth = 0, name = "Invalid")
new :Unresolved($ = "Connecting1", id = 0, depth = 0, name = "Connecting")
new :Unresolved($ = "Time-out1", id = 0, depth = 0, name = "Time-out")
new :Unresolved($ = "Dialing1", id = 0, depth = 0, name = "Dialing")
new :Unresolved($ = "Active1", id = 0, depth = 0, name = "Active")
new :UnresolvedFinalState($ = "$2B", id = 0, depth = 0)
# total number of nodes: 31

new @("Telephone") - :TopState($ = "$D") -> @("")
new @("Pinned") - :ExternalTransition($ = "$26", id = 0, set_flag = 0L, trigger = "callee_answers", guard = "", action = "", out_str = "callee_answers") -> @("Talking2")
new @("Talking") - :ExternalTransition($ = "$24", id = 0, set_flag = 0L, trigger = "callee_hangs_up", guard = "", action = "", out_str = "callee_hangs_up") -> @("Pinned1")
new @("Ringing") - :ExternalTransition($ = "$22", id = 0, set_flag = 0L, trigger = "calee_answers", guard = "", action = "enable_speech()", out_str = "calee_answers / enable_speech()") -> @("Talking1")
new @("Connecting") - :ExternalTransition($ = "$20", id = 0, set_flag = 0L, trigger = "busy", guard = "", action = "", out_str = "busy") -> @("Busy1")
new @("Connecting") - :ExternalTransition($ = "$1E", id = 0, set_flag = 0L, trigger = "connected", guard = "", action = "", out_str = "connected") -> @("Ringing1")
new @("Dialing") - :ExternalTransition($ = "$1C", id = 0, set_flag = 0L, trigger = "dial_digit", guard = "", action = "", out_str = "dial_digit") -> @("UnnamedJunction")
new @("Dialing") - :ExternalTransition($ = "$13", id = 0, set_flag = 0L, trigger = "after(00:00:15)", guard = "", action = "", out_str = "after(00:00:15)") -> @("Time-out1")
new @("DialTone") - :ExternalTransition($ = "$11", id = 0, set_flag = 0L, trigger = "dial_digit", guard = "", action = "", out_str = "dial_digit") -> @("Dialing1")
new @("Active") - :Substate($ = "$2") -> @("Time-out")
new @("Active") - :Substate($ = "$3") -> @("Dialing")
new @("Active") - :Substate($ = "$4") -> @("Connecting")
new @("Active") - :Substate($ = "$5") -> @("Invalid")
new @("Active") - :Substate($ = "$6") -> @("Busy")
new @("Active") - :Substate($ = "$7") -> @("Ringing")
new @("Active") - :Substate($ = "$8") -> @("Talking")
new @("Active") - :Substate($ = "$9") -> @("Pinned")
new @("Active") - :Contains($ = "$10") -> @("Dialing1")
new @("Active") - :Contains($ = "$12") -> @("Time-out1")
new @("Active") - :Contains($ = "$14") -> @("UnnamedJunction")
new @("Active") - :Contains($ = "$16") -> @("$15")
new @("Active") - :Contains($ = "$18") -> @("Connecting1")
new @("Active") - :Contains($ = "$1A") -> @("Invalid1")
new @("Active") - :Contains($ = "$1D") -> @("Ringing1")
new @("Active") - :Contains($ = "$1F") -> @("Busy1")
new @("Active") - :Contains($ = "$21") -> @("Talking1")
new @("Active") - :Contains($ = "$23") -> @("Pinned1")
new @("Active") - :Contains($ = "$25") -> @("Talking2")
new @("Active") - :ExternalTransition($ = "$28", id = 0, set_flag = 0L, trigger = "caller_hangs_up", guard = "", action = "disconnect()", out_str = "caller_hangs_up / disconnect()") -> @("Idle1")
new @("Active") - :ExternalTransition($ = "$2A", id = 0, set_flag = 0L, trigger = "abort", guard = "", action = "", out_str = "abort") -> @("aborted1")
new @("Active") - :ExternalTransition($ = "$2D", id = 0, set_flag = 0L, trigger = "terminate", guard = "", action = "", out_str = "terminate") -> @("$2B")
new @("Active") - :Substate($ = "$1") -> @("DialTone")
new @("Idle") - :ExternalTransition($ = "$F", id = 0, set_flag = 0L, trigger = "lift_receiver", guard = "", action = "get_dial_tone()", out_str = "lift_receiver / get_dial_tone()") -> @("Active1")
new @("") - :Substate($ = "$A") -> @("Active")
new @("") - :Contains($ = "$B") -> @("aborted")
new @("") - :Contains($ = "$C") -> @("activeEntry")
new @("") - :Contains($ = "$E") -> @("Active1")
new @("") - :Contains($ = "$27") -> @("Idle1")
new @("") - :Contains($ = "$29") -> @("aborted1")
new @("") - :Contains($ = "$2C") -> @("$2B")
new @("") - :Contains($ = "$2E") -> @("Active2")
new @("") - :Substate($ = "$0") -> @("Idle")
new @("activeEntry") - :PseudoTransition($ = "$2F", id = 0, set_flag = 0L, guard = "", action = "", out_str = "") -> @("Active2")
new @("UnnamedJunction") - :PseudoTransition($ = "$19", id = 0, set_flag = 0L, guard = "[valid]", action = "connect()", out_str = " [valid] / connect()") -> @("Connecting1")
new @("UnnamedJunction") - :PseudoTransition($ = "$1B", id = 0, set_flag = 0L, guard = "[else]", action = "", out_str = " [else]") -> @("Invalid1")
new @("UnnamedJunction") - :PseudoTransition($ = "$17", id = 0, set_flag = 0L, guard = "[incomplete]", action = "", out_str = " [incomplete]") -> @("$15")
# total number of edges: 46

@("Pinned").sub_regions = set<SubRegion>{}
@("Pinned").regions = set<ConcurrentState>{}
@("Pinned").sub_states = set<State>{}
@("Pinned").possible_conf = set<ActiveState>{}
@("Pinned").initial_conf = set<ActiveState>{}
@("$26").lca = set<State>{}
@("$26").sub_regions = set<SubRegion>{}
@("$26").regions = set<ConcurrentState>{}
@("Talking").sub_regions = set<SubRegion>{}
@("Talking").regions = set<ConcurrentState>{}
@("Talking").sub_states = set<State>{}
@("Talking").possible_conf = set<ActiveState>{}
@("Talking").initial_conf = set<ActiveState>{}
@("$24").lca = set<State>{}
@("$24").sub_regions = set<SubRegion>{}
@("$24").regions = set<ConcurrentState>{}
@("Ringing").sub_regions = set<SubRegion>{}
@("Ringing").regions = set<ConcurrentState>{}
@("Ringing").sub_states = set<State>{}
@("Ringing").possible_conf = set<ActiveState>{}
@("Ringing").initial_conf = set<ActiveState>{}
@("$22").lca = set<State>{}
@("$22").sub_regions = set<SubRegion>{}
@("$22").regions = set<ConcurrentState>{}
@("Busy").sub_regions = set<SubRegion>{}
@("Busy").regions = set<ConcurrentState>{}
@("Busy").sub_states = set<State>{}
@("Busy").possible_conf = set<ActiveState>{}
@("Busy").initial_conf = set<ActiveState>{}
@("Invalid").sub_regions = set<SubRegion>{}
@("Invalid").regions = set<ConcurrentState>{}
@("Invalid").sub_states = set<State>{}
@("Invalid").possible_conf = set<ActiveState>{}
@("Invalid").initial_conf = set<ActiveState>{}
@("Connecting").sub_regions = set<SubRegion>{}
@("Connecting").regions = set<ConcurrentState>{}
@("Connecting").sub_states = set<State>{}
@("Connecting").possible_conf = set<ActiveState>{}
@("Connecting").initial_conf = set<ActiveState>{}
@("$20").lca = set<State>{}
@("$20").sub_regions = set<SubRegion>{}
@("$20").regions = set<ConcurrentState>{}
@("$1E").lca = set<State>{}
@("$1E").sub_regions = set<SubRegion>{}
@("$1E").regions = set<ConcurrentState>{}
@("Dialing").sub_regions = set<SubRegion>{}
@("Dialing").regions = set<ConcurrentState>{}
@("Dialing").sub_states = set<State>{}
@("Dialing").possible_conf = set<ActiveState>{}
@("Dialing").initial_conf = set<ActiveState>{}
@("$1C").lca = set<State>{}
@("$1C").sub_regions = set<SubRegion>{}
@("$1C").regions = set<ConcurrentState>{}
@("$13").lca = set<State>{}
@("$13").sub_regions = set<SubRegion>{}
@("$13").regions = set<ConcurrentState>{}
@("Time-out").sub_regions = set<SubRegion>{}
@("Time-out").regions = set<ConcurrentState>{}
@("Time-out").sub_states = set<State>{}
@("Time-out").possible_conf = set<ActiveState>{}
@("Time-out").initial_conf = set<ActiveState>{}
@("DialTone").sub_regions = set<SubRegion>{}
@("DialTone").regions = set<ConcurrentState>{}
@("DialTone").sub_states = set<State>{}
@("DialTone").possible_conf = set<ActiveState>{}
@("DialTone").initial_conf = set<ActiveState>{}
@("$11").lca = set<State>{}
@("$11").sub_regions = set<SubRegion>{}
@("$11").regions = set<ConcurrentState>{}
@("Active").sub_regions = set<SubRegion>{}
@("Active").regions = set<ConcurrentState>{}
@("Active").sub_states = set<State>{}
@("Active").possible_conf = set<ActiveState>{}
@("Active").initial_conf = set<ActiveState>{}
@("$28").lca = set<State>{}
@("$28").sub_regions = set<SubRegion>{}
@("$28").regions = set<ConcurrentState>{}
@("$2A").lca = set<State>{}
@("$2A").sub_regions = set<SubRegion>{}
@("$2A").regions = set<ConcurrentState>{}
@("$2D").lca = set<State>{}
@("$2D").sub_regions = set<SubRegion>{}
@("$2D").regions = set<ConcurrentState>{}
@("Idle").sub_regions = set<SubRegion>{}
@("Idle").regions = set<ConcurrentState>{}
@("Idle").sub_states = set<State>{}
@("Idle").possible_conf = set<ActiveState>{}
@("Idle").initial_conf = set<ActiveState>{}
@("$F").lca = set<State>{}
@("$F").sub_regions = set<SubRegion>{}
@("$F").regions = set<ConcurrentState>{}
@("").sub_regions = set<SubRegion>{}
@("").regions = set<ConcurrentState>{}
@("").sub_states = set<State>{}
@("").possible_conf = set<ActiveState>{}
@("").initial_conf = set<ActiveState>{}
@("$2F").lca = set<State>{}
@("$2F").sub_regions = set<SubRegion>{}
@("$2F").regions = set<ConcurrentState>{}
@("$19").lca = set<State>{}
@("$19").sub_regions = set<SubRegion>{}
@("$19").regions = set<ConcurrentState>{}
@("$1B").lca = set<State>{}
@("$1B").sub_regions = set<SubRegion>{}
@("$1B").regions = set<ConcurrentState>{}
@("$17").lca = set<State>{}
@("$17").sub_regions = set<SubRegion>{}
@("$17").regions = set<ConcurrentState>{}
# end of graph "lgspGraph_10" saved by GrsExport

