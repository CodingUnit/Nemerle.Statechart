# begin of graph "lgspGraph_1" saved by GrsExport

new graph "StateMachine" "lgspGraph_1"
new :StateMachine($ = "enter_operand", id = 6, depth = 0, name = "enter_operand")
new :State($ = "frac", id = 2, depth = 0, name = "frac", entry_act = array<string>["insert(',')"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 2, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "int", id = 1, depth = 0, name = "int", entry_act = array<string>[], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 1, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "zero", id = 0, depth = 0, name = "zero", entry_act = array<string>["insert('0')"], exit_act = array<string>[], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :State($ = "", id = 5, depth = 0, name = "", entry_act = array<string>["ent_op = prefix"], exit_act = array<string>["prefix = \"\""], do_act = array<string>[], defer = array<string>[], set_flag = 0L, idx = 0, possible_conf_str = set<string>{}, initial_conf_str = set<string>{})
new :EntryPoint($ = "point", id = 4, depth = 0, name = "point")
new :EntryPoint($ = "digit", id = 3, depth = 0, name = "digit")
new :Junction($ = "UnnamedJunction", id = 7, depth = 0, name = "UnnamedJunction")
new :Unresolved($ = "frac2", id = 0, depth = 0, name = "frac")
new :Unresolved($ = "int2", id = 0, depth = 0, name = "int")
new :Unresolved($ = "zero1", id = 0, depth = 0, name = "zero")
new :Unresolved($ = "frac1", id = 0, depth = 0, name = "frac")
new :Unresolved($ = "int1", id = 0, depth = 0, name = "int")
# total number of nodes: 13

new @("enter_operand") - :Contains($ = "$B") -> @("frac1")
new @("enter_operand") - :TopState($ = "$5") -> @("")
new @("frac") - :InternalTransition($ = "$9", id = 0, set_flag = 0L, trigger = "point", guard = "", action = "()", out_str = "point / ()") -> @("frac")
new @("zero") - :ExternalTransition($ = "$8", id = 0, set_flag = 0L, trigger = "digit(i)", guard = "[else]", action = "insert(i)", out_str = "digit(i) [else] / insert(i)") -> @("int1")
new @("zero") - :InternalTransition($ = "$6", id = 0, set_flag = 0L, trigger = "digit(i)", guard = "[i == '0']", action = "()", out_str = "digit(i) [i == '0'] / ()") -> @("zero")
new @("") - :Substate($ = "$1") -> @("int")
new @("") - :Substate($ = "$2") -> @("frac")
new @("") - :Contains($ = "$3") -> @("digit")
new @("") - :Contains($ = "$4") -> @("point")
new @("") - :Contains($ = "$7") -> @("int1")
new @("") - :InternalTransition($ = "$A", id = 0, set_flag = 0L, trigger = "digit(n)", guard = "", action = "insert(n)", out_str = "digit(n) / insert(n)") -> @("")
new @("") - :LocalTransition($ = "$C", id = 0, set_flag = 0L, trigger = "point", guard = "", action = "", out_str = "point") -> @("frac1")
new @("") - :Contains($ = "$D") -> @("UnnamedJunction")
new @("") - :Contains($ = "$E") -> @("zero1")
new @("") - :Contains($ = "$10") -> @("int2")
new @("") - :Contains($ = "$13") -> @("frac2")
new @("") - :Substate($ = "$0") -> @("zero")
new @("point") - :PseudoTransition($ = "$14", id = 0, set_flag = 0L, guard = "", action = "insert('0')", out_str = " / insert('0')") -> @("frac2")
new @("digit") - :PseudoTransition($ = "$12", id = 0, set_flag = 0L, guard = "", action = "", out_str = "") -> @("UnnamedJunction")
new @("UnnamedJunction") - :PseudoTransition($ = "$11", id = 0, set_flag = 0L, guard = "[else]", action = "insert(n)", out_str = " [else] / insert(n)") -> @("int2")
new @("UnnamedJunction") - :PseudoTransition($ = "$F", id = 0, set_flag = 0L, guard = "[n == '0']", action = "", out_str = " [n == '0']") -> @("zero1")
# total number of edges: 21

@("frac").sub_regions = set<SubRegion>{}
@("frac").regions = set<ConcurrentState>{}
@("frac").sub_states = set<State>{}
@("frac").possible_conf = set<ActiveState>{}
@("frac").initial_conf = set<ActiveState>{}
@("$9").lca = set<State>{}
@("$9").sub_regions = set<SubRegion>{}
@("$9").regions = set<ConcurrentState>{}
@("int").sub_regions = set<SubRegion>{}
@("int").regions = set<ConcurrentState>{}
@("int").sub_states = set<State>{}
@("int").possible_conf = set<ActiveState>{}
@("int").initial_conf = set<ActiveState>{}
@("zero").sub_regions = set<SubRegion>{}
@("zero").regions = set<ConcurrentState>{}
@("zero").sub_states = set<State>{}
@("zero").possible_conf = set<ActiveState>{}
@("zero").initial_conf = set<ActiveState>{}
@("$8").lca = set<State>{}
@("$8").sub_regions = set<SubRegion>{}
@("$8").regions = set<ConcurrentState>{}
@("$6").lca = set<State>{}
@("$6").sub_regions = set<SubRegion>{}
@("$6").regions = set<ConcurrentState>{}
@("").sub_regions = set<SubRegion>{}
@("").regions = set<ConcurrentState>{}
@("").sub_states = set<State>{}
@("").possible_conf = set<ActiveState>{}
@("").initial_conf = set<ActiveState>{}
@("$A").lca = set<State>{}
@("$A").sub_regions = set<SubRegion>{}
@("$A").regions = set<ConcurrentState>{}
@("$C").lca = set<State>{}
@("$C").sub_regions = set<SubRegion>{}
@("$C").regions = set<ConcurrentState>{}
@("$14").lca = set<State>{}
@("$14").sub_regions = set<SubRegion>{}
@("$14").regions = set<ConcurrentState>{}
@("$12").lca = set<State>{}
@("$12").sub_regions = set<SubRegion>{}
@("$12").regions = set<ConcurrentState>{}
@("$11").lca = set<State>{}
@("$11").sub_regions = set<SubRegion>{}
@("$11").regions = set<ConcurrentState>{}
@("$F").lca = set<State>{}
@("$F").sub_regions = set<SubRegion>{}
@("$F").regions = set<ConcurrentState>{}
# end of graph "lgspGraph_1" saved by GrsExport

