using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Reactive.Linq;
using System.Reactive.Concurrency;

namespace Nemerle.Statechart
{
  public class DoActivity
  {
    protected mutable _task : IDisposable;
    
    action       : Action;
    continuation : Action;
    
    public this(action : Action)
    {
      this.action = action;
    }
    
    public this(action : Action, cont : Action)
    {
      this(action);
      continuation = cont
    }
    
    public virtual Start() : void
    {
      _task = Observable.Start(action).Subscribe();
      //task = Task.Factory.StartNew(action)
    }
    
    public virtual StartContinued() : void
    {
      _task = Observable.Start(action).Subscribe(_ => continuation());
      //task = Task.Factory.StartNew(action).ContinueWith(continuation)
    }
    
    public virtual Stop() : void
    {
      _task.Dispose()
    }
    
  }
  
  public class CancelableDoActivity
  {
    protected mutable _task : IDisposable;
    mutable cancel_source : CancellationTokenSource;
    action : Action[CancellationToken];
    continuation : Action;
    
    public this(action : Action[CancellationToken])
    {
      this.action = action;
    }
    
    public this(action : Action[CancellationToken], cont : Action)
    {
      this(action);
      continuation = cont;
    }
    
    Run() : void
    {
      action(cancel_source.Token)
    }
    
    public Start() : void
    {
      cancel_source = System.Threading.CancellationTokenSource();
      _task = Observable.Start(Run).Subscribe()
    }
    
    public StartContinued() : void
    {
      cancel_source = System.Threading.CancellationTokenSource();
      _task = Observable.Start(Run).Subscribe(_ => if (cancel_source.IsCancellationRequested) () else continuation())
    }
    
    public Stop() : void
    {
      cancel_source?.Cancel();
      _task?.Dispose()
    }
    
  }
}
