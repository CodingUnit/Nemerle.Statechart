using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using System.Reactive.Subjects;
using System.Reactive.Linq;

namespace Nemerle.Statechart
{

  public abstract class StateMachine[TState] : IDisposable where TState : HsmState
  {
    [Accessor]
    protected mutable cur_state : TState;

    protected abstract Initial() : TState;

    protected mutable completion : bool;

    public IsTerminated : bool
    {
      get
      {
        cur_state == null
      }
    }

    protected abstract DispatchEvent(evt : HsmEvent) : TState;

    protected Dispatch(evt : HsmEvent) : void
    {
      TrySwitch(DispatchEvent(evt))
    }

    state_change : Subject[TState] = Subject();
    
    public States : IObservable[TState]
    {
      get
      {
        state_change
      }
    }
        
    public override ToString() : string
    {
      if (cur_state != null) cur_state.ToString() else null
    }

    protected TrySwitch(st : TState) : void
    {
      when (st != null) Switch(st);
      OnEventComplete()
    }

    protected virtual OnSwitch() : void
    {
    }

    protected virtual OnEventComplete() : void
    {
    }

    protected Switch(st : TState) : void
    {
      cur_state = st;
      state_change.OnNext(st);
      OnSwitch()
    }

    public Dispose() : void
    {
      cur_state = null;
      OnTerminated()
    }

    OnTerminated() : void
    {
      Terminated?.Invoke(this, null)
    }

    public event Terminated : EventHandler;

  }

  public abstract class HsmEvent
  {
    public abstract Name : string {get;}
    public abstract FullName : string {get;}
  }

  public abstract class TimeEvent : HsmEvent
  {
  }
  
  public interface IActiveStateMachine
  {
    PostEvent(evt : HsmEvent) : void;
  }

  public abstract class HsmState
  {
  }
  
  public interface ITestStateMachine : IDisposable
  {
    Initiate()                : void;
    PostEvent(evt : string)   : void;
    PostEvent(evt : string, p1 : object, p2 : object = null, p3 : object = null) : void;
    PostEvent(evt : string, params pars : array[object]) : void;
    PostEvent(evt : HsmEvent) : void;
    IsInState(st : string)    : bool;
    event ActionExecuted      : Action[string];
    event TransitionCompleted : EventHandler;
    Events                    : IEnumerable[EventInfo] {get;}
  }
}

