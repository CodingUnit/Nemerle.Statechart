using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;
using System.ComponentModel;

using NC = Nemerle.Collections;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{
  using FsmState;

  [System.Flags]
  public enum RebuildObject
  {
    | State       = 1
    | Pseudo      = 2
    | Transitions = 4
  }

  //[Record]
  public partial class StateMap
  {
    public Analyser : FsmAnalyser;

    [Accessor]
    mutable state_tree : FsmState;

    [NotifyPropertyChange]
    [MemoizedCalc]
    public States : array[FsmState] 
    {
      get
      {
        state_tree.GetBreadthFirstEnumerable().ToArray()
      }
    }

    [MemoizedCalc]
    public Transitions   : array[StateTransition] 
    {
      get
      {
        States.SelectMany(_.transitions).ToArray()
      }
    }

    [MemoizedCalc]
    public PseudoStates : array[PseudoStateNode] 
    {
      get
      {
        States.SelectMany(_.pseudo_states).ToArray()
      }
    }

    public this(an : FsmAnalyser) 
    { 
      Analyser = an; 
    }    

    /// <summary>
    /// create super states setted with " : parent" syntax
    /// </summary>
    CreateSuperStates() : void
    {
      foreach (FsmState(state = StateNode.State(parent = Some(p))) as st in States)
      {
        match (p)
        {
          | "top" => st.MoveToNewSuper(state_tree)
          | n     => match (Get(n))
                      {
                        | null => Analyser.AddError(FsmError.ParentStateNotFound(st, FsmState(p, Analyser, StateType.State())));
                        | s    => st.MoveToNewSuper(s)
                      }
        }
      }
    }

    CreateBindings() : void
    {
      States_memoized_calc.Bind(this, "state_tree");
      Transitions_memoized_calc.Bind(this, "States");
      PseudoStates_memoized_calc.Bind(this, "States");
      foreach (st in States)
      {
        st.Init();
        st.ChangeBind("sub_states", _ => OnPropertyChanged("state_tree"));
        Transitions_memoized_calc.Bind(st, "transitions");
        PseudoStates_memoized_calc.Bind(st, "pseudo_states");
      }
    }
    
    /// <summary>
    /// create state tree map and specific structures, update references etc
    /// </summary>
    public Create(state : StateNode.State) : void
    {
      
      // fold general rose tree and convert it to FsmState general rose tree
      def top = TreeUtils.FoldTree(state, null, _.sub_states, FsmState(_, _, Analyser));
      top.name = FsmState.TopStateName; // change name
      state_tree = top;
      CreateBindings();
      CreateSuperStates(); // check create super states setted with : parent syntax
      CreatePreDecls(); // create and resolve pre declarations

      UpdateReferences(); // resolve references
    }

  }
}
