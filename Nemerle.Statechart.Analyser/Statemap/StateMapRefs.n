using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapRefs.
  /// </summary>
  partial class StateMap
  {

    UpdateReferences() : void
    {
      PseudoStates.Iter(x => UpdatePseudoStateReference(x, x.state));
      Transitions.Iter(x => UpdateTransitionReference(x, x.From));
    }

    UpdatePseudoStateReference(p : PseudoStateNode, st : FsmState) : void
    {
      match (p)
      {
        | Initial(tran = tr)
        | History(default = Some(tr)) => UpdateTransitionReference(tr, st)
        //| Junction(tree = n) as p     => UpdateJunctionReference(p, st)
        | _            => ()
      }
    }

    UpdateJunctionReference(p : PseudoStateNode.Junction, st : FsmState, tran : StateTransition) : void
    {
      def check_target(t)
      {
        def tar = t.target;
        match (ResolveTarget(t.state, tar, tran))
        {
          | null => ()
          | nt    => t.target = nt;
        }
      }
      
      p.tree.Iter(null, check_target)
    }
    
    UpdateTransitionReference(tr : StateTransition, st : FsmState) : void
    {
      match (ResolveTarget(st, tr.To, tr))
      {
        | null => ()
        | t    => tr.To = t
      }
    }
    
    ResolvePseudoState(p : PseudoStateNode, st : FsmState, tran : StateTransition) : PseudoStateNode
    {
      match (p)
      {                                   // get history from state
        | PseudoStateNode.History as h => st.GetHistory(h)
        | Terminate as p               => p // it is must be resolved
        | Junction(Name = n, IsUnnamed = false) => match (GetPseudoIn(n, PseudoStates))
                                                   {
                                                     | null          => null
                                                     | Junction as p => UpdateJunctionReference(p, st, tran); p
                                                     | _             => null
                                                   }
                                                         
        | Junction as j => UpdateJunctionReference(j, st, tran); j
        | _ => match (p.NativeName) // find for name
            {
              | Some(p)   => GetPseudoIn(p, null)
              | _         => null
            }
      }

    }
    
    ResolveTarget(st : FsmState, tr : TransitionTarget, tran : StateTransition) : TransitionTarget
    {
      match (tr)
      {
        // TODO: продумать алгоритм разрешения неоднозначности из того в каком состояниии
        // осуществляется переход
        | Named(_, n)                         => match (GetNamed(n, null))
                                                 {
                                                   | null => Analyser.AddError(FsmError.UnknownNode(tran, n));
                                                             null
                                                   | t    => t
                                                 }
        | Qualified(parent = par, target = t) => def res = Get(par);
                                                 match (res, t)
                                                 {
                                                   | (null, _) => Analyser.AddError(FsmError.UnknownTarget(tran, tr));
                                                                  null
                                                   | (res, _)  => ResolveTarget(res, t, tran)
                                                 }
        | PseudoState(p) as t                 => match (ResolvePseudoState(p, st, tran))
                                                  {
                                                    | null => Analyser.AddError(FsmError.UnknownTarget(tran, tr));
                                                              null
                                                    | n    => t.ChangeNode(n)
                                                  }
        | State(s) as t                       => def name = s.NativeName;
                                                 match (Get(name))
                                                 {
                                                   | null    => Analyser.AddError(FsmError.StateNotFound(s));t
                                                   | s       => t.ChangeState(s)
                                                 }
        | _                                   => null // other skipped
      }
    }


  }
}
