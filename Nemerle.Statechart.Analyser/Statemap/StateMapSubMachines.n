using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapSubMachines.
  /// </summary>
  partial class StateMap
  {
    
    public LoadedMachines : Hashtable[string, StateNode.StateMachine] {get;set;}
    
    public SubMachines : IEnumerable[FsmState]
    {
      get
      {
        States.Where(x => x.type == StateType.SubMachine)
      }
    }
    
    LoadUsings(fsm : StateNode.StateMachine) : void
    {
      def map = Hashtable();
      foreach (u in fsm.usings)
      {
        match (Analyser.StateMachinesInProj.Find(x => x.Key == u.from))
        {
          | Some(m) => map.Add(u.name, m.Value)
          | _       => Analyser.AddError(FsmError.StateMachineNotFound(u))
        }
      }
      LoadedMachines = map
    }
    
    CreateSubMachines(fsm : StateNode.StateMachine) : void
    {
      LoadUsings(fsm);
      foreach (st in SubMachines)
      {
        when (LoadedMachines.ContainsKey(st.name))
        {
          def loaded = LoadedMachines[st.name];
          def state = StateMap.Create(Analyser, loaded);
          state.name = st.name; // copy name of source state
          state.DefineTransitions(st.transitions); // copy transitions
          st.transitions.Iter(x => x.From = state); // set state as in machine
          state.Attributes = st.Attributes; // copy attributes
          foreach (point in st.ExitPoints)
          {
            match (state.ExitPoints.Find(x => x.name == point.name))
            {
              | Some(e) => e.tran = Some(point.tran.Value)
              | _       => Analyser.AddError(FsmError.PseudoStateNotFound(point.Name))
            }
          }
          st.Super.Replace(st, state)
        }
      }
    }
  }
}
