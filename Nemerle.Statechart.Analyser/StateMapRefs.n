using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapRefs.
  /// </summary>
  partial class StateMap
  {

    UpdateReferences() : void
    {
      PseudoStates.Iter(x => UpdatePseudoStateReference(x, x.state));
      Transitions.Iter(x => UpdateTransitionReference(x, x.From));
    }

    UpdatePseudoStateReference(p : PseudoStateNode, st : FsmState) : void
    {
      match (p)
      {
       | History as h => h.default.Iter(UpdateTransitionReference(_, st))
       | _            => ()
      }
    }

    UpdateTransitionReference(tr : StateTransition, st : FsmState) : void
    {
      match (ResolveTarget(st, tr.To, tr))
      {
        | null => ()
        | t    => tr.To = t
      }
    }

    ResolvePseudoState(p : PseudoStateNode, st : FsmState) : PseudoStateNode
    {
      match (p)
      {                                   // get history from state
        | PseudoStateNode.History as h => st.GetHistory(h)
        | Terminate                    => match (PseudoStates.Find(x => x is PseudoStateNode.Terminate))
                                          {
                                            | Some(ft) => ft
                                            | _        => def t = PseudoStateNode.Terminate(state_tree);
                                                          state_tree.AddPseudo(t);                                                          
                                                          t
                                          }
        | _ => match (p.NativeName) // find for name
            {
              | Some(p)   => GetPseudoIn(p, null)
              | _         => null
            }
      }

    }
    // TODO: решить проблему с двойным обходом узлов до разрешения и после
    ResolveTarget(st : FsmState, tr : TransitionTarget, tran : StateTransition) : TransitionTarget
    {
      match (tr)
      {
        // TODO: продумать алгоритм разрешения неоднозначности из того в каком состояниии
        // осуществляется переход
        | Named(par, n)   => match (GetNamed(n, par))
                              {
                                | null => Analyser.AddError(FsmError.UnknownNode(tran));
                                          null
                                | t    => t
                              }
        | Qualified(parent = par, target = t) => 
            def res = Get(par);
            match (res, t)
            {
              | (null, _) => Analyser.AddError(FsmError.UnknownTarget(tran, tr));
                             null
              | (res, _)  => ResolveTarget(res, t, tran)
            }
        | PseudoState(p) as t    => match (ResolvePseudoState(p, st))
            {
              | null => Analyser.AddError(FsmError.UnknownTarget(tran, tr));
                        null
              | n    => t.ChangeNode(n)
            }
        | State(s) as t          => match (Get(s.NativeName))
                                    {
                                      | null    => Analyser.AddError(FsmError.StateNotFound(s));t
                                      | s       => t.ChangeState(s)
                                    }

        | _                   => null // other not supported yet
      }
    }


  }
}
