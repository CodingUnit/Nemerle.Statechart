using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapRefs.
  /// </summary>
  partial class StateMap
  {

    UpdateHistoryReference(hist : PseudoStateNode.History, st : FsmState) : PseudoStateNode.History
    {
      def default = hist.default.Map(UpdateTargetReference(_, st));
      hist.ChangeDefault(default)
    }

    UpdateStateReference(st : FsmState) : FsmState
    {
      | FsmState.SubMachine(type = type) as st =>
          def fsm = States.FilterType();
          match (fsm.Find(x => x.type == type))
          {
            | Some(FsmState.InlinedSubMachine as f) => UpdateStateReference(st.Instance(f))
            | _                                     => st
          }
      | _ =>

      def st = st.TransitionMap(UpdateTargetReference(_, st));
      st.HistoryMap(UpdateHistoryReference(_, st))
    }

    ResolveTarget(st : FsmState, targ : TransitionTarget, tr : StateTransition) : TransitionTarget
    {
      targ.ReduceSingle(true, ResolveTargets(st, st, _, tr, _))
    }

    UpdateTargetReference(tr : StateTransition, st : FsmState) : StateTransition
    {
      def from = if (tr.From != null) st else null;

      def recursive_resolve(prev)
      {
        def to = ResolveTarget(st, prev, tr);
        if (to : object != prev) recursive_resolve(to) else to
      }

      tr.ChangeFromNumTo(from, recursive_resolve(tr.To))
    }

    public NewReferences : bool {get;set;}

    GetNamed(tar : TransitionTarget.Named, tr : StateTransition) : TransitionTarget
    {
      match (tar)
      {
        | Named(name = n) =>

            match (Analyser.States.Find(x => x.NativeName == n))
        {
          | Some(st) => TransitionTarget.State(Analyser, st)
          | _            =>
            def states = Analyser.PseudoStates.Filter(x => x.NativeName.HasValue);
            match (states.Find(x => x.NativeName.Value == n))
            {
              | Some(t) => TransitionTarget.PseudoState(Analyser, TransitionTarget.CreatePseudoRef(t))
              | _       => Analyser.AddError(FsmError.UnknownNode(tr));
                           tar
            }

        }
      }
    }

    //public UpdateRefsToParent(st : FsmState) : void
    //{
    //  def num = st.Num;
    //  st.AllChilds.Iter(x => super_map[x] = num)
    //}

    GetNode[T](name : string, err : int -> void) : option[T] where T : PseudoStateNode
    {
      def pseudo = Analyser.PseudoStates.FilterType();
      def pseudo = if (name != null) pseudo.Where(x => if (x.NativeName is Some(n)) name == n else false) else pseudo;
      match (pseudo.NToList())
      {
        | []     => err(1);Some(null)
        | [node] => Some(node)
        | _      => err(2);None()
      }
    }

    SuperForPseudo(st : GeneralTree[FsmState], tran : StateTransition) : GeneralTree[FsmState]
    {
      if (tran is StateTransition.Initial) st else st.Super()
    }

    public ResolveTarget(targ : TransitionTarget) : GeneralTree[FsmNode]
    {
      
    }
    
    CheckPseudo(st : GeneralTree[FsmState], res : GeneralTree[FsmState], np : GeneralTree[FsmNode.PseudoState], targ : TransitionTarget, tran : StateTransition, ch : IEnumerable[TransitionTarget]) : GeneralTree[FsmNode]
    {
      match (np.Value)
      {
        | Fork as j =>
        //| EntryPoint
        //| ExitPoint =>
            //ParentFor(p.Num, st);
            //st.Super
            def st = SuperForPseudo(st, tran);

            ParentFor(j.Num, st);
            ChangeMan.Add(st.Num, x => x.AddPseudo(j));
            np.Fix(j.Num)

        | History as t       => def hist = res.GetHistory(t);
                                np.Fix(hist.Num)

        | Junction(IsUnnamed = true) as j =>
                                             def st = SuperForPseudo(st, tran);
                                             ParentFor(j.Num, st);
                                             def j = j.ChangeTo(ch.First() :> TransitionTarget.JunctionNode); // update childs resolved
                                             ChangeMan.Add(st.Num, x => x.AddPseudo(j)); // add to super state
                                             np.Fix(j.Num)

        | Junction(name = n) => match (GetNode(n, _ => Analyser.AddError(FsmError.UnknownTarget(tran, targ))))
                                {
                                  | Some(null)          => np
                                  | Some(Junction as j) => // update childs resolved
                                                           //ChangeMan.Add(st.Super.Num, x => x.AddPseudo(j));
                                                           np.Fix(j.Num); // fix target
                                                           //def tar = ResolveTarget(st, j.to, tran) :> TransitionTarget.JunctionNode;
                                                           //fixed.SetValue(j => (j :> PseudoStateNode.Junction).ChangeTo(tar));
                                                           //fixed// update junction in state to updated value
                                  | _                   => np
                                }
        | Join(name = n)     => match (GetNode(n, _ => Analyser.AddError(FsmError.UnknownTarget(tran, targ))))
                                {
                                  | Some(null)      => np
                                  | Some(Join as j) => np.Fix(j.Num)
                                  | _               => np
                                }
        | Terminate as t     => match (GetNode(null, n => when (n == 2) Analyser.AddError(FsmError.UnknownTerminateTransition(tran))))
                                {
                                  | Some(null)           => def t = t.ChangeNum(GetNextGlobalNum());
                                                            def st = SuperForPseudo(st, tran);
                                                            ParentFor(t.Num, st);
                                                            ChangeMan.Add(st.Num, x => x.AddPseudo(t));
                                                            np.Fix(t.Num)
                                  | Some(Terminate as t) => np.Fix(t.Num)//TransitionTarget.PseudoState(this, node)
                                  | _                    => np
                                }
        | _                  => null
      }
    }


    // TODO: решить проблему с двойным обходом узлов до разрешения и после
    ResolveTargets(st : FsmState, res : FsmState, tr : TransitionTarget, tran : StateTransition, ch : IEnumerable[TransitionTarget]) : TransitionTarget
    {
      match (tr)
      {
        | Named as t => def t = GetNamed(t, tran);
                                ResolveTargets(st, st, t, tran, ch)
        | Qualified(parent = res, target = t) =>
            def res = Get(res);
            match (res, t)
            {
              | (FsmState.SubMachine as m, TransitionTarget.State(state = FsmState(Name = n))) =>
                  def m = m.Scan(); // scan external sub machine for states
                  when (!m.ref_sub_states.Contains(n)) Analyser.AddError(FsmError.SubMachineStateNotFound(m, n));
                  TransitionTarget.Nowhere(Analyser)//TransitionTarget.SubMachine(Analyser, m, n)

              | (null, _) => Analyser.AddError(FsmError.UnknownTarget(tran, tr));
                             t
              | (res, t)  => ResolveTargets(st, res, t, tran, ch)
            }
        | PseudoState(p) as t => def np = CheckPseudo(st, res, p, t, tran, ch);
                                 if (np == null) null else t.ChangeNode(np)

        | _                   => null
      }
    }


  }
}
