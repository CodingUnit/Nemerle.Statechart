using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of HistoryPath.
  /// </summary>
  [Record]
  public class HistoryPath
  {

    [NeedChange]
    public transition : StateTransition;
      
    public this(from : FsmState, to : FsmState, hist : StateHistory)
    {
      History = hist;  
      FromSource = from;
      ToSource = to;
    }
    
    public FromSource : FsmState;
    public ToSource : FsmState;
    
    public History : StateHistory;
    
    public IsDefault : bool
    {
      get
      {
        transition is StateTransition.Default
      }
    }
    
    public Path : PathNode
    {
      get
      {
        transition.PathNode
      }
    }
    
    public ActualTo : FsmState
    {
      get
      {
        transition.ActualTo
      }
    }

    public From : FsmState
    {
      get
      {
        transition.From
      }
    }
      
    public To : FsmState
    {
      get
      {
        match (transition.To)
          {
            | TransitionTarget.State(st)  => st
            | _                           => null
          }
      }
    }

    public Name : string
    {
      get
      {
        if (IsDefault) $"$transition" else 
          match (History)
          {
            | StateHistory(state = FsmState(BothHistories = true), type = t) => $"$(t)$transition"
            | _                                                              => $"$transition"
          }
      }
    }
    
    public override ToString() : string
    {
      Name
    }
    
    public CreatePath(an : FsmAnalyser) : HistoryPath
    {
      def tran = StateTransition.History(History, FromSource, ToSource);
      def tran = tran.ChangeLocal(true);
      // UpdateReference
      def tran = tran.TraversePath(an); // creating transition path
      ChangeTransition(tran)
      //match (History)
      //{
      //    // define history path for transition
      //  | StateHistory.Shallow  => To.DefineHistoryPathRecurse(FromSource.Name, this)
      //  | StateHistory.Deep  => To.DefineHistoryPath(FromSource.Name, this);
      //  | _  => ()
      //}
    }
      
  }
}
