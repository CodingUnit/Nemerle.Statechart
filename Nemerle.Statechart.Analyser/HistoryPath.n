using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  [Record]
  public class HistoryPath : IEquatable[HistoryPath]
  {
    public transition : Transition {get;set;}
    
    public History : PseudoState.History;
    
    public From : HState;
    
    public Name : string
    {
      get
      {
        def name = $"HistoryPathFrom$(From)To$(transition.Target)";
        //if (IsDefault) $"$transition" else 
        if (History.state.history.IsTwo) $"$(History.type)$name" else name
      }
    }

    public Equals(b : HistoryPath) : bool
    {
      Name == b.Name
    }
    
    public To : ActiveStateConfig
    {
      get
      {
        (transition.Target :> TargetDeterminator.State).state
      }
    }
    
    public override ToString() : string
    {
      Name
    }
  }
  
  /// <summary>
  /// Description of HistoryPath.
  /// </summary>
  class HistoryPathBuilder
  {

    

    trav : ConfigTraverser;
    
    public this(trav : ConfigTraverser, from : HState, to : ActiveStateConfig, hist : PseudoState.History)
    {
      this.trav = trav;
      From = from;  
      To   = to;
      History = hist;
    }

    public From   : HState;
    public To     : ActiveStateConfig;

    public History : PseudoState.History;

    //public IsDefault : bool
    //{
    //  get
    //  {
    //    transition is StateTransition.Default
    //  }
    //}

    //public Path : IEnumerable[PathNode]
    //{
    //  get
    //  {
    //    transition.PathNode
    //  }
    //}

    //public ActualTo : FsmState
    //{
    //  get
    //  {
    //    transition.ActualTo
    //  }
    //}

    //public From : FsmState
    //{
    //  get
    //  {
    //    transition.From
    //  }
    //}

    //public To : FsmState
    //{
    //  get
    //  {
    //    match (transition.To)
    //      {
    //        | TransitionTarget.State(state = st) => st
    //        | _                                  => null
    //      }
    //  }
    //}

    public CreatePath() : HistoryPath
    {
      def to = To.simple_states.First();
      def tran = HTransition(HTarget.State(From), StateEvent.Completion, GuardNode.Empty(), [], HTarget.State(to), true);
      def tran_path = TransitionPath(tran, trav.Solver, trav.ActiveProc);
      def tran = tran_path.TraverseInitial();
      //def tran = StateTransition(FromSource, ToSource, TransitionKind.Local);
      //tran.CreateSimpleDecisionTree();
      //tran.internal_kind = TransitionRunKind.History;
      //transition = tran;
      HistoryPath(tran, History, From)
    }

  }
}
