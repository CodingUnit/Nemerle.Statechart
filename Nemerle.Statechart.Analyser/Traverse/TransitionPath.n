using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using PathNode;
  using TransitionDestination;
  using TransitionTarget;
  using FsmState;


  /// <summary>
  /// Transition Path
  /// </summary>
  public partial class TransitionPath
  {
    [Accessor]
    mutable path : PathSequence = PathSequence();
    public recursive : bool;
    public traverser : TransitionTraverser;

    [Accessor]
    mutable transition : StateTransition;
    public analyser : FsmAnalyser;

    /// <summary>
    /// Traversing path
    /// </summary>
    //rec : bool = false
    public Traverse() : void
    {
      def check_actual_to(to)
      {
        | SubRegion(state = st)
        | ForceStateChange(st)                   => check_actual_to(st)
        | Choice(_, _, Some(st))
        | Final(state = st)
        | State(st)                              =>
                                                st.Lived = true;
                                                when (recursive) traverser?.Add(st);
                                                st
        | Terminate(node = PseudoStateNode(state = st))
        | Region(st)
        | Choice(st, _, _)                       => st
        | _                                      => null
      }


      //recursive = rec;
      traverser?.Log($"start traverse transition: $(transition)");
      def to = TraverseTransition(transition); // traversing transition
      traverser?.Log($"transition: $(transition) destination:$to");
      def actual = check_actual_to(to);

      
      transition.Destination = to;
      transition.ActualTo = actual;
      transition.InitSimpleDecisionTree(path);
      //transition.Path = this;
    }

    public this(tran : StateTransition, rec : bool = false)
    {
      recursive = rec;
      transition = tran;
      this.analyser = tran.analyser;
      traverser = analyser.Traverser;
    }

    public Actions : IEnumerable[FsmAction]
    {
      get
      {
        path.Path.PathActions()
      }
    }
  }

}
