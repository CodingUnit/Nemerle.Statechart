using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  [Record]
  public class PathSequence
  {
    //mutable path : List[PathNode] = List();

    [Memoized]
    public exit_states : list[HState]
    {
      get
      {
        exit_tran_path.Map(_.state)
      }
    }

    exit_path   : List[TranPath] = List();
    act_path    : List[TranPath] = List();
    entry_path  : List[TranPath] = List();

    public AddPath(path : PathSequence) : void
    {
      exit_path.AddRange(path.exit_path);
      exit_path.AddRange(path.act_path);
      exit_path.AddRange(path.entry_path);
    }
    
    [Memoized]
    public exit_tran_path  : list[TranPath]
    {
      get
      {
        exit_path.NToList()
      }
    }

    [Memoized]
    public actions_path    : list[TranPath]
    {
      get
      {
        act_path.NToList()
      }
    }

    [Memoized]
    public entry_tran_path : list[TranPath]
    {
      get
      {
        entry_path.NToList()
      }
    }

    [Memoized]
    public tran_nodes : list[TranPath]
    {
      get
      {
        exit_tran_path + entry_tran_path
      }
    }

    [Memoized]
    public action_nodes : list[PathNode]
    {
      get
      {
        actions_path.SelectMany(_.nodes).NToList()
      }
    }

    [Memoized]
    public entry_states : list[HState]
    {
      get
      {
        entry_tran_path.Map(_.state)
      }
    }

    //public this() {}

    //public AddEntry(node : PathNode) : void
    //{
    //  | PathNode(state = st) =>

    //      match (entry_path.Find(x => x.state == st))
    //      {
    //        | null => entry_path.Add(TranPath(st, [node], PathKind.Entry))
    //        | ep   => ep.nodes = ep.nodes.Append(node).NToList();
    //      }
    //}

    //public AddEntry(st : FsmState, node : IEnumerable[PathNode]) : void
    //{
    //  entry_path.Add(TranPath(st, node.NToList(), PathKind.Entry))
    //}

    public AddEntry(path : IEnumerable[TranPath]) : void
    {
      entry_path.AddRange(path)
    }

    //public AddExit(st : FsmState, node : IEnumerable[PathNode]) : void
    //{
    //  exit_path.Add(TranPath(st, node.NToList(), PathKind.Exit))
    //}

    public AddExit(path : IEnumerable[TranPath]) : void
    {
      exit_path.AddRange(path)
    }

    public AddAction(node : IEnumerable[PathNode]) : void
    {
      act_path.Add(TranPath(null, node.NToList(), PathKind.Action))
    }

    public AddAction(node : IEnumerable[TranPath]) : void
    {
      act_path.AddRange(node)
    }
    //public Add(nodes : IEnumerable[PathNode]) : void
    //{
    //  path.AddRange(nodes)
    //}

    [Memoized]
    public exit_nodes : list[PathNode]
    {
      get
      {
        exit_tran_path.SelectMany(_.nodes).NToList()
      }
    }

    [Memoized]
    public entry_nodes : list[PathNode]
    {
      get
      {
        entry_tran_path.SelectMany(_.nodes).NToList()
      }
    }

    [Memoized]
    public Path : IEnumerable[PathNode]
    {
      get
      {
        exit_nodes + action_nodes + entry_nodes
      }
    }
    
    public this() {}
    
    public static @+(a : PathSequence, b : PathSequence) : PathSequence
    {
      def path = a.Clone();
      path.AddPath(b);
      path
    }
    
    public Clone() : PathSequence
    {
      PathSequence(List(exit_path), List(act_path), List(entry_path))
    }
  }

}
