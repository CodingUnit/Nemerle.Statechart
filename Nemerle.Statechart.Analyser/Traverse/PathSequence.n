using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
    public class PathSequence
  {
    //mutable path : List[PathNode] = List();

    [Memoized]
    public exit_states : list[FsmState]
    {
      get
      {
        exit_tran_path.Map(_.st)
      }
    }
    
    exit_path   : List[TranPath.Exit]   = List();
    act_path    : List[TranPath.Action] = List();
    entry_path  : List[TranPath.Entry]  = List();
    
    [Memoized]
    public exit_tran_path  : list[TranPath.Exit]
    {
      get
      {
        exit_path.NToList()
      }
    }
    
    [Memoized]
    public actions_path    : list[TranPath.Action]
    {
      get
      {
        act_path.NToList()
      }
    }
    
    [Memoized]
    public entry_tran_path : list[TranPath.Entry]
    {
      get
      {
        entry_path.NToList()
      }
    }
    
    [Memoized]
    public action_nodes : list[PathNode]
    {
      get
      {
        actions_path.SelectMany(_.nodes).NToList()
      }
    }
    
    public entry_states : list[FsmState]
    {
      get
      {
        entry_tran_path.Map(_.st)
      }
    }
    
    //public this() {}

    public AddEntry(node : PathNode) : void
    {
      | PathNode(state = st) =>
      
        match (entry_path.Find(x => x.st == st))
        {
          | null => entry_path.Add(TranPath.Entry([node], st))
          | ep   => ep.nodes = ep.nodes.Append(node).NToList();
        }
    }

    public AddEntry(st : FsmState, node : IEnumerable[PathNode]) : void
    {
        entry_path.Add(TranPath.Entry(node.NToList(), st))
    }

    public AddEntry(path : IEnumerable[TranPath.Entry]) : void
    {
        entry_path.AddRange(path)
    }
    
    public AddExit(st : FsmState, node : IEnumerable[PathNode]) : void
    {
        exit_path.Add(TranPath.Exit(node.NToList(), st))
    }
    
    public AddExit(path : IEnumerable[TranPath.Exit]) : void
    {
        exit_path.AddRange(path)
    }
    
    public AddAction(node : IEnumerable[PathNode]) : void
    {
        act_path.Add(TranPath.Action(node.NToList()))
    }
    
    public AddAction(node : IEnumerable[TranPath.Action]) : void
    {
        act_path.AddRange(node)
    }
    //public Add(nodes : IEnumerable[PathNode]) : void
    //{
    //  path.AddRange(nodes)
    //}

    [Memoized]
    public exit_nodes : list[PathNode]
    {
      get
      {
        exit_tran_path.SelectMany(_.nodes).NToList()
      }
    }
    
    [Memoized]
    public entry_nodes : list[PathNode]
    {
      get
      {
        entry_tran_path.SelectMany(_.nodes).NToList()
      }
    }
    
    [Memoized]
    public Path : IEnumerable[PathNode]
    {
      get
      {
        exit_nodes + action_nodes + entry_nodes
      }
    }
  }

}
