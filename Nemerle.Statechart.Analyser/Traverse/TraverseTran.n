using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of TraverseTran.
  /// </summary>
  public partial class TransitionPath
  {
    TraverseDefaultTransition(tran : StateTransition) : TransitionDestination
    {

      | Default(history = hist, From = from) as tr =>
          DefPath(tran.Source, from, tran); // unwind path from Source up to transition begining (From)
          def st = tr.ToState;
          when (st == null) throw FsmErrorException(FsmError.DefaultTransitionMustGoToState(tran, hist));
          tran.Used = true;
          TraverseTargetReg(tr.To, tran)
          //match (hist, st.history.Value.Find(x => x.type == HistoryType.Deep))
          //{
          //  | (PseudoStateNode.History(type = HistoryType.Deep), Some(PseudoStateNode.History(default = t, type = HistoryType.Deep) as h)) =>
          //      when (t is Some(tr)) traverser?.Add(tr);
          //      History(h)

          //  | _ => TraverseTargetReg(tr.To, tr)
          //}
      | _ => null
    }

    TraverseOrdinaryTransition(tran : StateTransition) : TransitionDestination
    {
      DefPath(tran.Source, tran.From, tran); // unwind path from Source up to transition begining (From)
      tran.Used = true;
      TraverseTargetReg(tran.To, tran)
    }

    TraverseHistoryPath(tran : StateTransition) : TransitionDestination
    {

      | StateTransition.History(From = from, history = hist, ToState = st) =>

          def src = tran.Source;
          //def tran = if (tr.From == null) tr.ChangeFrom(tr.From) else tran;
          DefPath(src, from, tran); // unwind path from Source up to transition begining (From)
          tran.Used = true;
          if (st.type is StateType.Region) TransitionDestination.HistoryRestore(hist) 
          else TraverseStateTarget(st);
      | _ => null
    }

    TraverseInitialTransition(tran : StateTransition) : TransitionDestination
    {
      DefPath(tran.Source, tran.From, tran); // unwind path from Source up to transition begining (From)
      tran.Used = true;
      TraverseTarget(tran.To, tran)
    }

    TraverseInternalTransition(tran : StateTransition) : TransitionDestination
    {
      NodesCreate([], tran);
      tran.Used = true;
      TransitionDestination.NoStateChange()
    }
  }
}
