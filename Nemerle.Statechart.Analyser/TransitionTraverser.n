using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of TransitionTraverser.
  /// </summary>
  public class TransitionTraverser
  {    
    defered    : List[StateTransition] = List();
    defered_st : List[FsmState]        = List();
    
    analyser : FsmAnalyser;
    
    public this(an : FsmAnalyser) { analyser = an }
    
    [Accessor]
    completed  : List[StateTransition] = List();
    
    [Accessor]
    completed_states : List[FsmState]  = List();
    
    public Add(tran : StateTransition) : void
    {
      defered.Add(tran)
    }
    
    public Add(tran : IEnumerable[StateTransition]) : void
    {
      defered.AddRange(tran)
    }

    public Add(st : FsmState) : void
    {
      defered_st.Add(st)
    }

    public Traverse() : void
    {
      def (fsm, st) = defered_st.PartitionLazy(x => x.PartOfStateMachine.HasValue);
      def state_queue = st.RemoveDuplicatesSort(_.Num).Concat(fsm);
      def tran_queue = defered.RemoveDuplicatesSort(_.Name);
      def state_queue = state_queue.Exclude(completed_states.Contains);
      defered_st.Clear();
      defered.Clear();
      def st_res = state_queue.Map(_.TraverseTransitions());
      completed_states.AddRange(st_res);
      def trans = tran_queue.Map(_.TraversePath());
      completed.AddRange(trans);
      // if empty queue
      if (defered_st.IsEmpty() && defered.IsEmpty()) () else Traverse() // else recursive call self and traverse again
    }
  }
}
