using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

using NC = Nemerle.Collections;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{
  using FsmState;

  [System.Flags]
  public enum RebuildObject
  {
    | State       = 1
    | Pseudo      = 2
    | Transitions = 4
  }

  //[Record]
  public partial class StateMap
  {
    public Analyser : FsmAnalyser;

    [Accessor]
    mutable state_tree : FsmState;

    mutable cached_pseudo_states : array[PseudoStateNode];
    mutable cached_transitions   : array[StateTransition];
    mutable cached_states        : array[FsmState];

    public States : array[FsmState]
    {
      get
      {
        when (need_rebuild & RebuildObject.State != 0) 
        {
          cached_states = state_tree.GetBreadthFirstEnumerable().ToArray();
          need_rebuild &= ~RebuildObject.State;
        }
        cached_states
      }
    }

    public Transitions   : array[StateTransition]
    {
      get
      {
        when (need_rebuild & RebuildObject.Transitions != 0) 
        {
          cached_transitions = States.SelectMany(_.transitions).ToArray();
          need_rebuild &= ~RebuildObject.Transitions;
        }
        cached_transitions
      }
    }

    public PseudoStates : array[PseudoStateNode]
    {
      get
      {
        when (need_rebuild & RebuildObject.Pseudo != 0) 
        {
          cached_pseudo_states = States.SelectMany(_.pseudo_states).ToArray();
          need_rebuild &= ~RebuildObject.Pseudo;
        }
        cached_pseudo_states
      }
    }

    mutable need_rebuild : RebuildObject;
    // if changed tree added new states or pseudo create new cached tree iterator and structures
    public Rebuild(obj : RebuildObject) : void
    {
      need_rebuild |= obj
    }

    public this(an : FsmAnalyser) 
    { 
      Analyser = an; 
    }    

    /// <summary>
    /// create super states setted with " : parent" syntax
    /// </summary>
    CreateSuperStates() : void
    {
      foreach (FsmState(state = StateNode.State(parent = Some(p))) as st in States)
      {
        match (p)
        {
          | "top" => st.MoveToNewSuper(state_tree)
          | n     => match (Get(n))
                     {
                       | null => Analyser.AddError(FsmError.ParentStateNotFound(st, FsmState(p, Analyser, StateType.State())));
                       | s    => st.MoveToNewSuper(s)
                     }
        }
      }
    }

    /// <summary>
    /// create state tree map and specific structures, update references etc
    /// </summary>
    public Create(state : StateNode.State) : void
    {
      // fold general rose tree and convert it to FsmState general rose tree
      def top = TreeUtils.FoldTree(state, null, _.sub_states, FsmState(_, _, Analyser));
      top.name = FsmState.TopStateName; // change name
      state_tree = top;
      // need rebuild all
      Rebuild(RebuildObject.Transitions | RebuildObject.Pseudo | RebuildObject.State);
      CreateSuperStates(); // check create super states setted with : parent syntax
      CreatePreDecls(); // create and resolve pre declarations
      UpdateReferences(); // resolve references
    }

  }
}
