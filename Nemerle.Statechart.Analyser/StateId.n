using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

namespace Nemerle.Statechart
{

  using FsmState;
  using BitUtils;

  [Record]
  public class IdType
  {
    public val : BitArray;

    //public Id : ulong
    //{
    //  get
    //  {
    //    match (this)
    //    {
    //      | Int(val) => val
    //      | Long(val) => val
    //      | _ => 0 : ulong
    //    }
    //  }
    //}

    //public IsSimple : bool
    //{
    //  get
    //  {
    //    match (this)
    //    {
    //      | Int
    //      | Long => true
    //      | _ => false
    //    }
    //  }
    //}

    //engine : StateId;
    public Count : int
    {
      get
      {
        val.Count
      }
    }

    public Length : int 
    {
      get
      {
        MathUtils.UpperDiv(Count, 32)
      }
    }

    public Result : array[int]
    {
      get
      {
        def res = array(Length);
        val.CopyTo(res, 0);
        res
      }
    }

  }

  /// <summary>
  /// State identifier
  /// </summary>
  [Record]
  public class StateId
  {
    analyser : FsmAnalyser;

    count : int
    {
      get
      {
        analyser.statemap.Count
      }
    }

    public CreateMasks() : FsmState 
    {
      def st = analyser.TopState;

      def create_num_id_super(s, t)
      {
        def id = s.Id.val | t.val;
        def id = IdType(id);
        s.ChangeId(id)
      }

      def create_num_id(s, t)
      {
        def id = BitArray(count);
        def num = t.Num;
        when (num != 0) id.Set(num, true);
        def id = IdType(id);
        def sub = s |> create_num_id_super(_, id);
        t.ChangeIdSubStates(id, sub)
      }

      def mark_inlined_inst(sub, t)
      {
        match (t)
        {
          | FsmState where (cloneFor = FsmState where (Id = clone_id, PartOfStateMachine = Some(FsmState where (super_state = FsmState where (Id = inlined_super_id))))) =>

              def id = t.Id;
              def id = (id.val | clone_id.val);
              def id = id & ~inlined_super_id.val;
              def id = IdType(id);
              t.ChangeIdSubStates(id, sub)
        }
      }

      // first pass
      def st = st.FoldThis(create_num_id);
      // second pass                    
      st.FoldThis(mark_inlined_inst);
    }

  }
}
