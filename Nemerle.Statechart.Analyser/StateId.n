using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

namespace Nemerle.Statechart
{

  using FsmState;


  [Record]
  public class IdType
  {
    public val : BitArray;

    //public Id : ulong
    //{
    //  get
    //  {
    //    match (this)
    //    {
    //      | Int(val) => val
    //      | Long(val) => val
    //      | _ => 0 : ulong
    //    }
    //  }
    //}

    //public IsSimple : bool
    //{
    //  get
    //  {
    //    match (this)
    //    {
    //      | Int
    //      | Long => true
    //      | _ => false
    //    }
    //  }
    //}

    //engine : StateId;
    public Count : int
    {
      get
      {
        val.Count
      }
    }

    public Length : int 
    {
      get
      {
        MathUtils.UpperDiv(Count, 32)
      }
    }

    public Result : array[int]
    {
      get
      {
        def res = array(Length);
        val.CopyTo(res, 0);
        res
      }
    }

  }

  /// <summary>
  /// State identifier
  /// </summary>
  [Record]
  public class StateId
  {
    analyser : FsmAnalyser;

    count : int
    {
      get
      {
        analyser.statemap.Count
      }
    }

    public CreateMasks() : FsmState 
    {
      def st = analyser.TopState;

      def create_num_id(s, t)
      {
        def parent = if (s != null) s.Id else null;
        def id = BitArray(count);
        def num = t.Num;
        when (num != 0) id.Set(num, true);
        def id = if (parent != null) id.Or(parent.val) else id;
        def id = IdType(id);
        t.ChangeId(id)
      }

      def mark_inlined_inst(t)
      {
        | FsmState where (cloneFor = FsmState where (Id = clone_id, PartOfStateMachine = Some(FsmState where (super_state = FsmState where (Id = inlined_super_id))))) =>

            def id = t.Id;
            def id = id.val.Or(clone_id.val);
            def id = id.And(inlined_super_id.val.Not());
            def id = IdType(id);
            t.ChangeId(id)
      }

      // first pass
      def st = st.FoldThisSuper((s, _, _, t) => create_num_id(s, t), 
                                (s, _, t) => create_num_id(s, t), 
                                (s, _, _, t) => create_num_id(s, t), 
                                (s, _, _, t) => create_num_id(s, t), 
                                (s, _, _, t) => create_num_id(s, t), 
                                t => t, 
                                (s, _, _, t) => create_num_id(s, t), 
                          );
      // second pass                    
      st.FoldThis((_, _, t) => mark_inlined_inst(t), 
                  (_, t) => mark_inlined_inst(t), 
                  (_, _, t) => mark_inlined_inst(t), 
                  (_, _, t) => mark_inlined_inst(t), 
                  (_, _, t) => mark_inlined_inst(t), 
                  t => t, 
                  (_, _, t) => mark_inlined_inst(t), 
                  );
    }

  }
}
