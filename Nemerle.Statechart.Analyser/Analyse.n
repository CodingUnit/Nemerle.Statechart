// analyser.n
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.ComponentModel;

namespace Nemerle.Statechart
{

  using StateTransition;
  using ListUtils;

  [NotifyPropertyChange]
  public partial class FsmAnalyser : INotifyPropertyChanged
  {
    InitFlags() : void
    {
      def pflags = Fsm.flags;
      def flags = pflags.flags;
      // if testing, enable auto entry exit actions, transition completed event
      def flags = if (pflags.TestingFeatures) 
                     flags | MachineFlag.AutoEntryExitActions 
                           | MachineFlag.PropertyStateChanged
                           | MachineFlag.TransitionCompleted
                  else flags;
      FsmFlags = pflags.ChangeFlags(flags);
    }
    
    InitStatechart() : void
    {
      InitFlags();
      statemap.Create(Fsm);
      //statemap.StateTree.name = FsmState.TopStateName; // change name
    }

    CreateBindings() : void
    {
      statemap.ChangeBind("States", _ => OnPropertyChanged("States"));
      statemap.ChangeBind("Transitions", _ => OnPropertyChanged("StateTransitions"));
      statemap.ChangeBind("PseudoStates", _ => OnPropertyChanged("PseudoStates"));
    }
  
    CreateStateMap() : void
    {
      InitStatechart();
      CreateBindings();
      CheckHistoryStates(); // check for errors in history
      when (Error) throw FsmErrorException();
      RenameDuplicates();
    }


    RenameDuplicates() : void
    {
      foreach (st when char.IsLower(st.name[0]) in States)
      {
        st.name = st.name.ToUpperFirst();
      }
      
      def dups = States.NToList().Duplicates(FsmState.NameComparer);
      def dups = dups.GroupBy(_.Name).NToList();

      foreach (st in dups)
      {
        foreach (st in st with i)
        {
          st.copy_num = i
        }
      }
    }

    CheckHistoryStates() : void
    {
    // check history duplicates in state
      def check_dup_history(h, st)
      {
        match (h)
        {
        // duplicate variants
          | TwoOption.Two(n, n2) =>
              match (n.type, n2.type)
              {
                | (HistoryType.Deep, HistoryType.Deep)
                | (HistoryType.Shallow, HistoryType.Shallow) => AddError(FsmError.DuplicateHistory(st, n))
                | _                                          => ()
              }
          | _ => () 
        }
      }

      def check_default_tran(h)
      {
        | PseudoStateNode.History(default = Some(d)) when (d.ToState == null) =>
                                                        AddError(FsmError.DefaultTransitionMustGoToState(d, h))
        | _                                          => ()
      }
      
      foreach (FsmState(history = TwoOption(HasValue = true) as h) as st in States)
      {
        check_dup_history(h, st);
        h.Value.Iter(check_default_tran);
      }
    }

    CreateConcurrentRegion() : void
    {
      def warn = not_used_regions.Map(FsmWarning.RegionNotUsed);
      AddWarnings(warn)
    }

    CheckActivities() : void 
    {
      def sm = DoActivities.Filter(x => x.state.PartOfStateMachine.HasValue);
      def do_act = sm.GroupBy(x => x.state.PartOfStateMachine.Value.SubMachineType);
      foreach (group in do_act)
      {
        foreach (st in group.GroupBy(x => x.state.name))
        {
          def (need, not) = st.NToList().Partition(x => x.need_completion);
          def st = FsmState(st.Key, this, StateType.State());
          if (need.Length > not.Length)
          {
            need.Iter(x => x.state = st);
          } else
          {
            not.Iter(x => x.state = st)
          }
        }
      }
    }
    
    public Analyse() : void
    {
      try
      {
        CheckParseErrors();
        CreateStateMap();
        CheckTransitions();
        CheckInitialTransitions();
        CheckPseudoStates();
        CreateTransitions();
        CreateActiveStates();
        BreakIfError();
        CreateTransitionPaths();
        CheckActivities();
        CreateHistoryPaths(); // create history paths
        CreateConcurrentRegion();
        FinalizeAnalyse();
      }
      catch 
      {
        | x is FsmErrorException => 
          def err = x.error;
          when (err != null) AddError(err);
      }
    }

  }
}
