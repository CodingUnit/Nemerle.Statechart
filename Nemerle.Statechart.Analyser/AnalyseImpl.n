using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using FsmState;
  using PseudoStateNode;
  
  public interface IdObject
  {
    Num : int {get;}
  }
  
  [Record]
  public variant FsmError
  {
    | Sequence {seq : IEnumerable[FsmError];}
    //| UnknownState {state : FsmState;name : FsmState;tran : StateTransition;}
    | StateNotFound {state : FsmState;}
    | SeveralState {states : IEnumerable[FsmState];}
    | DuplicateTransition {tran : IEnumerable[StateTransition];}
    | DuplicateHistory {state : FsmState;history : StateHistory;}
    | RegionMustContainInitial {reg : ConcurrentRegion;tran : StateTransition;}
    | SubRegionsMustContainInitial {reg : IEnumerable[ConcurrentSubRegion];tran : StateTransition;}
    | UnknownTerminateTransition {node : StateTransition;}
    | ForkMustGoToRegion {fork : PseudoStateNode.Fork;}
    | ForkMustGoToSeparateRegion {fork : Fork;}
    | UnknownNode {tran : StateTransition;}
    | JoinTransitionMustHaveSameTrigger {join : Join;tran : IEnumerable[StateTransition];}
    | JoinTransitionMustLeaveRegion {join : Join;tran : IEnumerable[StateTransition];}
    | TransitionCrossOrthogonalBoundaryOfSameRegion {tran : StateTransition;}
    | DefaultTransitionMustGoToState {tran : StateTransition;history : StateHistory;}
    | JunctionElseMustBeLast {junction : PseudoStateNode.Junction;}
    | JunctionElseMustAfterAnotherGuard {junction : PseudoStateNode.Junction;}
    | EmptyJunction {junction : PseudoStateNode.Junction;}
    | JunctionActionMaybeLast {junction : PseudoStateNode.Junction;action : list[Actions];}
    | ChoiceElseMustBeLast {choice : PseudoStateNode.Junction;}
    | ChoiceElseMustAfterAnotherGuard {junction : PseudoStateNode.Junction;}
    | EmptyChoice {junction : PseudoStateNode.Junction;}
    | ChoiceActionMaybeLast {junction : PseudoStateNode.Junction;action : list[Actions];}
    | SubMachineStateNotFound {fsm : FsmState.SubMachine;state : string;}
    | UnknownTarget {tran : StateTransition; target : TransitionTarget;}
  }

  [Record]
  public variant FsmWarning
  {
    | HistoryNotUsed {hist : StateHistory;}
    | StateNotUsed {state : FsmState;}
    | TransitionNotUsed {tran : StateTransition;}
    | TransitionOverriden {tran : StateTransition;by : StateTransition;}
    | RegionNotUsed {regions : FsmState.ConcurrentRegion;}
    | NoConcurrentActivity {act : StateAction.Do;}
  }

  public variant ParseError
  {
    | DuplicateActivity {node : StateNode.DoActivity;}
    | UnknownElement {node : StateNode;}
    | UnknownMachineFlag {flag : string;}
  }
  
  [Record]
  class FsmErrorException : Exception
  {
    public error : FsmError;
    
    public this() {}
  }
  
  
}
