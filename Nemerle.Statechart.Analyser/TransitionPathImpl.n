using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{

  using PathNode;
  using ListUtils;
  /// <summary>
  /// Description of TransitionPathImpl.
  /// </summary>
  public partial class TransitionPath
  {
    public static FindPath(src_st : FsmState,
                          dest_st : FsmState,
                          exit : IEnumerable[FsmState],
                          entry : IEnumerable[FsmState]) : IEnumerable[FsmState] * IEnumerable[FsmState]
    {
      def src = src_st.super_states;
      def dest = dest_st.super_states;
      def (ex, en) = src.RemoveDupFirst(dest, (x, y) => x == y : object);
      (exit.Concat(ex.Reverse()), en.Concat(entry))
    }

    //* 1. The source and target are the same (self-transition).
                //* -2. The target is a substate of the source. (local or external?)
                //* -3. The source is a substate of the target. (local or external?)
                //* 4. The source and target share the same superstate.
                //* 5. All other cases.
                //*     a. The source and target reside at the save level in the
                //*        hiearchy (but do not share the same superstate).
                //*     b. The source is lower in the hiearchy than the target.
                //*     c. The target is lower in the hierarchy than the source.
                //*
                //* Case 1: Immediately performs the transition.
                //*
                //* Case 2: Traverses the hierarchy from the source to the target,
                //*         entering each state along the way. No states are exited.
                //*
                //* Case 3: Traverses the hierarchy from the source to the target,
                //*         exiting each state along the way. The target is then
                //*         entered.
                //*
                //* Case 4: The source is exited and the target entered.
                //*
                //* Case 5: Traverses the hiearchy until a common superstate is met.

    
    static FindLCA(st : FsmState, dest_st : FsmState) : FsmState//IEnumerable[FsmState] * IEnumerable[FsmState]
    {
      //def super = dest_st.Super;
      //def dest = if (super != null) super else dest_st;
      //FindPath(st.Super, dest, TraverseUtils.SingleElement(st), TraverseUtils.SingleElement(dest_st))
      //FindPath(st.Super, dest, TraverseUtils.SingleElement(st), TraverseUtils.SingleElement(dest_st))
      
       def super1 = st.super_states;
       def super2 = dest_st.super_states;
       match (super1.ZipLazy(super2).Find((x, y) => x == y : object))
       {
         | Some((st, _)) => st
         | _             => null
       }
    }

    //static FindPath(st : FsmState, dest_st : FsmState) : IEnumerable[FsmState] * IEnumerable[FsmState]
    //{
    //  //def super = dest_st.Super;
    //  //def dest = if (super != null) super else dest_st;
    //  //FindPath(st.Super, dest_st, TraverseUtils.SingleElement(st), TraverseUtils.SingleElement(dest_st))
    //  //FindPath(st.Super, dest, TraverseUtils.SingleElement(st), TraverseUtils.SingleElement(dest_st))
    //}
    
    static AddAction(nodes : IEnumerable[PathNode], act : option[Actions]) : IEnumerable[PathNode]
    {
      | (n, Some(act))  => n.Append(Action(act))
      | (n, _)          => n
    }

    static EntryNodeCreate(nodes : IEnumerable[FsmState]) : list[PathNode]
    {
      def entering_state(st, a)
      {
        match (st)
        {
          | FsmState(do_activity = do_act, entry = en) => 
          def act = Actions(st.entry.SelectMany(_.actions).NToList());
          def inl = do_act.Map(x => (RunDoActivity(x, st), true));
          if (!en.IsEmpty() || !inl.IsEmpty()) Entry(act, inl, st) :: a else a
        }
      }


      nodes.FoldBack([], entering_state)
    }

    static GetExitNode(st : FsmState) : PathNode
    {
      def do_act = st.do_activity.Map(StopDoActivity(_, st));
      def inline = if (st.history.HasValue) SaveHistory(st.history.Value) :: do_act; else do_act;
      def inline = inline.Map(x => (x, false));
      def act = Actions(st.exit.SelectMany(_.actions).NToList());
      if (!st.exit.IsEmpty() || !inline.IsEmpty()) Exit(act, inline, st) else Empty()
    }

    public ExitNodeCreate(nodes : IEnumerable[FsmState]) : list[PathNode]
    {

      def exiting_state(st : FsmState, a)
      {
        match (st.type)
        {
          | StateType.Region => def exit = st.exit;
            def get_source()
            {
              match (transition.To)
              {
                | TransitionTarget.PseudoState(node = Join(region = reg, joined_tran = jtran)) => 
                    def src = jtran.Map(x => x.Source);
                    match (jtran.Last().FromRegion, transition.FromRegion)
                    {
                      | (Some(a), Some(b)) when (a : object == b) => (reg, src, true) 
                      | _                                         => (reg, src, false)
                    }
                | _ => (null, [transition.Source], true)
              }
            }

            def (reg, src, last) = get_source();
            def src = if (st.sub_states.Exists(src.Contains)) src else [nodes.First()];
            def regs = st.RegionsExcept(src);

            def node = if (last || st : object != reg) if (regs.Equals(st.sub_states)) RegionExit(Enumerable.Empty(), st) else RegionExit(regs, st); else Empty();

            if (exit.IsEmpty()) 
            {
              node :: a
            } else 
            {
              match (GetExitNode(st))
              {
                | Empty => node :: a
                | p     => node :: p :: a
              }
            }

          | _ => match (GetExitNode(st))
              {
                | Empty => a
                | x     => x :: a
              }
        }
      }

      nodes.FoldBack([], exiting_state)
    }

    public static ExitNodeCreate(src : FsmState, nodes : IEnumerable[FsmState]) : IEnumerable[PathNode]
    {
      def exiting_state(st)
      {
        
          | FsmState(type = StateType.Region, exit = e)  => 
            def regs = st.RegionsExcept(src);
            def node = RegionExit(regs, st);
            if (e.IsEmpty()) TraverseUtils.SingleElement(node) else TraverseUtils.DoubleElement(GetExitNode(st), node)

          | _ => TraverseUtils.SingleElement(GetExitNode(st))
      }

      nodes.SelectMany(exiting_state)
    }

    NodesCreate(ex : IEnumerable[FsmState], tran : StateTransition) : IEnumerable[PathNode]
    {
      def (exit, en) = TraverseTransitionPath(tran);
      def ex = ex.Concat(exit);
      
      def node = ExitNodeCreate(ex); // create nodes for exit exit actions
      def node = AddAction(node, tran.action); // add transition action
      def entry_nodes = EntryNodeCreate(en); // create nodes for entry exit actions
      node.Concat(entry_nodes) // merge together
    }

    //NodesCreate(ex : IEnumerable[FsmState], en : IEnumerable[FsmState]) : IEnumerable[PathNode]
    //{
    //  def node        = ExitNodeCreate(ex); // create nodes for exit exit actions
    //  def entry_nodes = EntryNodeCreate(en); // create nodes for entry exit actions
    //  node.Concat(entry_nodes) // merge together
    //}

    TraverseTransitionPath(tran : StateTransition) : IEnumerable[FsmState] * IEnumerable[FsmState]
    {
      match (tran)
      {
        // initial и pseudo is local transitions by default
        | Initial(AtLeastStaticTo = st, From = from)
        | History(From = from, ToState = st)
        // fork transition
        | Transition(From = from, Local = true, AtLeastStaticTo = st)
        | Default(ToState = st, From = from)            => def (ex, en) = FindPath(from, st, [], []);
                                                           def en = en.ChopLast(); // remove entry in state
                                                           def en = en.Append(st); // add entry to target state
                                                           (ex, en)
      // transition to pseudo state
        | Transition(To = PseudoState(node = PseudoStateNode(state = st)), From = from)
        | Transition(AtLeastStaticTo = st, From = from) => def (ex, en) = FindPath(from, st, [], []);
                                                           (ex, en.Append(st))
        | Internal  // no path for internal transition
        | _        => (Enumerable.Empty(), Enumerable.Empty())
      }
    }

    DefExitPath(src : FsmState, dest : FsmState) : void
    {
      def ex = FindPath(src, dest, Enumerable.Empty(), Enumerable.Empty())[0];
      AddNode(ExitNodeCreate(ex))
    }

    //DefPath(src : FsmState, dest : FsmState, local : bool = true, skip : FsmState = null) : void
    //{
    //  def node = GetPath(src, dest, local, skip);
    //  AddNode(node)
    //}

    //GetPath(src : FsmState, dest : FsmState, local : bool = true, skip : FsmState = null) : IEnumerable[PathNode]
    //{
    //  if (src == null || dest == null) Enumerable.Empty() else
    //  {
    //    def (ex, en) = if (local) FindPath(src, dest, Enumerable.Empty(), Enumerable.Empty()) else FindLCA(src, dest);
    //    def ex = if (ex.IsEmpty()) ex else 
    //               if (skip != null && ex.First() == skip : object) ex.Skip(1) else ex;
    //    NodesCreate(ex, en)
    //  }
    //}

    DefPath(src : FsmState, dest : FsmState, tr : StateTransition, ex_node : IEnumerable[PathNode] = null) : void
    {
      def ex = match (tr)
      {
        | StateTransition.Transition => FindPath(src, dest, [src], [dest])[0];
        | _                          => FindPath(src, dest, [], [])[0];
      }
      
      def node = NodesCreate(ex, tr);
      def node = if (ex_node != null) ex_node + node else node;
      AddNode(node)
    }

  }
}
