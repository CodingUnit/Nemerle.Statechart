using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  using ListUtils;
  using PseudoStateNode;
  using GuardNode;

/// <summary>
/// Description of DecisionNodeImpl.
/// </summary>
  public partial variant DecisionNode
  {
    public static create_decision_tree(n : TransitionTarget.JunctionNode) : DecisionNode
    {
      def create_target(n : TransitionTarget)
      {
        DecisionNode.Target(n, [])
      }

      def create_junction(n, a)
      {
        match (n)
        {
          | TransitionTarget.PseudoState(PseudoStateNode.Junction(type = t)) => a.ChangeType(t)
          | _                                                                => null
        }
      }

      def create_merge(_, a)
      {
        a
      }

      def create_junction_node(n, toacc, nacc)
      {
        match (n)
        {
          | TransitionTarget.JunctionNode(guard = g, action = a, parent = p) => DecisionNode.Condition(g, a.ToList(), toacc, nacc, p)
        }
      }

      n.Fold(null, 
             create_junction_node,
             create_target,
             (_, a) => a,
             create_target,
             create_target,
             create_target,
             create_junction,
             create_merge,
             create_target,
             create_target)

    }

    public static create_junc_tree_node(an : FsmAnalyser, n : TransitionTarget.JunctionNode) : DecisionNode
    {

      def check_node_decision(n : DecisionNode)
      {
        | DecisionNode.Condition(condition = Else, parent = PseudoStateNode.Junction(type = JunctionType.Junction) as p, else_node = Some) => 
            an.AddError(FsmError.JunctionElseMustBeLast(p))

        | Condition(condition = Empty, actions = [], parent = PseudoStateNode.Junction(type = JunctionType.Junction) as p) => 
            an.AddError(FsmError.EmptyJunction(p))

        | Condition(condition = GuardNode.Empty, actions = _ :: _ as a, parent = Junction(type = JunctionType.Junction) as p, else_node = Some) => 
            an.AddError(FsmError.JunctionActionMaybeLast(p, a))

        | Condition(Empty, _, Some, PseudoStateNode.Junction(type = t) as p)
        //| Condition(body = DecisionNode.Condition(GuardNode.Empty, _, _, PseudoStateNode.Junction(type = t) as p)) 
        | Condition(body = DecisionNode.Condition(Else, _, _, PseudoStateNode.Junction(type = t) as p)) => 
            an.AddError(if (t == JunctionType.Junction) FsmError.JunctionElseMustAfterAnotherGuard(p) else FsmError.ChoiceElseMustAfterAnotherGuard(p))

        | _ => ()
      }

      def add_act(x, a)
      {
        x.ChangeActions(a.Concat(x.actions).NToList())
      }

      def create_actions(n)
      {
        | DecisionNode.Condition(actions = a, body = b, else_node = Some(els), type = JunctionType.Junction) as n => 
            def body = add_act(b, a);
            def els  = add_act(els, a);
            n.ChangeBodyActionsElseNode(body, [], Some(els))

        | DecisionNode.Condition(actions = a, body = b, else_node = None, type = JunctionType.Junction) as n => 
            def body = add_act(b, a);
            n.ChangeBodyActions(body, [])

        | _ => null
      }

      def merge_tree_node(n, b, e)
      {
        | (DecisionNode.Condition(condition = GuardNode.Else, actions = []), b, None)                         => b
        | (Condition(actions = act) as n, DecisionNode.Condition(actions = a, body = b, else_node = None), e) => 
            n.ChangeBodyActionsElseNode(b, act.Concat(a).NToList(), e)

        | (Condition as n, _, _)                                                                              => n.ChangeBodyElseNode(b, e)
      }

      def merge_tree_target(n)
      {
        n
      }

      def update_nodes(n, _, old, newn)
      {
        match (old.IndexOf(n))
        {
          | -1 => throw InvalidOperationException("invalid decision tree")
          | n  => newn[n]
        }
      }

      def tree  = create_decision_tree(n); // create decision tree
      def tree  = tree.Reduce(true, merge_tree_node, merge_tree_target); // merge tree nodes
      def old_nodes = tree.LevelOrderIterator();
      old_nodes.Iter(check_node_decision);
      def new_nodes = tree.LevelOrderMap(create_actions).ToArray();
      tree.ReduceSingle(update_nodes(_, _, old_nodes, new_nodes))
    }

        #if 0 

        static create_choice_tree_node(an : FsmAnalyser, n : TransitionTarget.JunctionNode, els : DecisionNode) : DecisionNode
        {

            def get_sub_node(t, lev, st, prevst, els) : DecisionNode
            {
                match (t)
                {
            // TODO: разобраться с prevst
                    | TransitionTarget.PseudoState(Junction(to = n, state = st, type = JunctionType.Junction)) => 
            def _ = st ?? prevst;
                //def st = nst ?? j.state =. st;
            create_junc_tree_node(an, n, els)

                    | PseudoState(Junction(to = n, state = st, type = JunctionType.Choice)) => 
            def prevst = st ?? prevst;
                //def st = nst ?? c.state =. st;
            create_choice_tree_node(an, n, lev + 1, st, prevst, els)

                    | PseudoState(Merge(to = TransitionTarget.JunctionNode(g, a, t, _, _, _, _), state = st)) => 
            def prevst = st ?? prevst;
                //def st = nst ?? m.state =. st;
            def n = get_sub_node(t, lev + 1, st, prevst, els);
            DecisionNode.Condition(st, a %:: [], prevst, Enumerable.Empty(), Enumerable.Empty(), g, n, null)

                    | _ => Target(st, [], prevst, Enumerable.Empty(), Enumerable.Empty(), t, null)
                }
            }


            match (n)
            {
                | JunctionNode(guard = Else, parent = Junction(type = JunctionType.Choice) as p, next = Some()) => 
            an.AddError(FsmError.ChoiceElseMustBeLast(p));
            null

                | JunctionNode(Else, _, t, Junction(type = JunctionType.Choice) as p, None(), _, _) as j => 

            def n = p.Nodes.FilterLazy(_ == j);
            // if same node not contains other previous decision node
            if (!n.Exists(contains_decision)) 
            {
            an.AddError(FsmError.ChoiceElseMustAfterAnotherGuard(p));
            null 
            } else
            {
            //def a = a %:: [];
            def node = get_sub_node(t, lev, st, prevst, els);
                // if new node is in another state
            if (st != node.state)
            {
                                        // cache it, process path before, traverse it with new values of state
                def prevst = st;
                def st = node.state;
                get_sub_node(t, lev, st, prevst, els)
            } else node;
            }

            // if no guards or actions there is error
                | JunctionNode(GuardNode.Empty, None(), _, Junction(type = JunctionType.Choice) as p, _, _, _) => 
            an.AddError(FsmError.EmptyChoice(p));
            null

                | JunctionNode(GuardNode.Empty, None(), t, _, None(), _, _) => 
                        get_sub_node(t, lev, st, prevst, els)
            // if single action node and not decision, taking sub node collecting action
                | JunctionNode(GuardNode.Empty, Some(), t, Junction(type = JunctionType.Choice), None(), _, _)  => 
                        get_sub_node(t, lev, st, prevst, els)
            // if last action node it is else
                | JunctionNode(GuardNode.Empty, Some, t, _, None(), _, _) =>
            def node = get_sub_node(t, lev, st, prevst, els);
                                    // if another pseudostate state 
            if (st != node.state)
            {
            def prevst = st;
            def st = node.state;
                                        // cache it, process path before, traverse it with new values of state
            get_sub_node(t, lev, st, prevst, els)
            } else node;
            //def st = if (st != prevst) st else null;
            //def prevst = prevst ?? (t.transition?.From ?? st);
            //(Else(lev, st, [a], prevst, PathNode.Empty(), PathNode.Empty(), node), err)

            // if action have other nodes after it
                | JunctionNode(GuardNode.Empty, Some(a), _, Junction(type = JunctionType.Choice) as p, _ ,_, _) => 
        an.AddError(FsmError.ChoiceActionMaybeLast(p, a));
        null

                | JunctionNode(guard = GuardNode.Empty) => null
                | JunctionNode(g, a, t, _, Some(n), _, _) => 
            def a = a %:: [];
            def st = if (st != prevst) st else null;
            def prevst = prevst ?? (t.transition?.From ?? st);
            def n = create_choice_tree_node(an, n, lev, st, prevst, els);
            def node = get_sub_node(t, lev, st, prevst, els);
            Condition(st, a, prevst, Enumerable.Empty(), Enumerable.Empty(), g, node, n.OptionFromObj())

                | _ => null
            }
        }
#endif

    public static Create(an : FsmAnalyser, node : PseudoStateNode.Junction) : DecisionNode
    {
      create_junc_tree_node(an, node.to)
    }

  }
}
