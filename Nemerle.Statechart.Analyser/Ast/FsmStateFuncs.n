using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of FsmStateFuncs.
  /// </summary>
  public partial class FsmState
  {

    public IsOrthogonal : bool
    {
      get
      {
        type is StateType.Region
      }
    }

    public IsComposite : bool
    {
      get
      {
        !IsSimple
      }
    }

    public IsFinal : bool
    {
      get
      {
        type is StateType.Final
      }
    }

    public IsTopState : bool
    {
      get
      {	  
        Super == null
      }
    }

    public SubRegions : IEnumerable[FsmState]
    {
      get
      {
        if (type is StateType.Region) sub_states else Enumerable.Empty()
      }
    }



    /// <summary>
    /// Is it Lived state, consider on nesting lived states
    /// </summary>
    public LivedNested : bool
    {
      get
      {
        Lived || !AllLivedSubStates.IsEmpty()
      }
    }

    /// <summary>
    /// Direct lived substates with consider of nesting state life
    /// </summary>
    public LivedSubStatesNested : IEnumerable[FsmState]
    {
      get
      {
        sub_states.Where(x => x.LivedNested)
      }
    }

    /// <summary>
    /// All Lived substates with consider of nesting state life on all nesting levels
    /// </summary>
    public AllLivedSubStatesNested : IEnumerable[FsmState]
    {
      get
      {
        //GetBreadthFirstEnumerable().Where(_.LivedNested)
        AllStates.Where(_.Lived)
      }
        //sub_states.Filter(_.LivedNested) + (sub_states |>< AllLivedSubStatesNested)
    }

    /// <summary>
    /// Direct lived sub states without consider of living nesting states of this substates
    /// </summary>
    public LivedSubStates : IEnumerable[FsmState]
    {
      get
      {
        sub_states.Where(_.Lived)
      }
    }

    public AllPseudo : IEnumerable[PseudoStateNode]
    {
      get
      {
        AllStates.SelectMany(x => x.pseudo_states)
      }
    }
      /// <summary>
    /// All sub states at all nesting levels
    /// </summary>
    public AllSubStates : IEnumerable[FsmState]
    {
      get
      {
        AllStates.Skip(1)
      }
        //sub_states + (sub_states |>< AllSubStates)
    }

    /// <summary>
    /// All sub states include this at all nesting levels
    /// </summary>
    public AllStates : IEnumerable[FsmState]
    {
      get
      { // TODO: caching of iterators
        GetBreadthFirstEnumerable()
      }
    }


    /// <summary>
    /// All lived sub states
    /// </summary>
    public AllLivedSubStates : IEnumerable[FsmState]
    {
      get
      {
        AllSubStates.Where(x => x.Lived)
      }
    }

    public DefineInitial(st : FsmState) : void
    {
      def init = StateTransition.Initial(this, st);
      transitions = transitions.Append(init).NToList();
      //node.Update(x => x.ChangeInitial(tran :: x.initial))
    }



    /// <summary>
    /// Sub states included in the history of this state
    /// </summary>
    public SubStatesParticipateInHistory : IEnumerable[FsmState]
    {
      get
      {
        history.Value.SelectMany(_.SubStatesParticipateIn)
      }
    }

    public history : TwoOption[PseudoStateNode.History]
    {
      get 
      {
        def hist = pseudo_states.FilterType();//FoldLeft([], (x, a) => if (x.Value is PseudoStateNode.History) x :: a else a);
        //def hist = hist.NToList();
        TwoOption.FromList(hist)
      }
    }



    public PartOfRegion : option[FsmState]
    {
      get
      {
        SuperStatesInclude.Find(x => x.type is StateType.Region)
      }
    }

    public PartOfSubRegion : option[FsmState]
    {
      get
      {

        SuperStatesInclude.Find(x => x.type is StateType.SubRegion)
      }
    }

    ///// <summary>
    ///// History pseudo-states in which participate this state
    ///// </summary>
    public ParticipateInHistory : IEnumerable[PseudoStateNode.History]
    {
      get
      {
        analyser.HistoryStates.Where(x => x.SubStatesParticipateIn.Contains(this))
      }
    }

    //public SuperStatesFromTop : IEnumerable[FsmState]
    //{
    //  get
    //  {
    //    Enumerable.Reverse(SuperStates)
    //  }
    //}

    //public SuperStatesFromTopInclude : IEnumerable[FsmState]
    //{
    //  get
    //  {
    //    SuperStatesFromTop.Append(this)
    //  }
    //}    

    public HaveFinal : bool
    {
      get
      {
        match (type)
        {
          | StateType.Region => sub_states.All(x => x.HaveFinal)
          | _                => sub_states.Exists(x => x.type is StateType.Final)
        }
      }
    }

    public FinalSubState : option[FsmState]
    {
      get
      {
        sub_states.Find(x => x.type is StateType.Final)
      }
    }

    public all_transitions_nested : IEnumerable[StateTransition]
    {
      get
      {
        AllStates.SelectMany(x => x.transitions)
      }
    }

    public UsedInGenerate : bool
    {
      get
      {
        Lived || !AllLivedSubStates.IsEmpty()
      }
    }


    //    /// <summary>
    ///// Transitions defined direct from this state
    ///// </summary>
    //public this_transitions : IEnumerable[StateTransition]
    //{
    //  node.AllTransitions().Where(x  => x.Parent == node : object)
    //}

    ////public IsSubStateOf(this node : FsmState, st : FsmState) : bool
    ////{
    ////  node.SuperStates().Exists(_ == st)
    ////}

    public Index : int
    {
      get
      {
        Super.sub_states.IndexOf(this)
      }
    }

              /// <summary>
          /// Indicates that maybe external transitions from some points of orthogonal state out of region not only completion
          /// </summary>
    public MayTakePlaceForcedTransitions : bool 
    {
      get
      {
        all_transitions_nested.Exists(x => x.OutOfRegion)
      }
    }

    public NeedHistorySave : bool
    {
      get
      {
      !ParticipateInHistory.IsEmpty()
      }
    }

    public static get_pattern(reg : IEnumerable[FsmState]) : string
    {
      def idx = reg.Select(x => x.Index).OrderBy(x => x).NToList();
      $<#..$(idx;"")#>
    }


    //public RegionExcept(this node : FsmState, st : IEnumerable[FsmState]) : FsmState
    //{
    //  match (node.SubRegions().Except(st))
    //  {
    //    | [sub]     => sub
    //    | head :: _ => head
    //    | _         => null
    //  }
    //}

    public RegionsExcept(st : IEnumerable[FsmState]) : IEnumerable[FsmState]
    {
      sub_states.Where(x => !x.AllSubStates.Exists(y => st.Exists(y : object == _)) && !st.Exists(_ == x : object))
    }

    public RegionsExcept(st : FsmState) : IEnumerable[FsmState]
    {
      sub_states.Where(x => !x.AllSubStates.Contains(st) && x : object != st)
    }

    public this_transitions : IEnumerable[StateTransition]
    {
      get
      {
        transitions.Where(x  => x.From == this)
      }
    }

    //public Joins : IEnumerable[PseudoStateNode]
    //{
    //  node.AllLivedSubStatesNested().SelectMany(x => x.AllTransitions().GetPseudo(_ is PseudoStateNode.Join))
    //}

    //public HaveJoinTransitions : bool
    //{
    //  !node.Joins().IsEmpty()
    //}

    //public Transitions : IEnumerable[StateTransition]
    //{
    //  node.AllTransitions()
    //}

    //public AllTransitions : IEnumerable[StateTransition]
    //{
    //  node.Data.statemap.Transitions[node]
    //}

    public initial_tran : list[StateTransition.Initial]
    {
      get
      {
        transitions.FilterType()
      }
    }

    public EventTransitions : IEnumerable[StateTransition]
    {
      get
      {
        transitions.Where(x => !(x is StateTransition.Initial))
      }
    }

    public ExternalTransitions : IEnumerable[StateTransition]
    {
      get
      {
        transitions.Where(x => x is StateTransition.Transition)
      }
    }

    //public initial_tran : option[StateTransition.Initial]
    //{
    //  get
    //  {
    //    transitions.FindType()
    //  }
    //}

    //public InternalTransitions : IEnumerable[StateTransition]
    //{
    //  node.AllTransitions().Where(x => x.Value is StateTransition.Internal)
    //}

    //public AddSubState(this st : FsmState, sub : FsmState) : void
    //{
    //  //st.analyser = Analyser;
    //  st.Add(sub)
    //  //if (sub_states.Exists(x => x.Num == st.Num)) this else ChangeSubStates(sub_states.Append(st).NToList())//sub_states = sub_states + [st];
    //}

    //public SetTransitions(tr : IEnumerable[StateTransition]) : void
    //{
    //  transitions = [];
    //  DefineTransitions(tr)
    //}

    public DefineTransitions(tr : IEnumerable[StateTransition]) : void
    {
      def create_copy(tr)
      {
        def tr = tr.Clone();
        tr.Source = this;
        //tr.From   = this;
        tr
      }

      def copy = tr.Map(create_copy);
      transitions = transitions.Concat(copy).NToList();
    //  //def (tran : IEnumerable[StateTransition.Transition], other)   = tr.PartitionType();
    //  //def (intern : IEnumerable[StateTransition.Internal], other)   = other.PartitionType();
    //  //def (init : IEnumerable[StateTransition.Initial], _)          = other.PartitionType();
    //  //def intern = internal_tran + intern.Select(_ : StateTransition);
    //  //def init = initial + init.Select(_ : StateTransition);
    //  //def tran = transitions + tran.Select(_ : StateTransition);
    //  //ChangeTransitionsInitialInternalTran(tran.NToList(), init.NToList(), intern.NToList())
    }

    public static Compare(comparer : StateTransition * StateTransition -> int) :  StateTransition *  StateTransition -> int
    {
      (x, y) => comparer(x, y)
    }

    public DeleteTransitions(tr : IEnumerable[StateTransition]) : void
    {
      transitions = transitions.Except(tr).NToList();
    }

    public DeleteEventTransitions() : void
    {
      transitions = transitions.Except(EventTransitions).NToList();
    }

    public Name : string
    {
      get
      {
        match (type)
        {
          | StateType.Final
          | State
          | Region
          | SubRegion                           => NativeName
          | SubMachine                          => $"SubMachine$name" // $(CopyName)
          | InlinedSubMachine                   => $"InlinedSubMachine$name" // $(CopyName)
        }
      }
    }

    public IsSimple : bool
    {
      get
      {
        sub_states.IsEmpty()
      }
    }

    /// <summary>
    /// Use both types of history in state
    /// </summary>
    public BothHistories : bool
    {
      get
      {
        history.IsTwo
      }
    }

    public UsedHistory : IEnumerable[PseudoStateNode.History]
    {
      get
      {
        history.Value.Where(x => analyser.Used[x])
      }
    }

    public Lived : bool
    {
      get
      {
        analyser.Used[this]
      }
      set
      {
        analyser.Used[this] = value
      }
    }

    //public static Lived(this st : FsmState) : bool
    //{
    //    st.Analyser().Used[st]
    //}

    //public LivedState : bool
    //{
    //  def an = node.Analyser();
    //  node.Lived() || an.Clones[node].Exists(x => x.Lived())
    //}

    //  //public GetFsmNode : GeneralTree[FsmNode]
    ////{
    ////  node.Value.statemap.GetNode(node)
    ////}

    ////public HaveFinalCompletion() : bool
    ////{
    ////  def st = SuperStatesInclude;
    ////  HaveFinal && st.Exists(x => !x.completion_transitions.IsEmpty())
    ////}


    ////public FinalStates : IEnumerable[FsmState]
    ////{
    ////    sub_regions.Select(x => x.FinalSubState.Value) else Enumerable.Empty()
    ////}

    /// <summary>
    /// Events for which reacts state or nested states
    /// </summary>
    public events_nested : IEnumerable[StateEvent]
    {
      get
      {
        def evts = AllLivedSubStates.SelectMany(x => x.Events);
        evts.Distinct()
      }
    }

    public PartOfRegionsOf(st : FsmState) : IEnumerable[FsmState]
    {
      SuperStatesInclude.NToList().FirstElems(_ == st : object).Where(x => x.type is StateType.Region)
    }

    public SuperStatesInclude : IEnumerable[FsmState]
    {
      get
      {
        Enumerable.Reverse(super_states.Append(this))
      }
    }

    //public PartOfStateMachine : option[FsmState]
    //{
    //  node.SuperStatesInclude().Find(x => x.Data is FsmState.InlinedSubMachine)
    //}

    ////public AllPseudo  : IEnumerable[PseudoStateNode]
    ////{
    ////    node.AllStates().SelectMany(_.ChildPseudo)
    ////}

    ////public AllHistory : IEnumerable[PseudoStateNode.History]
    ////{
    ////  get
    ////  {
    ////    AllSubStates.SelectMany(x => x.history.Value)
    ////  }
    ////}

    //public PartOfSubRegions : IEnumerable[FsmState]
    //{
    //    node.SuperStatesInclude().Where(x => x.Data is FsmState.ConcurrentSubRegion)
    //}

    ////public PartOfTopRegion : option[ConcurrentRegion]
    ////{
    ////  get
    ////  {
    ////    match (PartOfRegions)
    ////    {
    ////      | []  => None()
    ////      | lst => Some(lst.Last())
    ////    }
    ////  }
    ////}

    ////public PartOfRegion : option[ConcurrentRegion]
    ////{
    ////  get
    ////  {
    ////    SuperStatesInclude.FindType()
    ////  }
    ////}

    ////public PartOfRegions : IEnumerable[ConcurrentRegion]
    ////{
    ////  get
    ////  {
    ////    SuperStatesInclude.FilterType()
    ////  }
    ////}    
    public TraverseTransitions() : void
    {
      paths = TransitionPaths(this);
      paths.TraverseTransitions(true);
      //UpdateTransitions(trans).ChangePaths(paths)
    }


    //public HierarchyPos : int
    //{
    //  if (node.Data.calc_hierarchy_pos != -1) node.Data.calc_hierarchy_pos else node.Height
    //}



    public OriginalName : string
    {
      get
      {
        match (type)
        {
          | Final               => $"$(Super)Final"
          | SubRegion           => $"$(Super)SubRegion$Index"
          | _                   => $"$(name)"
        }
      }
    }

    public NativeName : string
    {
      get
      {
        $"$(OriginalName)$(CopyName)"
      }
    }

    public GetHistory(h : PseudoStateNode.History) : PseudoStateNode
    {	  
      match (history, h.type)
      {
        | (One(h), _)                                           => h
        | (Two(PseudoStateNode.History(type = t1) as f, s), t)  => if (t1 == t) f else s
        | _                                                     => null
      }
    }

    [Memoized(transitions)]
    public CompletionTransitions : IEnumerable[StateTransition]
    {
      get
      {
        transitions.Where(x => x.IsCompletion)
      }
    }

    public join_completion_transitions : IEnumerable[StateTransition]
    {
      get
      {
        CompletionTransitions.Where(x => x.To is TransitionTarget.PseudoState(PseudoStateNode.Join))
      }
    }

    public HistoryPaths : list[HistoryPath]
    {
    //  ublic HistoryPaths : IEnumerable[string * HistoryPath] // paths from outer history
    //{
    //  get
    //  {
    //    def shist = SuperStates.Where(x => x.ParticipateInHistory.Exists(x => x.type == HistoryType.Shallow));
    //    def spaths = shist.SelectMany(_.HistoryPaths);
    //    def paths = ParticipateInHistory.Select(x => (x.state.name, HistoryPath(x.state, this, x).CreatePath()));
    //    paths.Concat(spaths)
    //  }
    //}
      //node.ParticipateInHistory().Select(x => (x.Parent, HistoryPath(x.Parent, node, x)).CreatePath());
      get
      {
        def hist = analyser.HistoryPaths;
        if (hist != null && hist.ContainsKey(this))
        {
          hist[this]
        } else null
      }
    }

    public HaveHistoryPaths : bool
    {
      get
      {
        HistoryPaths != null
      }
      //node.Analyser().HistoryPaths != null && HistoryPaths[node] HistoryPaths[node].IsEmpty()
    }


    /// <summary>
    /// Work transitions
    /// </summary>
    public WorkTransitions : IEnumerable[StateTransition]
    {
      get
      {

        EventTransitions.Where(_.Used)
            //__.Exclude(_.CrossFor);
            //__.Exclude(_.NotWork);
            //__.Where(_.UsedInGenerate)
      }
    }

        /// <summary>
    /// Events for which reacts state
    /// </summary>
    public Events : IEnumerable[StateEvent]
    {
      get
      {
        WorkTransitions.Select(x => x.Trigger).Distinct()
      }
    }

    public region_exit_path : IEnumerable[PathNode]
    {
      get
      {
        match (PartOfRegion)
        {
          | Some(r) => def (exit, _) = TransitionPath.FindPath(this, r, Enumerable.Empty(), Enumerable.Empty()); // exit state nested in region
                      TransitionPath.ExitNodeCreate(this, exit); // create exit state node

          | _       => Enumerable.Empty()
        }
      }
    }

              /// <summary>
          /// Indicates that maybe transitions from outer states forking control to this orthogonal region
          /// </summary>
    public MayForkingFromOut : bool 
    {
      get
      {
        def is_this(r)
        {
          | null => false
          | _    => match (r.PartOfRegion)
              {
                | Some(r) when (r : object == this) => true
                | _                                 => false
              }
        }

        analyser.forks.Exists(x => x.target.Exists(x => is_this(x.ToState)))
      }
    }

    public ConflictTransitions : IEnumerable[IEnumerable[StateTransition]]
    {
      get
      {
        //def trans = EventTransitions; // get the super states transitions and concatinate with current
        //def parent_trans = parent_trans.Select(x => (x.Value.FriendlyTriggerName, x)); // get with trigger names
        def by_trigger   = transitions.GroupBy(x => x.FriendlyTriggerName);
        by_trigger.Where(x => x.IsMoreThanOne());
      }
    }
    //   public NCopy : int
    //    {
    //      node.Analyser().Clones[node].Length
    //    }

  }





}

