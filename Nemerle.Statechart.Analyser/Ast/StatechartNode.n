using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using FsmState;

  [Record]  
  public class StateEvent
  {
    [Accessor] evt : TransitionNode.Event;
    //public InternalOnly : bool {get;set;}

    public Name : string
    {
      get
      {
        if (evt.name != null) evt.name else "Completion"
      }
    }

    public CompareTo(b : StateEvent) : int
    {
      Name.CompareTo(b.Name)
    }

    public static  @== (a : StateEvent, b : StateEvent) : bool
    {
      a.Name == b.Name
    }

    public IsCompletion : bool
    {
      get
      {
        evt.name == null
      }
    }

    public override ToString() : string
    {
      $"Event$Name"
    }
  }

  [Record]
  public variant StateHistory
  {
    | Shallow
    | Deep
    
    public this(st : FsmState,  hist : StateNode.History, reference : bool = false)
    {
      this(st.analyser);
      history = hist;
      state = if (hist.state != null) FsmState.State(hist.state, null, analyser, true); else st;
      type = hist.type;
      this.reference = reference;
      default = history.default |> StateTransition.Default(state, this, _).Create();
    }

    public history : StateNode.History;
    
    [NeedChange]
    public default : option[StateTransition];
    
    [NeedChange(default)]
    [NeedChange] public state : FsmState;
    public type : HistoryType;
    [NeedChange(state)] [NeedChange] public reference : bool;

    [NeedChange] public Used : bool;

    public analyser : FsmAnalyser;
    
    public StateMap : StateMap
    {
      get
      {
        analyser.statemap
      }
    }
    
    public this(an : FsmAnalyser) { analyser = an }
    //public this(hist : StateHistory, clone : bool = false, ncopy : int = 0)
    //{
    //  history = hist.history;
    //  default = if (clone) hist.default.Map(x => x.Clone(ncopy) :> StateTransition.Default) else hist.default;
    //  state = hist.state;
    //  type = hist.type;
    //  reference = hist.reference;
    //  Used = hist.Used;
    //}

    public static Create(st : FsmState, hist : TwoOption[StateNode.History], href : bool = false) : TwoOption[StateHistory]
    {      
      hist.Map(Create(st, _, href))
    }

    public static Create(st : FsmState, hist : StateNode.History, href : bool = false) : StateHistory
    {
      match (hist)
      {
        | StateNode.History(type = HistoryType.Deep)    => StateHistory.Deep(st, hist, href)
        | StateNode.History(type = HistoryType.Shallow) => StateHistory.Shallow(st, hist, href)
        | _                                             => null
      }
    }

    //[Accessor] clone_for : StateHistory;

    public static  @==(a : StateHistory, b : StateHistory) : bool
    {
      | (null, null)  => true
      | (a, null)  => a : object  ==  null
      | (null, b)  => b : object  ==  null
      | (_, _)  => a.Name == b.Name && a.type == b.type && a.state == b.state
    }

    public static @!=(a : StateHistory, b : StateHistory) : bool
    {
       !(@==(a, b))
    }

    public BothHistories : bool
    {
      get
      {
        state.BothHistories
      }
    }

    public Name : string
    {
      get
      {
        def type = match (type)
                    {
                      | Deep     => "Deep"
                      | Shallow  => "Shallow"
                      | None     => ""
                    }

        if (state.Updated.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
      }
    }

    public SimpleName : string
    {
      get
      {
        $"$(state)History"
      }
    }

    public override ToString() : string
    {
      Name
    }

    public SubStatesParticipateInHistory : IEnumerable[FsmState]
    {
      get
      {
        state.Updated.SubStatesParticipateIn(this)
      }
    }

    public SubStatesParticipateInHistoryIndirect : IEnumerable[FsmState]
    {
      get
      {
        state.Updated.SubStatesParticipateIn(this)
      }
    }

    public Updated : StateHistory
    {
      get
      {
        state.Updated.GetHistory(this)
      }
    }
    
    public UpdateReference() : StateHistory
    {
      def st = StateMap.Get(state.Name);
      def hist = if (history.reference)
                  {
                    state.GetHistory(this);
                  } else this;

      def default = default.Map(_.UpdateReference());
      hist.ChangeStateDefault(st, default)
    }

  }

  [Record]    
  [DebuggerDisplay("Actions  =  {actions}")]
  public variant StateAction : Actions
  {
    | Entry
      {

        Name : string
        {
          get
          {
            $"$(state)Entry"
          }
        }

        flags : ActionFlags;

        override ToString() : string
        {
          Name
        }

      }
    | Exit
      {

        this(act : list[string], st : FsmState)
        {
          base(act, st);
          flags = ActionFlags.None;
        }

        Name : string
        {
          get
          {
            $"$(state)Exit"
          }
        }

        flags : ActionFlags;

        override ToString() : string
        {
          Name
        }
      }

    | Do 
      {
        [FlagAccessor (Concurrently,  NoWaitCancel, NotLong)]
        [NeedChange] public flags : ActivityFlag; // shows that we must run each action concurrently with others

        Name : string
        {
          get
          {
            $"DoActivity$(state)"
          }
        }

        override ToString() : string
        {
          Name
        }
      }       


    [NeedChange] public state : FsmState;
  }

}
