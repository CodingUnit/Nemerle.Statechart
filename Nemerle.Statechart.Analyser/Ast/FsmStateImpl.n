using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{
  using StateTransition;
  using PseudoStateNode;


  /// <summary>
  /// Description of FsmStateImpl.
  /// </summary>
  [Traversable]
  public partial variant FsmState
  {
    public override ToString() : string { Name }

    public virtual UpdateReference() : FsmState
    {
      //def super  = if (super_state != null) 
      //              {
      //                statemap.Get(super_state)
      //              } else super_state;
      //sub_states.Map(x => x.);
      //def super = if (super.AstName == null) super.ChangeName(TopStateName) else super;
      def init = initial.Map(_.UpdateReference());
      def tran = transitions.Map(_.UpdateReference());
      def int_tran = internal_tran.Map(_.UpdateReference());
      def hist   = history.Value.Map(_.UpdateReference());
      def pseudo = pseudo_states.Map(_.UpdateReference());
      ChangePseudoStatesHistoryInitialInternalTranTransitions(pseudo, TwoOption.FromList(hist), init, int_tran, tran)
    }

    //public FormatName() : void
    //{
    //  def name = name.SplitToList('.');
    //  this.name = name.Last();
    //}

    public DefineInitial(st : FsmState) : FsmState
    {
      def init = match (this)
                  {
                    | ConcurrentSubRegion(contained_in = r) => Initial(r, st).Create()
                    | _                                     => Initial(this, st).Create()
                  }
      ChangeInitial(TraverseUtils.SingleElement(init))
    }

    public AddSubState(st : FsmState) : FsmState
    {
      //st.analyser = Analyser;
      if (sub_states.Exists(x => x.Num == st.Num)) this else ChangeSubStates(sub_states.Append(st))//sub_states = sub_states + [st];
    }

    //public DefineTransition(tr : StateTransition) : void
    //{
    //  | Transition as tr => transitions ::= Transition(this, tr)
    //  | Internal   as tr => internal_tran ::= Internal(this, tr)
    //  | Initial    as tr => initial ::= tr
    //  | _ => ()
    //}

    //public SetCopy(ncopy : int) : FsmState
    //{
    //  def st = match (this)
    //           {
    //             | State               as st => State(st, false, ncopy)
    //             | ConcurrentRegion    as st => ConcurrentRegion(st, ncopy)
    //             | ConcurrentSubRegion as st => ConcurrentSubRegion(st, ncopy)
    //             | InlinedSubMachine   as st => InlinedSubMachine(st, ncopy)
    //             | SubMachine          as st => SubMachine(st, ncopy)
    //             | Final               as st => Final(st, false, ncopy)
    //           }

    //  //clones ::= st;
    //  st.ChangeCopyNumCloneFor(ncopy);
    //  //st.FindCopyName();
    //}

    //public clones : list[FsmState] = [];

    public DefineTransitions(tr : IEnumerable[StateTransition]) : FsmState
    {
      def (tran, other)   = tr.PartitionType();
      def (intern, other) = other.PartitionType();
      def (init, _)       = other.PartitionType();
      ChangeInternalTranInitialTransitions(internal_tran.Concat(intern), initial.Concat(init), transitions.Concat(tran))
          //  | Transition as tr => transitions ::= Transition(this, tr)
    //  | Internal   as tr => internal_tran ::= Internal(this, tr)
    //  | Initial    as tr => initial ::= tr

      //tr.Iter(DefineTransition)
    }

    //public DefineHistoryPath(st : string, nodes : HistoryPath) : void
    //{
    //  history_paths ::= (st, nodes)
    //}

    //public DefineHistoryPathRecurse(st : string, nodes : HistoryPath) : void
    //{
    //  def reg = this is ConcurrentRegion;
    //  when (Lived || reg) DefineHistoryPath(st, nodes);
    //  when (!reg) sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes))
    //}

    public Updated : FsmState
    {
      get
      {
        statemap[Num]
      }
    }
    
    public DeleteTransitions(tr : IEnumerable[StateTransition]) : FsmState
    {
      def (tran, other)     = tr.PartitionType();
      def (int_tran, other) = other.PartitionType();
      def (init, _)         = other.PartitionType();
      def initial           = initial.Exclude(init, (x, y : StateTransition.Initial) => x.Num == y.Num);
      def internal_tran     = internal_tran.Exclude(int_tran, (x, y : StateTransition.Internal) => x.Num == y.Num);
      def transitions       = transitions.Exclude(tran, (x, y : StateTransition.Transition) => x.Num == y.Num);
      ChangeInternalTranInitialTransitions(internal_tran, initial, transitions)
    }

    public UpdateTransitions(tr : IEnumerable[StateTransition]) : FsmState
    {
      def (tran, other)     = tr.PartitionType();
      def (int_tran, other) = other.PartitionType();
      def (init, _)         = other.PartitionType();

      def find(tr, trans)
      {
        match (trans.Find(x => x.Num == tr.Num))
        {
          | Some(tr) => tr
          | _        => tr
        }
      }

      def init = initial.Map(find(_, init));
      def tran = transitions.Map(find(_, tran));
      def int_tran = int_tran.Map(find(_, int_tran));
      ChangeInternalTranInitialTransitions(int_tran, init, tran)
    }
    //public DeleteTransitionsNested(tr : list[StateTransition]) : void
    //{
    //  DeleteTransitions(tr);
    //  AllSubStates.Iter(x => x.DeleteTransitionsNested(tr));
    //}

    public TraverseTargets(func : TransitionTarget -> TransitionTarget, manual_rebuild : bool = false) : FsmState
    {
      UpdateTransitions(all_transitions_with_init.Select(_.TargetTraverse(func, manual_rebuild)))
    }
    
    public TraverseTransitions() : FsmState
    {
      def paths = TransitionPaths(this);
      def (trans, paths) = paths.TraverseTransitions(true);
      UpdateTransitions(trans).ChangePaths(paths)
    }

    public this(an : FsmAnalyser)
    {
      analyser = an;
    }

    public this(super : FsmState, name : string, analyser : FsmAnalyser, reference : bool = false)
    {
      this(analyser);
      this.name = name;
      this.super_state = super;
      this.reference = reference;
      Num = statemap.GetNewStateId(this)
    }

    public this(st : StateNode.State, sub : IEnumerable[FsmState], analyser : FsmAnalyser, reference : bool = false)
    {
      this(analyser);
      state = st;
      name = st.name;
      this.reference = reference || state.reference;
      //def st_from_node(n)
      //{
      //  | StateNode.State(type = SubMachine) => SubMachine(n, this)
      //  | State(type = InlinedSubMachine)    => InlinedSubMachine(n, this)
      //  | _                                  => FsmState.State(n, this, false)
      //}
      
      
      when (!reference)
      {
        do_activity = st.do_activity |> StateAction.Do(_.action.ActionList, this, _.flags);
        internal_tran = Internal.Create(this, st.internal_tran);
        entry = st.entry |> StateAction.Entry(_.action.ActionList, this, _.attrib);
        exit = st.exit |> StateAction.Exit(_.action.ActionList, this, _.attrib);
        history = StateHistory.Create(this, st.history);
        transitions = Transition.Create(this, st.transitions);
        initial = st.initial.Select(Initial.Create(this, _));
        //def (regs, subst) = st.sub_states.Partition(x => x.regions.HasValue);
        //def regs = regs |> ConcurrentRegion(this, _, _.regions.Value); // TODO: сделать с помощью st_from_node
        //super_state = super;
        //def subst = (subst |> st_from_node(_)) + regs;
        //sub_states = subst.Sort((x, y) => x.source_pos - y.source_pos);
        sub_states = sub.Map(_.ChangeSuperState(this));
        pseudo_states = st.pseudo_states |> PseudoStateNode.Create(analyser, _.node, this, null)
      }
      Num = statemap.GetNewStateId(this)
    }

    public SetNewId() : FsmState
    {
      ChangeNum(statemap.GetNewStateId(this))
    }
    
    // copy constructor
    public this(st : FsmState)
    {
      name = st.name;
      analyser = st.analyser;
      do_activity = st.do_activity;
      internal_tran = st.internal_tran;
      entry = st.entry;
      exit = st.exit;
      history =  st.history.Map(_.ChangeState(this));
      transitions = st.transitions;
      initial = st.initial;
      super_state = st.super_state;
      sub_states = st.sub_states.Map(_.ChangeSuperState(this));
      pseudo_states = st.pseudo_states;
      Num = st.Num;
    }

    public HistoryPaths : IEnumerable[string * HistoryPath] // paths from outer history
    {
      get
      {
        //def reg = this is ConcurrentRegion;
        //when (Lived || reg) DefineHistoryPath(st, nodes);
        //when (!reg) sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes))
        def shist = SuperStates.Where(x => x.ParticipateInHistory.Exists(x => x.type == HistoryType.Shallow));
        def spaths = shist.FoldLeft(Enumerable.Empty(), (x, a) => a.Concat(x.HistoryPaths));
        def paths = ParticipateInHistory.Select(x => (x.state.name, HistoryPath(x.state, this, x).CreatePath()));
        paths.Concat(spaths)
      }
    }

    public PathFromOut : StateTransition
    {
      get
      {
        def path = StateTransition.Initial(analyser.TopState, this);
        path.TraversePath()
      }
    }

    ///// <summary>
    ///// Indicates what fsm lived in this state and it not only composite for others
    ///// </summary>
    //public Lived : bool 
    //{
    //  get
    //  {
    //    lived || clones.Exists(_.Lived)
    //  }
    //}

    public UsedInGenerate : bool
    {
      get
      {
        Lived || !AllLivedSubStates.IsEmpty()
      }
    }

    
    public hierarchy_pos : int
    {
      get
      {
        if (calc_hierarchy_pos != -1) calc_hierarchy_pos else SuperStates.Count()
      }
    }

    public source_pos : int
    {
      get
      {
        state.pos
      }
    }

    public IsTopState : bool
    {
      get
      {
        Num == statemap.TopNum
      }
    }

    CopyName : string
    {
      get
      {
        if (copy_num == 0) "" else $"$copy_num"
      }
    }

    public Name : string
    {
      get
      {
        match (this)
        {
          | Final                               => $"$(Super)Final$CopyName"
          | State
          | ConcurrentRegion
          | ConcurrentSubRegion                 => NativeName
          | SubMachine(name = n)                => $"SubMachine$n$CopyName"
          | InlinedSubMachine(name = n)         => $"InlinedSubMachine$n$CopyName"
          | InlinedSubMachineInstance(name = n) => $"InlinedSubMachineInstance$n$CopyName"
        }
      }
    }

    public OriginalName : string
    {
      get
      {
        match (this)
        {
          | ConcurrentSubRegion(index = idx, contained_in = r) => $"$(r)SubRegion$idx"
          | Final                                              => Name
          | _                                                  => if (name != null) name else AstName
        }
      }
    }

    public NativeName : string
    {
      get
      {
        $"$OriginalName$CopyName"
      }
    }

    public join_completion_transitions : IEnumerable[StateTransition]
    {
      get
      {
        completion_transitions.Where(x => x.To is TransitionTarget.PseudoState(Join()))
      }
    }

    public AstName : string
    {
      get
      {
        state.name
      }
    }

    /// <summary>
    /// Events for which reacts state
    /// </summary>
    public events : IEnumerable[StateEvent]
    {
      get
      {
        work_transitions.Select(_.Trigger).Distinct();
      }
    }

    /// <summary>
    /// Events for which reacts state or nested states
    /// </summary>
    public events_nested : IEnumerable[StateEvent]
    {
      get
      {
        def evts = AllLivedSubStates.FoldLeft(Enumerable.Empty(), (x, a) => a.Concat(x.events));
        evts.Distinct()
      }
    }

    public SuperStatesInclude : IEnumerable[FsmState]
    {
      get
      {
        SuperStates.AddBefore(this)
      }
    }

    public PartOfStateMachine : option[InlinedSubMachine]
    {
      get
      {
        SuperStatesInclude.FindType()
      }
    }

    public AllHistory : list[StateHistory]
    {
      get
      {
        AllSubStates.FoldLeft([], (x, a) => a.HeadAppend(x.history.Value))
      }
    }

    public PartOfSubRegion : option[ConcurrentSubRegion]
    {
      get
      {
        SuperStatesInclude.FindType()
      }
    }

    public PartOfSubRegions : IEnumerable[ConcurrentSubRegion]
    {
      get
      {
        SuperStatesInclude.FilterType()
      }
    }

    public PartOfTopRegion : option[ConcurrentRegion]
    {
      get
      {
        match (PartOfRegions)
        {
          | [] => None()
          | lst => Some(lst.Last())
        }
      }
    }

    public PartOfRegion : option[ConcurrentRegion]
    {
      get
      {
        SuperStatesInclude.FindType()
      }
    }

    public PartOfRegions : IEnumerable[ConcurrentRegion]
    {
      get
      {
        SuperStatesInclude.FilterType()
      }
    }

    public static NameComparer : FsmState * FsmState -> int = (x, y) => string.Compare(x.Name, y.Name);

    public PartOfRegionsOf(st : FsmState) : list[ConcurrentRegion]
    {
      SuperStatesInclude.NToList().FirstElems(_ == st).FilterType();
    }


    public GetChild() : IEnumerable[FsmState]
    {
      match (this)
      {
        | ConcurrentRegion(sub_regions = r) => r.Select(_ : FsmState)
        | _                                 => sub_states
      }
    }

    public Rebuild(child : IEnumerable[FsmState]) : FsmState
    {
      match (this)
      {
        | ConcurrentRegion as r => r.ChangeSubRegions(child.Select(_ :> FsmState.ConcurrentSubRegion))
        | _                     => ChangeSubStates(child)
      }
    }

    public UpdateHistory(hist : StateHistory) : FsmState
    {
      def hist = history.Map(x => if (x.type == hist.type) hist else x);
      ChangeHistory(hist)
    }
  }
}
