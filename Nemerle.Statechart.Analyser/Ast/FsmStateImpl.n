using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{
  using StateTransition;
  using PseudoStateNode;
  /// <summary>
  /// Description of FsmStateImpl.
  /// </summary>
  [Traversable]
  public partial variant FsmState
  {
    public override ToString() : string {Name}

    public virtual UpdateReference(sub : IEnumerable[FsmState],an : FsmAnalyser) : FsmState * FsmAnalyser
    {
      def map = an.statemap;
      def (super, an) = if (super_state != null) 
                        {
                           map.Get(super_state.Name, an)
                        } else (super_state, an);
      //def super = if (super.AstName == null) super.ChangeName(TopStateName) else super;
      def an = this.Initial.FoldLeft(an, _.UpdateReference(_));
      def an = transitions.FoldLeft(an, _.UpdateReference(_));
      def (hist, an) = history.Value.FoldList([], an, _.UpdateReference(_));
      def (pseudo, an) = pseudo_states.FoldList([], an, _.UpdateReference(_));
      def st = ChangePseudoStatesSubStatesHistorySuperStateAnalyser(pseudo, sub, TwoOption.FromList(hist), super, an);
      (st, an)
    }

    //public FormatName() : void
    //{
    //  def name = name.SplitToList('.');
    //  this.name = name.Last();
    //}

    public DefineInitial(st : FsmState) : FsmState
    {
      def init = match (this)
                  {
                    | ConcurrentSubRegion(contained_in = r) => Initial(r, st)
                    | _                                     => Initial(this, st)
                  }
      ChangeInitial(TraverseUtils.SingleElement(init))
    }

    public AddSubState(st : FsmState) : FsmState
    {
      //st.analyser = Analyser;
      if (sub_states.Exists(x => x.Name == st.Name)) this else ChangeSubStates(sub_states.Append(st))//sub_states = sub_states + [st];
    }

    //public DefineTransition(tr : StateTransition) : void
    //{
    //  | Transition as tr => transitions ::= Transition(this, tr)
    //  | Internal   as tr => internal_tran ::= Internal(this, tr)
    //  | Initial    as tr => initial ::= tr
    //  | _ => ()
    //}

    //public SetCopy(ncopy : int) : FsmState
    //{
    //  def st = match (this)
    //           {
    //             | State               as st => State(st, false, ncopy)
    //             | ConcurrentRegion    as st => ConcurrentRegion(st, ncopy)
    //             | ConcurrentSubRegion as st => ConcurrentSubRegion(st, ncopy)
    //             | InlinedSubMachine   as st => InlinedSubMachine(st, ncopy)
    //             | SubMachine          as st => SubMachine(st, ncopy)
    //             | Final               as st => Final(st, false, ncopy)
    //           }

    //  //clones ::= st;
    //  st.ChangeCopyNumCloneFor(ncopy);
    //  //st.FindCopyName();
    //}

    //public clones : list[FsmState] = [];

    public DefineTransitions(tr : IEnumerable[StateTransition]) : FsmState
    {
      def (tran, other)   = tr.PartitionType();
      def (intern, other) = other.PartitionType();
      def (init, _)       = other.PartitionType();
      ChangeInternalTranInitialTransitions(intern, init, tran)
          //  | Transition as tr => transitions ::= Transition(this, tr)
    //  | Internal   as tr => internal_tran ::= Internal(this, tr)
    //  | Initial    as tr => initial ::= tr

      //tr.Iter(DefineTransition)
    }

    //public DefineHistoryPath(st : string, nodes : HistoryPath) : void
    //{
    //  history_paths ::= (st, nodes)
    //}

    //public DefineHistoryPathRecurse(st : string, nodes : HistoryPath) : void
    //{
    //  def reg = this is ConcurrentRegion;
    //  when (Lived || reg) DefineHistoryPath(st, nodes);
    //  when (!reg) sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes))
    //}

    public DeleteTransitions(tr : list[StateTransition]) : FsmState
    {
      def (tran, other)     = tr.PartitionType();
      def (int_tran, other) = other.PartitionType();
      def (init, _)         = other.PartitionType();
      def initial           = this.Initial.Exclude(init, (x, y) => StateTransition.FullComparer(x, y) == 0);
      def internal_tran     = internal_tran.Exclude(int_tran, (x, y) => StateTransition.FullComparer(x, y) == 0);
      def transitions       = transitions.Exclude(tran, (x, y) => StateTransition.FullComparer(x, y) == 0);
      ChangeInternalTranInitialTransitions(internal_tran, initial, transitions)
    }

    //public DeleteTransitionsNested(tr : list[StateTransition]) : void
    //{
    //  DeleteTransitions(tr);
    //  AllSubStates.Iter(x => x.DeleteTransitionsNested(tr));
    //}

    public TraverseTransitions(an : FsmAnalyser) : FsmState
    {
      def paths = TransitionPaths(this);
      paths.TraverseTransitions(an, true);
      ChangePaths(paths)
    }

    public this()
    {
    }

    public this(super : FsmState, name : string, analyser : FsmAnalyser, reference : bool = false)
    {
      this();
      this.analyser = analyser;
      this.name = name;
      this.super_state = super;
      this.reference = reference
    }

    public this(st : StateNode.State, sub : IEnumerable[FsmState], analyser : FsmAnalyser, reference : bool = false)
    {
      this();
      state = st;
      name = st.name;
      this.reference = reference || state.reference;
      this.analyser = analyser;
      //def st_from_node(n)
      //{
      //  | StateNode.State(type = SubMachine) => SubMachine(n, this)
      //  | State(type = InlinedSubMachine)    => InlinedSubMachine(n, this)
      //  | _                                  => FsmState.State(n, this, false)
      //}

      when (!reference)
      {
        do_activity = st.do_activity |> StateAction.Do(_.action.ActionList, this, _.flags);
        internal_tran = Internal.Create(this, st.internal_tran);
        entry = st.entry |> StateAction.Entry(_.action.ActionList, this, _.attrib);
        exit = st.exit |> StateAction.Exit(_.action.ActionList, this, _.attrib);
        history = StateHistory.Create(this, st.history);
        transitions = Transition.Create(this, st.transitions);
        Initial = st.initial |> Initial(this, _);
        //def (regs, subst) = st.sub_states.Partition(x => x.regions.HasValue);
        //def regs = regs |> ConcurrentRegion(this, _, _.regions.Value); // TODO: сделать с помощью st_from_node
        //super_state = super;
        //def subst = (subst |> st_from_node(_)) + regs;
        //sub_states = subst.Sort((x, y) => x.source_pos - y.source_pos);
        sub_states = sub.Map(x => x.ChangeSuperState(this));
        pseudo_states = st.pseudo_states |> PseudoStateNode.Create(_.node, this, null)
      }
    }

    //public this(st : FsmState, reference : bool = false, ncopy : int = 0)
    //{
    //  this();
    //  this.reference = reference;
    //  name = st.name;
    //  analyser = st.analyser;
    //  do_activity = st.do_activity;
    //  internal_tran = if (ncopy != 0) st.internal_tran |> Clone(ncopy) else st.internal_tran;
    //  entry = st.entry |> Clone() :> StateAction.Entry;
    //  exit = st.exit |> Clone() :> StateAction.Exit;
    //  history =  if (ncopy != 0) st.history |> Clone(ncopy) else st.history;
    //  history.Iter(x => x.state = this);
    //  transitions = if (ncopy != 0) st.transitions |> Clone(ncopy) else st.transitions;
    //  initial = if (ncopy != 0) st.initial |> Clone(ncopy) else st.initial;
    //  super_state = st.super_state;
    //  sub_states = if (ncopy != 0) st.sub_states |> ChangeCopyNum(ncopy) else st.sub_states;
    //  sub_states.Iter(x => x.super_state = this);
    //  pseudo_states = if (ncopy != 0) st.pseudo_states |> SetCopy(ncopy) else st.pseudo_states
    //}

    public HistoryPaths : IEnumerable[string * HistoryPath] // paths from outer history
    {
      get
      {
        //def reg = this is ConcurrentRegion;
        //when (Lived || reg) DefineHistoryPath(st, nodes);
        //when (!reg) sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes))
        def shist = SuperStates.Where(x => x.ParticipateInHistory.Exists(x => x.type == HistoryType.Shallow));
        def spaths = shist.FoldLeft(Enumerable.Empty(), (x, a) => a.Concat(x.HistoryPaths));
        def paths = ParticipateInHistory.Select(x => (x.state.name, HistoryPath(x.state, this, x)));
        paths.Iter((_, x) => x.CreatePath(analyser));
        paths.Concat(spaths)
      }
    }

    public PathFromOut : StateTransition.Initial
    {
      get
      {
        def path = StateTransition.Initial(analyser.TopState, this);
        path.TraversePath(analyser);
        path
      }
    }

    ///// <summary>
    ///// Indicates what fsm lived in this state and it not only composite for others
    ///// </summary>
    //public Lived : bool 
    //{
    //  get
    //  {
    //    lived || clones.Exists(_.Lived)
    //  }
    //}

    public UsedInGenerate : bool
    {
      get
      {
        Lived || !AllLivedSubStates.IsEmpty()
      }
    }

    /// <summary>
    /// Hierarchy position
    /// </summary>
    public hierarchy_pos : int
    {
      get
      {
        SuperStates.Count()
      }
    }

    public source_pos : int
    {
      get
      {
        state.pos
      }
    }

    public IsTopState : bool
    {
      get
      {
        Name == TopStateName
      }
    }




    CopyName : string
    {
      get
      {
        if (copy_num == 0) "" else $"$copy_num"
      }
    }

    public Name : string
    {
      get
      {
        match (this)
        {
          | Final                               => $"$(super_state)Final$CopyName"
          | State
          | ConcurrentRegion
          | ConcurrentSubRegion                 => NativeName
          | SubMachine(name = n)                => $"SubMachine$n$CopyName"
          | InlinedSubMachine(name = n)         => $"InlinedSubMachine$n$CopyName"
          | InlinedSubMachineInstance(name = n) => $"InlinedSubMachineInstance$n$CopyName"
        }
      }
    }

    public OriginalName : string
    {
      get
      {
        match (this)
        {
          | ConcurrentSubRegion(index = idx, contained_in = r) => $"$(r)SubRegion$idx"
          | _ => if (name != null) name else AstName
        }
      }
    }

    public NativeName : string
    {
      get
      {
        $"$OriginalName$CopyName"
      }
    }

    public join_completion_transitions : list[StateTransition]
    {
      get
      {
        completion_transitions.Filter(x => x.To is TransitionTarget.PseudoState(Join()))
      }
    }

    public AstName : string
    {
      get
      {
        state.name
      }
    }

    /// <summary>
    /// Events for which reacts state
    /// </summary>
    public events : list[StateEvent]
    {
      get
      {
        def evts = work_transitions |> Trigger;
        evts.RemoveDuplicatesSort(_.CompareTo(_))
      }
    }

    /// <summary>
    /// Events for which reacts state or nested states
    /// </summary>
    public events_nested : list[StateEvent]
    {
      get
      {
        def evts = events + (AllLivedSubStates |>< events);
        evts.RemoveDuplicatesSort(_.CompareTo(_));
      }
    }

    public SuperStatesInclude : IEnumerable[FsmState]
    {
      get
      {
        SuperStates.AddBefore(this)
      }
    }

    public PartOfStateMachine : option[InlinedSubMachine]
    {
      get
      {
        SuperStatesInclude.FindType()
      }
    }

    public AllHistory : list[StateHistory]
    {
      get
      {
        AllSubStates.FoldLeft([], (x, a) => a.HeadAppend(x.history.Value))
      }
    }

    public PartOfSubRegion : option[ConcurrentSubRegion]
    {
      get
      {
        SuperStatesInclude.FindType()
      }
    }

    public PartOfSubRegions : IEnumerable[ConcurrentSubRegion]
    {
      get
      {
        SuperStatesInclude.FilterType()
      }
    }

    public PartOfTopRegion : option[ConcurrentRegion]
    {
      get
      {
        match (PartOfRegions)
        {
          | [] => None()
          | lst => Some(lst.Last())
        }
      }
    }

    public PartOfRegion : option[ConcurrentRegion]
    {
      get
      {
        SuperStatesInclude.FindType()
      }
    }

    public PartOfRegions : IEnumerable[ConcurrentRegion]
    {
      get
      {
        SuperStatesInclude.FilterType()
      }
    }

    //public GetPathFrom(st : FsmState) : IEnumerable[FsmState]
    //{
    //  def super = SuperStatesInclude.FirstElems(x => x.Name == st.Name);
    //  st :: super.Rev()
    //}

    //public PathName : list[FsmState]
    //{
    //  get
    //  {
    //    (this :: SuperStates.SplitLast()[1]).Rev()
    //  }
    //}

    public static NameComparer : FsmState * FsmState -> int = (x, y) => string.Compare(x.Name, y.Name);

    public PartOfRegionsOf(st : FsmState) : list[ConcurrentRegion]
    {
      SuperStatesInclude.NToList().FirstElems(_ == st).FilterType();
    }

    public FoldThis(
                state   : IEnumerable[FsmState] * State -> FsmState,
                final   : Final            -> FsmState,
                sub_reg : IEnumerable[FsmState] * ConcurrentSubRegion -> FsmState,
                region  : IEnumerable[FsmState] * ConcurrentRegion -> FsmState,
                inlined_subm_inst : IEnumerable[FsmState] * InlinedSubMachineInstance -> FsmState,
                sub_mach : SubMachine -> FsmState,
                inlined_fsm : IEnumerable[FsmState] * InlinedSubMachine -> FsmState
              ) : FsmState
    {

      def xnode(n, sub : IEnumerable[FsmState], ot)
      {
        match (n)
        {
          | null when (sub != null) => ot.ChangeSubStates(sub)
          | t    => t
        }
      }

      def stack = SCG.Stack();

      def pop(sub)
      {
        stack.PopRev(sub)
      }

      def loop(st, _)
      {
        match (st)
        {
          | State(sub_states = sub) as t                        => def sub_acc = pop(sub); 
              def acc = if (state != null) xnode(state(sub_acc, t), sub_acc, t) else t.ChangeSubStates(sub_acc);
              stack.Push(acc);
              acc
          | Final as t                                          => def acc = if (final != null) xnode(final(t), null, t) else t;
              stack.Push(acc);
              acc

          | ConcurrentSubRegion(sub_states = sub) as t          => def sub_acc = pop(sub); 
              def acc = if (sub_reg != null) xnode(sub_reg(sub_acc, t), sub_acc, t) else t.ChangeSubStates(sub_acc);
              stack.Push(acc);
              acc

          | ConcurrentRegion(sub_regions = reg)  as t           => def regacc = pop(reg |> _ : FsmState);
              def acc = if (regacc != null) xnode(region(regacc, t), regacc, t) else t.ChangeSubStates(regacc);
              stack.Push(acc);
              acc
          | InlinedSubMachineInstance(sub_states = sub) as t    => def sub_acc = pop(sub); 
              def acc = if (inlined_subm_inst != null) xnode(inlined_subm_inst(sub_acc, t), sub_acc, t) else t.ChangeSubStates(sub_acc);
              stack.Push(acc);
              acc 
          | SubMachine as t                                     => if (sub_mach != null) sub_mach(t) else t;
          | InlinedSubMachine(sub_states = sub) as t            => def sub_acc = pop(sub); 
              def acc = if (inlined_fsm != null) xnode(inlined_fsm(sub_acc, t), sub_acc, t) else t.ChangeSubStates(sub_acc);
              stack.Push(acc);
              acc
        }
      }

      Iterator().FoldLeft(null, loop)
    }

    public FoldThis[T](an : T,
                state   : IEnumerable[FsmState] * State * T -> FsmState * T,
                final   : Final * T-> FsmState * T,
                sub_reg : IEnumerable[FsmState] * ConcurrentSubRegion * T -> FsmState * T,
                region  : IEnumerable[FsmState] * ConcurrentRegion * T -> FsmState * T,
                inlined_subm_inst : IEnumerable[FsmState] * InlinedSubMachineInstance * T -> FsmState * T,
                sub_mach : SubMachine * T -> FsmState * T,
                inlined_fsm : IEnumerable[FsmState] * InlinedSubMachine * T -> FsmState * T
              ) : FsmState * T
    {

      def xnode((n, an), sub : IEnumerable[FsmState], ot)
      {
        match (n)
        {
          | null when (sub != null)                    => (ot.ChangeSubStates(sub), an)
          | t                                          => (t, an)
        }
      }

      def stack = SCG.Stack();

      def pop(sub)
      {
        stack.PopRev(sub)
      }

      def loop(st, an)
      {
        match (st)
        {
          | State(sub_states = sub) as t                        => def sub_acc = pop(sub); 
              def (acc, an) = if (state != null) xnode(state(sub_acc, t, an), sub_acc, t) else (t.ChangeSubStates(sub_acc), an);
              stack.Push(acc);
              an

          | Final as t                                          => def (acc, an) = if (final != null) xnode(final(t, an), null, t) else (t, an);
              stack.Push(acc);
              an

          | ConcurrentSubRegion(sub_states = sub) as t          => def sub_acc = pop(sub); 
              def (acc, an) = if (sub_reg != null) xnode(sub_reg(sub_acc, t, an), sub_acc, t) else (t.ChangeSubStates(sub_acc), an);
              stack.Push(acc);
              an

          | ConcurrentRegion(sub_regions = reg)  as t           => def regacc = pop(reg |> _ : FsmState);
              def (acc, an) = if (region != null) xnode(region(regacc, t, an), regacc, t) else (t.ChangeSubStates(regacc), an);
              stack.Push(acc);
              an

          | InlinedSubMachineInstance(sub_states = sub) as t    => def sub_acc = pop(sub); 
              def (acc, an) = if (inlined_subm_inst != null) xnode(inlined_subm_inst(sub_acc, t, an), sub_acc, t) else (t.ChangeSubStates(sub_acc), an);
              stack.Push(acc);
              an 

          | SubMachine as t                                     => def (acc, an) = if (sub_mach != null) sub_mach(t, an) else (t, an);
              stack.Push(acc);
              an

          | InlinedSubMachine(sub_states = sub) as t            => def sub_acc = pop(sub); 
              def (acc, an) = if (inlined_fsm != null) xnode(inlined_fsm(sub_acc, t, an), sub_acc, t) else (t.ChangeSubStates(sub_acc), an);
              stack.Push(acc);
              an
        }
      }

      def an = Iterator().FoldLeft(an, loop);
      def st = stack.Pop();
      (st, an)
    }

    public FoldThis(state   : IEnumerable[FsmState] * FsmState -> FsmState) : FsmState
    {

      def xnode(n, ot)
      {
        match (n)
        {
          | null => ot
          | t    => t
        }
      }

      def stack = SCG.Stack();

      def pop(sub)
      {
        stack.PopRev(sub)
      }

      def loop(st, _)
      {
        match (st)
        {
          | FsmState where (sub_states = sub) as t => def sub_acc = pop(sub); 
              def acc = xnode(state(sub_acc, t), t);
              stack.Push(acc);
              acc
        }
      }

      Iterator().FoldLeft(null, loop)
    }

    public FoldThis[T](an : T, state   : IEnumerable[FsmState] * FsmState * T -> FsmState * T) : FsmState * T
    {

      def xnode((n, an), sub, ot)
      {
        match (n)
        {
          | null => (ot.ChangeSubStates(sub), an)
          | t    => (t, an)
        }
      }

      def stack = SCG.Stack();

      def pop(sub)
      {
        stack.PopRev(sub)
      }

      def loop(st, _)
      {
        match (st)
        {
          | FsmState where (sub_states = sub) as t => def sub_acc = pop(sub); 
              def (acc, an) = xnode(state(sub_acc, t, an), sub_acc, t);
              stack.Push(acc);
              an
        }
      }

      def an = Iterator().FoldLeft(an, loop);
      def st = stack.Pop();
      (st, an)
    }

    public Fold[T](
                  init : T,
                  state   : T * State -> T,
                  final   : T * Final -> T,
                  sub_reg : T * ConcurrentSubRegion -> T,
                  region  : T * ConcurrentRegion -> T,
                  inlined_subm_inst : T * InlinedSubMachineInstance -> T,
                  sub_mach : T * SubMachine -> T,
                  inlined_fsm : T * InlinedSubMachine -> T
                  ) : T
    {
      def loop(st, acc)
      {
        match (st)
        {
          | State as t                        => state(acc, t)
          | Final as t                        => final(acc, t)
          | ConcurrentSubRegion as t          => sub_reg(acc, t)
          | ConcurrentRegion  as t            => region(acc, t)
          | InlinedSubMachineInstance as t    => inlined_subm_inst(acc, t)
          | SubMachine as t                   => sub_mach(acc, t)
          | InlinedSubMachine as t            => inlined_fsm(acc, t)
        }
      }

      Iterator().FoldLeft(init, loop)
    }

    public GetChild() : IEnumerable[FsmState]
    {
      sub_states
    }
    //public UpdateFromTarget(target : TransitionTarget) : FsmState
    //{
    //  def update_pseudo(op, p)
    //  {
    //    | (Choice(name = on), Choice(name = n))
    //    | (Junction(name = on), Junction(name = n))
    //    | (Join(name = on), Join(name = n)) 
    //    | (Merge(name = on), Merge(name = n)) when (on == n)                     => p
    //    | (Terminate(state = on), Terminate(state = n)) when (on.Name == n.Name) => p
    //    | _                                                                      => op
    //  }

    //  match (target)
    //  {
    //    | History(h)       => ChangeHistory(history.Map(x => if (x == h) h else x))
    //    | Final(f)         => ChangeSubStates(sub_states.Map(x => if (f.Name == x.Name) f else x))
    //    | PseudoState(p)   => ChangePseudoStates(pseudo_states.Map(update_pseudo(_, p)))
    //    | _                => this
    //  }
    //}
    
    public UpdateHistory(hist : StateHistory) : FsmState
    {
      def hist = history.Map(x => if (x.type == hist.type) hist else x);
      ChangeHistory(hist)
    }
  }
}
