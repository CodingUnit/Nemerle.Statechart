using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using PseudoStateNode;
  /// <summary>
  /// Description of FsmStateImpl.
  /// </summary>
  public partial variant FsmState
  {
    public override ToString() : string {Name}

    public virtual UpdateReference(map : StateMap) : StateMap
    {
      def map = map.CheckNew(this);
      //def super = if (super_state != null && super_state.reference)
      //  {
      //    def name = if (super_state.AstName == null) TopStateName else super_state.name;
      //    map.Get(name)
      //  } else super_state;
      initial.Iter(_.UpdateReference(map));
      transitions.Iter(_.UpdateReference(map));
      history.Iter(_.UpdateReference(map));
      // !!! mutable
      def pseudo = pseudo_states.Map(_.UpdateReference(map));
      def st = ChangePseudoStates(pseudo);
      map.Add(st)
    }

    //public FormatName() : void
    //{
    //  def name = name.SplitToList('.');
    //  this.name = name.Last();
    //}
    
    public DefineInitial(st : FsmState) : FsmState
    {
      def init = match (this)
      {
        | ConcurrentSubRegion(contained_in = r) => Initial(r, st)//initial ::= Initial(r, st)
        | _ => Initial(this, st)//initial ::= Initial(this, st)
      }
      ChangeInitial(init :: initial)
    }

    public AddSubState(st : FsmState) : FsmState
    {
      //st.analyser = Analyser;
      if (sub_states.Exists(x => x.Name == st.Name)) this else ChangeSubStates(sub_states + [st])//sub_states = sub_states + [st];
    }
    
    //public DefineTransition(tr : StateTransition) : void
    //{
    //  | Transition as tr => transitions ::= Transition(this, tr)
    //  | Internal   as tr => internal_tran ::= Internal(this, tr)
    //  | Initial    as tr => initial ::= tr
    //  | _ => ()
    //}

    //public SetCopy(ncopy : int) : FsmState
    //{
    //  def st = match (this)
    //           {
    //             | State               as st => State(st, false, ncopy)
    //             | ConcurrentRegion    as st => ConcurrentRegion(st, ncopy)
    //             | ConcurrentSubRegion as st => ConcurrentSubRegion(st, ncopy)
    //             | InlinedSubMachine   as st => InlinedSubMachine(st, ncopy)
    //             | SubMachine          as st => SubMachine(st, ncopy)
    //             | Final               as st => Final(st, false, ncopy)
    //           }
               
    //  //clones ::= st;
    //  st.ChangeCopyNumCloneFor(ncopy);
    //  //st.FindCopyName();
    //}
    
    //public clones : list[FsmState] = [];
    
    public DefineTransitions(tr : list[StateTransition]) : FsmState
    {
      def (tran, other)   = tr.PartitionType();
      def (intern, other) = other.PartitionType();
      def (init, _)       = other.PartitionType();
      ChangeInternalTranInitialTransitions(intern, init, tran)
          //  | Transition as tr => transitions ::= Transition(this, tr)
    //  | Internal   as tr => internal_tran ::= Internal(this, tr)
    //  | Initial    as tr => initial ::= tr

      //tr.Iter(DefineTransition)
    }

    //public DefineHistoryPath(st : string, nodes : HistoryPath) : void
    //{
    //  history_paths ::= (st, nodes)
    //}

    //public DefineHistoryPathRecurse(st : string, nodes : HistoryPath) : void
    //{
    //  def reg = this is ConcurrentRegion;
    //  when (Lived || reg) DefineHistoryPath(st, nodes);
    //  when (!reg) sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes))
    //}

    public DeleteTransitions(tr : list[StateTransition]) : FsmState
    {
      def (tran, other)     = tr.PartitionType();
      def (int_tran, other) = other.PartitionType();
      def (init, _)         = other.PartitionType();
      def initial           = initial.Exclude(init, (x, y) => StateTransition.FullComparer(x, y) == 0);
      def internal_tran     = internal_tran.Exclude(int_tran, (x, y) => StateTransition.FullComparer(x, y) == 0);
      def transitions       = transitions.Exclude(tran, (x, y) => StateTransition.FullComparer(x, y) == 0);
      ChangeInternalTranInitialTransitions(internal_tran, initial, transitions)
    }

    //public DeleteTransitionsNested(tr : list[StateTransition]) : void
    //{
    //  DeleteTransitions(tr);
    //  AllSubStates.Iter(x => x.DeleteTransitionsNested(tr));
    //}
    
    public TraverseTransitions() : FsmState
    {
      def paths = TransitionPaths(this);
      paths.TraverseTransitions(true);
      ChangePaths(paths)
    }
    
    public this()
    {
    }

    public this(super : FsmState, name : string, reference : bool = false)
    {
     this();
     this.analyser = analyser;
     this.name = name;
     this.super_state = super;
     this.reference = reference
   }
   
   public this(st : StateNode.State, super : FsmState, analyser : FsmAnalyser, reference : bool = false)
   {
     this(st, super, reference);
     this.analyser = analyser;
    }

    public this(st : StateNode.State, super : FsmState, reference : bool = false)
    {
     this();
      state = st;
      name = st.name;
      this.reference = reference || state.reference;
      
      def st_from_node(n)
      {
        | StateNode.State(type = SubMachine) => SubMachine(n, this)
        | State(type = InlinedSubMachine)    => InlinedSubMachine(n, this)
        | _                                  => FsmState.State(n, this, false)
      }
      
      when (!reference)
      {
        do_activity = st.do_activity |> StateAction.Do(_.action.ActionList, this, _.flags);
        internal_tran = Internal.Create(this, st.internal_tran);
        entry = st.entry |> StateAction.Entry(_.action.ActionList, this, _.attrib);
        exit = st.exit |> StateAction.Exit(_.action.ActionList, this, _.attrib);
        history = StateHistory.Create(this, st.history);
        transitions = Transition.Create(this, st.transitions);
        initial = st.initial |> Initial(this, _);
        def (regs, subst) = st.sub_states.Partition(x => x.regions.HasValue);
        def regs = regs |> ConcurrentRegion(this, _, _.regions.Value); // TODO: сделать с помощью st_from_node
        super_state = super;
        def subst = (subst |> st_from_node(_)) + regs;
        sub_states = subst.Sort((x, y) => x.source_pos - y.source_pos);
        pseudo_states = st.pseudo_states |> PseudoStateNode.Create(_.node, this, null)
      }
    }    
    //public this(st : FsmState, reference : bool = false, ncopy : int = 0)
    //{
    //  this();
    //  this.reference = reference;
    //  name = st.name;
    //  analyser = st.analyser;
    //  do_activity = st.do_activity;
    //  internal_tran = if (ncopy != 0) st.internal_tran |> Clone(ncopy) else st.internal_tran;
    //  entry = st.entry |> Clone() :> StateAction.Entry;
    //  exit = st.exit |> Clone() :> StateAction.Exit;
    //  history =  if (ncopy != 0) st.history |> Clone(ncopy) else st.history;
    //  history.Iter(x => x.state = this);
    //  transitions = if (ncopy != 0) st.transitions |> Clone(ncopy) else st.transitions;
    //  initial = if (ncopy != 0) st.initial |> Clone(ncopy) else st.initial;
    //  super_state = st.super_state;
    //  sub_states = if (ncopy != 0) st.sub_states |> ChangeCopyNum(ncopy) else st.sub_states;
    //  sub_states.Iter(x => x.super_state = this);
    //  pseudo_states = if (ncopy != 0) st.pseudo_states |> SetCopy(ncopy) else st.pseudo_states
    //}
    
    public do_activity : option[StateAction.Do];
    
    [NeedChange] public sub_states : list[FsmState];
    //{
    //  get
    //  {
    //    sub_states_num |> statemap[_]
    //  }
    //}
    
    //public sub_states_num : list[int] = [];
    [NeedChange] public history : TwoOption[StateHistory] = TwoOption.None();
    [NeedChange] public pseudo_states : list[PseudoStateNode] = [];
    [NeedChange] public statemap : StateMap;
    
    public history_paths : list[string * HistoryPath] // paths from outer history
    {
      get
      {
        //def reg = this is ConcurrentRegion;
        //when (Lived || reg) DefineHistoryPath(st, nodes);
        //when (!reg) sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes))
        def shist = SuperStates.Filter(x => x.ParticipateInHistory.Exists(x => x.Type == HistoryType.Shallow));
        def spaths = shist |>< history_paths;
        def paths = ParticipateInHistory.Map(x => (x.state.name, HistoryPath(x.state, this, x, analyser)));
        paths.Iter((_, x) => x.CreatePath());
        paths + spaths
      }
    }
    
    public PathFromOut : StateTransition.Initial
    {
      get
      {
        def path = StateTransition.Initial(analyser.TopState, this);
        path.TraversePath();
        path
      }
    }
    
    public state : StateNode.State;
    
    [NeedChange]
    public initial : list[StateTransition] = [];
    public entry : list[StateAction.Entry] = [];
    public exit  : list[StateAction.Exit] = [];
    [NeedChange(transitions, initial)]
    public internal_tran : list[StateTransition] = [];
    public transitions : list[StateTransition] = [];
    
    //[NeedChange]
    //public super_state_num : int;
    
    [NeedChange] public super_state  : FsmState;
    //{
    //  get
    //  {
    //    statemap[super_state_num]
    //  }
    //}
    
    [NeedChange] public copy_num : int;
    [NeedChange] public paths : TransitionPaths;
    public lived : bool;
    
    [NeedChange]
    public Num : int;
    
    ///// <summary>
    ///// Indicates what fsm lived in this state and it not only composite for others
    ///// </summary>
    //public Lived : bool 
    //{
    //  get
    //  {
    //    lived || clones.Exists(_.Lived)
    //  }
    //}
    
    public UsedInGenerate : bool
    {
      get
      {
        lived || AllLivedSubStates is _ :: _
      }
    }
    
    /// <summary>
    /// Hierarchy position
    /// </summary>
    public hierarchy_pos : int
    {
      get
      {
        SuperStates.Length
      }
    }
    
    public source_pos : int
    {
      get
      {
        state.pos
      }
    }
    
    public IsTopState : bool
    {
      get
      {
        Name == TopStateName
      }
    }
    
    public static TopStateName  =  "[Top]";

    public reference : bool;
    [NeedChange] public name : string;

    //public is_new : bool;
    public analyser : FsmAnalyser;

    public Id : IdType;

    CopyName : string
    {
      get
      {
        if (copy_num == 0) "" else $"$copy_num"
      }
    }
    
    public Name : string
    {
      get
      {
        match (this)
        {
          | Final                               => $"$(super_state)Final$CopyName"
          | State
          | ConcurrentRegion
          | ConcurrentSubRegion                 => NativeName
          | SubMachine(name = n)                => $"SubMachine$n$CopyName"
          | InlinedSubMachine(name = n)         => $"InlinedSubMachine$n$CopyName"
          | InlinedSubMachineInstance(name = n) => $"InlinedSubMachineInstance$n$CopyName"
        }
      }
    }

    public OriginalName : string
    {
      get
      {
        match (this)
        {
          | ConcurrentSubRegion(index = idx, contained_in = r) => $"$(r)SubRegion$idx"
          | _ => if (name != null) name else AstName
        }
      }
    }
    
    public NativeName : string
    {
      get
      {
        $"$OriginalName$CopyName"
      }
    }
    
    public join_completion_transitions : list[StateTransition]
    {
      get
      {
        completion_transitions.Filter(x => x.To is TransitionTarget.PseudoState(Join()))
      }
    }
    
    public AstName : string
    {
      get
      {
        state.name
      }
    }

    /// <summary>
	  /// Events for which reacts state
	  /// </summary>
    public events : list[StateEvent]
    {
      get
      {
        def evts = work_transitions |> Trigger;
        evts.RemoveDuplicatesSort(_.CompareTo(_))
      }
    }

    /// <summary>
	  /// Events for which reacts state or nested states
	  /// </summary>    
    public events_nested : list[StateEvent]
    {
      get
      {
        def evts = events + (AllLivedSubStates |>< events);
        evts.RemoveDuplicatesSort(_.CompareTo(_));
      }
    }
        
    public SuperStatesInclude : list[FsmState]
    {
      get
      {
        this :: SuperStates
      }
    }

    public PartOfStateMachine : bool
    {
      get
      {
        SuperStatesInclude.Exists(x => x is InlinedSubMachineInstance)
      }
    }
    
    public AllHistory : list[StateHistory]
    {
      get
      {
        AllSubStates |>< history.Value
      }
    }
    
    public PartOfSubRegion : option[ConcurrentSubRegion]
    {
      get
      {
        SuperStatesInclude.FindType()[0]
      }
    }

    public PartOfSubRegions : list[ConcurrentSubRegion]
    {
      get
      {
        SuperStatesInclude.FilterType()
      }
    }

    public PartOfTopRegion : option[ConcurrentRegion]
    {
      get
      {
        match (PartOfRegions)
        {
          | [] => None()
          | lst => Some(lst.Last())
        }
      }
    }
   
    public PartOfRegion : option[ConcurrentRegion]
    {
      get
      {
        SuperStatesInclude.FindType()[0]
      }
    }
    
    public PartOfRegions : list[ConcurrentRegion]
    {
      get
      {
        SuperStatesInclude.FilterType()
      }
    }

    public GetPathFrom(st : FsmState) : list[FsmState]
    {
      def super = SuperStatesInclude.FirstElems(x => x.Name == st.Name);
      st :: super.Rev()
    }
    
    public PathName : list[FsmState]
    {
      get
      {
        (this :: SuperStates.SplitLast()[1]).Rev()
      }
    }
    
    public static NameComparer : FsmState * FsmState -> int = (x, y) => string.Compare(x.Name, y.Name);
    
    public PartOfRegionsOf(st : FsmState) : list[ConcurrentRegion]
    {
      SuperStatesInclude.FirstElems(_ == st).FilterType();
    }
    
    public RenameState() : void
    {
      entry.Iter(x => x.state = this);
      exit.Iter(x => x.state = this);
      //history.Map(x => x.state = this)
    }
    
    //public UpdateFromTarget(target : TransitionTarget) : FsmState
    //{
    //  def update_pseudo(op, p)
    //  {
    //    | (Choice(name = on), Choice(name = n))
    //    | (Junction(name = on), Junction(name = n))
    //    | (Join(name = on), Join(name = n)) 
    //    | (Merge(name = on), Merge(name = n)) when (on == n)                     => p
    //    | (Terminate(state = on), Terminate(state = n)) when (on.Name == n.Name) => p
    //    | _                                                                      => op
    //  }
      
    //  match (target)
    //  {
    //    | History(h)       => ChangeHistory(history.Map(x => if (x == h) h else x))
    //    | Final(f)         => ChangeSubStates(sub_states.Map(x => if (f.Name == x.Name) f else x))
    //    | PseudoState(p)   => ChangePseudoStates(pseudo_states.Map(update_pseudo(_, p)))
    //    | _                => this
    //  }
    //}
  }
}
