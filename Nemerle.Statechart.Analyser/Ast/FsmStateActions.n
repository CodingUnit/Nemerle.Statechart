using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{

  using StateTransition;
  using ListUtils;
  /// <summary>
  /// Description of FsmStateActions.
  /// </summary>
  public partial variant FsmState
  {

    public static @==(a : FsmState, b : FsmState) : bool
    {
      a : object == b
    }

    public static @!=(a : FsmState, b : FsmState) : bool
    {
        !(@==(a, b))
    }

    public static CreateState(st : StateNode.State, sb : IEnumerable[FsmState], an : FsmAnalyser) : FsmState
    {
      FsmState(st, sb, an)
      //match (st.type)
      //{
      //  | State                => State(st, sb, an)
      //  | Final                => Final(st, an)
      //  | InlinedSubMachine(t) => InlinedSubMachine(st, sb, an, t)
      //  | SubRegion            => ConcurrentSubRegion(st, sb, an)
      //  | SubMachine(t)        => SubMachine(st, sb, an, t, array[], array[])
      //  | Region               => ConcurrentRegion(st, sb, an)
      //}
      //if (st != null) State(st, null, true) else state
    }

    public MoveToNewSuper(super : FsmState) : void
    {
      Super.Rem(this); // удаляем из старого супер состояния
      super.Add(this) // добавляем в новое
    }
    
    public Add(st : FsmState) : void
    {
      // TODO: нужно ли каждый раз перестраивать итератор, его можно только при изменениях создавать
      sub_states = sub_states.Append(st).NToList();
      st.Super = this;
    }

    public Rem(st : FsmState) : void
    {
      // TODO: нужно ли каждый раз перестраивать итератор, его можно только при изменениях создавать
      sub_states = sub_states.Except(st).NToList();
    }
    
    public AddPseudo(st : PseudoStateNode) : void
    {
      pseudo_states = pseudo_states.Append(st).NToList();
    }
    
    //public static CreateState(st : StateNode.State, state : FsmState) : FsmState
    //{
    //  if (st != null) State(st, null, true) else state
    //}

  }
}
