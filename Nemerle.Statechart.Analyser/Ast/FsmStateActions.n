using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{

  using StateTransition;
  using ListUtils;
  /// <summary>
  /// Description of FsmStateActions.
  /// </summary>
  public partial variant FsmState
  {

    public static @==(a : GeneralTree[FsmState], b : GeneralTree[FsmState]) : bool
    {
      a : object == b
    }

    public static @!=(a : GeneralTree[FsmState], b : GeneralTree[FsmState]) : bool
    {
        !(@==(a, b))
    }

    public static CreateState(st : StateNode.State, an : FsmAnalyser) : FsmState
    {
      match (st.type)
      {
        | State                => State(st, an)
        | Final                => Final(st, an)
        | InlinedSubMachine(t) => InlinedSubMachine(st, an, t)
        | SubRegion            => ConcurrentSubRegion(st, an)
        | SubMachine(t)        => SubMachine(st, an, t, array[], array[])
        | Region               => ConcurrentRegion(st, an)
      }
      //if (st != null) State(st, null, true) else state
    }

    //public static CreateState(st : StateNode.State, state : FsmState) : FsmState
    //{
    //  if (st != null) State(st, null, true) else state
    //}

  }
}
