using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of FsmStateDecls.
  /// </summary>
  public partial class FsmState
  {

    public do_activity : list[StateAction.Do] {get;set;default []}

    [NotifyPropertyChange]
    public Super : FsmState {get;set;}
    
    // calculated
    [MemoizedCalc]
    public super_states : list[FsmState] 
    {
      get
      {
        if (Super != null) 
        {
          Super.super_states.Append(Super).NToList()
        } else
        {
          []
        }
      }
    }
    
    [NotifyPropertyChange]
    public sub_states : list[FsmState] {get;set;}
    //[NeedChange] public pseudo_states : list[PseudoStateNode] = [];
    [NotifyPropertyChange]
    public transitions : list[StateTransition] {get;set;}
    [NotifyPropertyChange]
    public pseudo_states : list[PseudoStateNode] {get;set;}
    
    public statemap : StateMap
    {
      get
      {
        analyser.statemap
      }
    }
    
    //[NeedChange] public cloneFor : FsmState;

    public state : StateNode.State;

    [MemoizedCalc]
    public hierarchy_pos : int 
    {
      get
      {
        if (Super != null) 
        {
          Super.hierarchy_pos + 1
        } else 0
      }
    }
    
    //[NeedChange]
    //public initial : list[StateTransition] = [];
    public entry : list[StateAction.Entry] {get;set;default []}
    public exit  : list[StateAction.Exit]  {get;set;default []}
    //[NeedChange]
    //public internal_tran : list[StateTransition] = [];
    
    //[NeedChange(internal_tran, initial)]
    //[NeedChange]
    //[NeedChange(initial)]
    //public transitions : list[StateTransition] = [];

    //[TraverseIgnore]
    //[NeedChange]
    //public super_state : FsmState;
    
    //[TraverseIgnore]
    //[NeedChange]
    //public super_states : list[FsmState];
    
    //public Super : FsmState
    //{
    //  get
    //  {
    //    statemap.Super(this)
    //    //super_state?.Updated
    //  }
    //}

    public copy_num : int {get;set;}
    
    public paths : TransitionPaths {get;set;}
    //[NeedChange] public lived : bool;

    //[NeedChange(transitions, internal_tran, initial, history, pseudo_states, copy_num, cloneFor)]
    //[NeedChange(copy_num)]
    //[NeedChange]
    //[Accessor]
    //public num : int = -1;

    public static TopStateName : string = "[Top]";

    //public reference : bool;
    public name : string {get;set;}

    //public is_new : bool;
    public analyser : FsmAnalyser;

    public Id : IdType {get;set;}

    //[NeedChange(transitions, internal_tran, initial)]
  
  }
}
