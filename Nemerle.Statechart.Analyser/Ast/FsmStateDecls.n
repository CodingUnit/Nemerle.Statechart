using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of FsmStateDecls.
  /// </summary>
  public partial variant FsmState
  {

    public do_activity : option[StateAction.Do];

    public sub_states : IEnumerable[FsmState]
    {
      get
      {
        sub_state.AllSiblings
      }
    }

    public Siblings  : IEnumerable[FsmState]
    {
      get
      {
        def loop(st)
        {
          | null => ()
          | s    => yield s;loop(s.next)
        }    

        loop(next)
      }
    }

    public AllSiblings  : IEnumerable[FsmState]
    {
      get
      {
        def loop(st)
        {
          yield st;
          match (st.next)
          {
            | _ => ()
            | s => loop(s)
          }
        }

        loop(this)
      }
    }

    [NeedChange(next)] [NeedChange] public sub_state : FsmState;
    [NeedChange] public next                         : FsmState;
    //{
    //  get
    //  {
    //    sub_states_num |> statemap[_]
    //  }
    //}

    //public sub_states_num : list[int] = [];
    [NeedChange] public history : TwoOption[StateHistory] = TwoOption.None();
    [NeedChange(sub_state, super_state, analyser)]
    [NeedChange] public pseudo_states : list[PseudoStateNode] = [];
    [NeedChange] public statemap : StateMap;
    [NeedChange] public cloneFor : FsmState;

    public state : StateNode.State;

    [NeedChange]
    public initial : list[StateTransition] = [];
    public entry : list[StateAction.Entry] = [];
    public exit  : list[StateAction.Exit] = [];
    [NeedChange(transitions, initial)]
    public internal_tran : list[StateTransition] = [];
    public transitions : list[StateTransition] = [];

    //[NeedChange]
    //public super_state_num : int;

    [NeedChange] public super_state  : FsmState;
    //{
    //  get
    //  {
    //    statemap[super_state_num]
    //  }
    //}

    [NeedChange] public copy_num : int;
    [NeedChange] public paths : TransitionPaths;
    public lived : bool;

    [NeedChange]
    public Num : int;

    public static TopStateName  =  "[Top]";

    public reference : bool;
    [NeedChange] public name : string;

    //public is_new : bool;
    public analyser : FsmAnalyser;

    [NeedChange] public Id : IdType;

  }
}
