using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  using FsmState;
  using ListUtils;

  [Record]
  public variant PseudoStateNode
  {
    | History 
      {
        public this(st : FsmState, hist : PseudoStateAstNode.History)
        {
          base(st);
          type = hist.type;
          default = hist.default.Map(x => StateTransition.Default(st, x, this))
        }

        public SubStatesParticipateIn : IEnumerable[FsmState]
        {
          get
          {
            match (type)
            {
              | HistoryType.Deep     => state.AllLivedSubStates
              | HistoryType.Shallow  => state.LivedSubStatesNested
              | _                    => Enumerable.Empty()
            }
          }
        }        
        
        public SimpleName : string
        {
          get
          {
            $"$(state)History"
          }
        }        

        public default : option[StateTransition.Default] {get;set;}

        public type : HistoryType;
      }
#if 0
    | Junction
      {
        [NeedChange] name : string;
        [NeedChange] tree : BinaryTree[TreeJunctionNode];// TransitionTarget.JunctionNode;
        [NeedChange] nodes : list[FsmJunctionNode];
        //[TraverseIgnore] parent : Junction;
        type : JunctionType;
        //[NeedChange] decisionTree : DecisionNode;

        IsUnnamed : bool;
        //ChangeDecisionTree(tree : DecisionNode) : Junction
        //{
        //  ChangeTo(to.ChangeDecisionTree(tree))
        //}

        this(n : string, nodes : list[FsmJunctionNode], type : JunctionType, is_unnamed : bool)
        {
          base(0);
          name = n;
          IsUnnamed = is_unnamed;
          this.nodes = nodes;
          this.type = type;
        }

        static CreateTree(node : PseudoStateNode) : void
        {
          def tree = TreeJunctionNode.Create(node);//lst |> JunctionNode(st, tran, _, this);
          node.Update(x => (x :> Junction).ChangeTree(tree))
        }

        Create(an : FsmAnalyser, st : FsmState, node : PseudoStateAstNode.Junction) : PseudoStateNode
        {
          def (name, unnamed) =  match (node) 
          {
            | PseudoStateAstNode.Junction(name = null, type = JunctionType.Choice) => def num = an.NextChoiceNum();
                                                                                      ($"UnnamedChoice$num", true)
            | Junction(name = null, type = JunctionType.Junction)                  => def num = an.NextJunctionNum();
                                                                                      ($"UnnamedJunction$num", true)
            | Junction(name = n)                                                   => (n, false)
          }
          def create_node(x)
          {
            | JunctionNode(p, g, a, t) => FsmJunctionNode(p, g, a, TransitionTarget.Create(st, t))
          }
          //def tree = TreeJunctionNode.Create(node);//lst |> JunctionNode(st, tran, _, this);
          def nodes = node.node.Map(create_node);
          def junc = Junction(name, nodes, node.type, unnamed);
          NodeValue(st, junc);
        }
        //Nodes : IEnumerable[TransitionTarget.JunctionNode]
        //{
        //  get
        //  {
        //    def loop(t)
        //    {
        //      yield t;
        //      match (t.next)
        //      {
        //        | Some(t) => loop(t)
        //        | _       => ()
        //      }
        //    }

        //    loop(to)

        //  }
        //} 

        TypeName : string
        {
          get
          {
            match (type)
            {
              | Junction => "Junction"
              | Choice   => "Choice"
              | Merge    => "Merge"
            }
          }
        }

        Name : string
        {
          get
          {
            $"$name$TypeName$copy_name"
          }
        }

        Guards : IEnumerable[GuardNode]
        {
          get
          {
            def data = tree.GetBreadthFirstEnumerable().FoldLeft([], (x, a) => x.Data.guard :: a);
            data.Exclude(_ is GuardNode.Else)
          }
        }


        override ToString() : string
        {
          Name
        }

      }
#endif
    | Fork 
      {
        target    : list[TransitionTarget];
        fork_tran : list[StateTransition]  {get;set;default []}
      }
    | Join 
      {
        name : string;
        target : TransitionTarget {get;set;}
        region : FsmState {get;set;}

        joined_tran : list[StateTransition] {get;set;default []}
        transition : StateTransition {get;set;}

        trigger : StateEvent
        {
          get
          {
            match (joined_tran.NToList())
            {
              | []                                => null
              | t :: _ => t.Trigger
            }
          }
        }

      }
    | EntryPoint
    | ExitPoint
    | Terminate { override ToString() : string {"Terminate"} }

    public static Create(st : FsmState, pseudo : PseudoStateAstNode) : PseudoStateNode
    {
      match (pseudo)
      {
        | History as hist     => History(st, hist)
        //| Junction as j                              => Junction.Create(st, j)
        //| Fork(target = lst)                         => Fork(0, lst.Map(TransitionTarget.Create(st, _)), [])
        //| Join(name = n, target = t)                 =>  Join(0, n, TransitionTarget.Create(st, t), null, null, null))
        | EntryPoint                                 //EntryPoint(0, num, an))
        | ExitPoint                                  => null//ExitPoint(0, num, an)
        | Terminate                                  => Terminate(st)
        | _                                          => throw NotImplementedException("this TransitionTarget not implemented")
      }
    }

    //copy_name : string
    //{
    //  get
    //  {
    //    if (copy == 0) "" else $"$copy"
    //  }
    //}

    public state : FsmState;// {get;set;}

    public NativeName : option[string]
    {
      get
      {
        match (this)
        {
          | Join(name = n) => Some(n)
          //| Junction(name = n) 
          | _                  => None()
        }
      }
    }

    public Name : string
    {
      get
      {
        match (this)
        {
          | PseudoStateNode.History(type = t) => 

              def type = match (t)
                          {
                            | HistoryType.Deep     => "Deep"
                            | Shallow              => "Shallow"
                            | None                 => ""
                          }


              if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
          | Join(name = n )           => $"Join$n"//$copy_name
          | PseudoStateNode.Terminate => $"$(state)Terminate"
          | Fork(target = t)          => $<#Fork$(state)To..$(t;"_")#>
          | n                         => n.ToString()
          //| FsmNode.State(st)                                => st.Value.Name
          //| FsmNode.PseudoState(n)                           => n.ToString()
        }
      }
    }

    public override ToString() : string
    {
      Name
    }

    analyser : FsmAnalyser
    {
      get
      {
        state.analyser
      }
    }

    public Used : bool
    {
      get
      {
        analyser.Used[this]
      }
      set
      {
        analyser.Used[this] = value
      }
    }

    //public Clone() : PseudoStateNode
    //{
    //  match (this)
    //  {
    //    //| Junction(tree = t) as n => n.ChangeTree(t.Clone())
    //    | n                       => n
    //  }
    //}
    //public static @==(a : PseudoStateNode, b : PseudoStateNode) : bool
    //{
    //  | (null, null) => true
    //  | (null, _)    
    //  | (_, null)    => false
    //  | _            => a.Num == b.Num
    //}


  }


}
