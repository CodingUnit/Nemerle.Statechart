using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using FsmState;
  using ListUtils;
  
  [Record]
  public variant PseudoStateNode
  {
    | Junction
        {
          name : string;
          [NeedChange] nodes : list[JunctionNode];
          parent : Junction;

          this(st : FsmState, n : string, lst : list[TransitionNode.JunctionNode], tran : StateTransition)
          {
            base(st, 0);
            nodes = lst |> JunctionNode(st, tran, _, this);
            name = n;
          }
          
          Name : string
          {
            get
            {
              $"Junction$name$copy_name"
            }
          }
          
          [NeedChange] decisionTree : DecisionNode;
          
          IsTop : bool 
          {
            get
            {
              parent == null
            }
          }
          
          Actions : PathNode
          {
            get
            {
              decisionTree.Actions
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = nodes.FoldLeft([], (x, a) => a + x.Guards).Rev();
              g.Exclude(_ is GuardNode.Else)
            }
          }
          
          override UpdateReference(an : FsmAnalyser) : PseudoStateNode * FsmAnalyser
          {
            def (st, an) = base.UpdateReference(an);
            match (st)
            {
              | Junction(n, nodes, p, t) as j => def st = j.state;
                  def (nodes, an) = nodes.MapThrough(an, _.UpdateRef(_));
                  (Junction(st, copy, n, nodes, p, t), an)
              | _ => (this, an)
            }
          }
          
          override ToString() : string
          {
            Name
          }
          
        }
    | Choice
        {
          name : string;
          [NeedChange] nodes : list[JunctionNode];
          parent : Choice;
          
          this(st : FsmState, n : string, lst : list[TransitionNode.JunctionNode], tran : StateTransition)
          {
            base(st, 0);
            nodes = lst |> JunctionNode(st, tran, _, this);
            name = n;
          }
          
          [NeedChange] decisionTree : DecisionNode;
          
          IsTop : bool 
          {
            get
            {
              parent == null
            }
          }

          Actions : PathNode
          {
            get
            {
              decisionTree.Actions
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = nodes.FoldLeft([], (x, a) => a + x.Guards).Rev();
              g.Exclude(_ is GuardNode.Else)
            }
          }
          
          public override UpdateReference(an : FsmAnalyser) : PseudoStateNode * FsmAnalyser
          {
            def (st, an) = base.UpdateReference(an);
            match (st)
            {
              | Choice(n, nodes, p, t) as j => def st = j.state;
                  def (nodes, an) = nodes.MapThrough(an, _.UpdateRef(_));
                  (Choice(st, copy, n, nodes, p, t), an)
              | _ => (this, an)
            }
          }
          
          Name : string
          {
            get
            {
              $"Choice$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }
      
        }
    
    | Merge
        {
          name : string;
          node : JunctionNode;

          this(st : FsmState, n : string, node : TransitionNode.JunctionNode)
          {
            base(st, 0);
            this.node = JunctionNode(st, null, node,  this);
            name = n;
          }
          
          public override UpdateReference(an : FsmAnalyser) : PseudoStateNode * FsmAnalyser
          {
            def (nnode, an) = node.UpdateReference(an);
            def (st, an) = base.UpdateReference(an);
            def st = match (st)
            {
              | x when (x : object != this || node : object != nnode) => Merge(x.state, copy, name, nnode :> JunctionNode)
              | _                           => this
            }
            (st, an)
          }
       
          Name : string
          {
            get
            {
              $"Merge$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }
        }
    | Fork 
        {
          target : list[TransitionTarget];
                 
          [NeedChange] fork_tran : list[StateTransition] = [];
          
          override UpdateReference(an : FsmAnalyser) : PseudoStateNode * FsmAnalyser
          { 
           // TODO: сделать через Lazy создание нового списк только в случае если есть новые элементы
            def (st, an) = base.UpdateReference(an);
            match (st)
            {
              | Fork(state = st) => def (target, an) = target.MapThrough(an, _.UpdateReference(_));
                  (Fork(st, copy, target, fork_tran), an)
              | _                => (this, an)
            }
          }
          
          Name : string
          {
            get
            {
              $<#Fork$(state)To..$(target;"_")#>
            }
          }
          
          override ToString() : string
          {
            Name
          }
        }
    | Join 
        {
          name : string;
          target : TransitionTarget;
          [NeedChange(joined_tran, transition)] region : ConcurrentRegion;
          
          joined_tran : list[StateTransition] = [];
          transition : StateTransition;
          
          trigger : StateEvent
          {
            get
            {
              match (joined_tran)
              {
                | [] => null
                | StateTransition where (Trigger = t) :: _ => t
              }
            }
          }
          
          Name : string
          {
            get
            {
              $"Join$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }

          override UpdateReference(an : FsmAnalyser) : PseudoStateNode * FsmAnalyser
          {
            def (tar, an) = target?.UpdateReference(an);
            def (st, an) = base.UpdateReference(an);
            def st = match (st)
            {
              | Join as j when (tar : object != target || j : object != this) => Join(state, copy, name, tar, region, joined_tran, transition)
              | _                                                             => this
            }
            (st, an)
          }
          
        }
    | EntryPoint
    | ExitPoint
    | Terminate
        {
          Name : string
          {
            get
            {
              $"$(state)Terminate"
            }
          }
          
          
          override ToString() : string
          {
            Name
          }
        }
    
    | JunctionNode
        {
          guard : option[GuardNode];
          action : option[Actions];
          to : TransitionTarget;
          parent : PseudoStateNode;
          
          ChangeTo(t : TransitionTarget) : JunctionNode
          {
            JunctionNode(state, copy, guard, action, t, parent)
          }
          
          this(st : FsmState, tran : StateTransition, node : TransitionNode.JunctionNode, par : PseudoStateNode)
          {
            match (node)
            {
              | TransitionNode.JunctionNode(g, a, t) =>
        
                  base(st, 0);
                  guard = g;
                  action = a;
                  parent = par;
                  to = TransitionTarget.Create(st, tran, t)
            }
          }
          
          Top : PseudoStateNode
          {
            get
            {
              def find_top(j)
              {
                | Junction(parent = null)
                | Choice(parent = null) => j
                | Junction(parent = p)
                | Choice(parent = p) => find_top(p)
                | _ => null
              }
              
              find_top(parent)
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = match (to)
                      {
                        | TransitionTarget.PseudoState(Choice(Guards = g))
                        | TransitionTarget.PseudoState(Merge(node = JunctionNode(Guards = g)))
                        | TransitionTarget.PseudoState(Junction(Guards = g)) => g
                        | _ => []
                      }
              guard %:: g
            }
          }

          public UpdateRef(an : FsmAnalyser) : JunctionNode * FsmAnalyser
          {   
            def (nto, an) = to.UpdateReference(an);
            def (st, an) = base.UpdateReference(an);
            def st = match (st)
            {
              | JunctionNode(state = st) as j when (j : object != this || nto : object != to) => JunctionNode(st, copy, guard, action, nto, parent)
              | _                                                                             => this
            }
            (st, an)
          }
          
          public override UpdateReference(an : FsmAnalyser) : PseudoStateNode * FsmAnalyser
          {   
            def (st, an) = UpdateRef(an);
            (st : PseudoStateNode, an)
          }
          
        }
        
    public static Create(st : PseudoStateAstNode, state : FsmState, tran : StateTransition) : PseudoStateNode
    {
      def analyser = state.analyser;
      match (st)
      {
        | PseudoStateAstNode.Choice(null, lst) =>
        
            def num = analyser.NextChoiceNum();
            def name = $"Unnamed$num";
            Choice(state, name, lst, tran)
            
        | PseudoStateAstNode.Choice(n, lst) => Choice(state, n, lst, tran)  
        
        | Junction(null, lst) => 
            def num = analyser.NextJunctionNum();
            def name = $"Unnamed$num";
            Junction(state, name, lst, tran)
            
        | Junction(name = n, nodes = lst) => Junction(state, n, lst, tran)
        | Merge(name = n, node = node)    => Merge(state, n, node)
        | Fork(target = lst)              => Fork(state, 0, lst |> TransitionTarget.Create(state, tran, _), null)
        | Join(name = n, target = t)      => Join(state, 0, n, TransitionTarget.Create(state, tran, t), null, null, null)
        | EntryPoint                      => EntryPoint(state, 0)
        | ExitPoint                       => ExitPoint(state, 0)
        | Terminate                       => Terminate(state, 0)
      }
      
    }
        
    public SetCopy(ncopy : int) : PseudoStateNode
    {
      
      match (this)
      {
        | Junction(state = st, name = n, nodes = lst, parent = p, decisionTree = t) => 
            def lst = lst.Map(x => x.SetCopy(ncopy) :> JunctionNode);
            def t = t?.SetCopy(ncopy);
            Junction(st, ncopy, n, lst, p, t)
        | Choice(state = st, name = n, nodes = lst, parent = p, decisionTree = t) => 
            def lst = lst.Map(x => x.SetCopy(ncopy) :>  JunctionNode);
            def t = t?.SetCopy(ncopy);
            Choice(st, ncopy, n, lst, p, t)
        | Merge(state = st, name = n, node = node) => 
            def node = node.SetCopy(ncopy) :> JunctionNode;
            Merge(st, ncopy, n, node)
        | JunctionNode(state = st, guard = g, action = a, to = t, parent = p) => 
            def (t, an) = t.SetCopy(ncopy);
            JunctionNode(st, ncopy, g, a, t, p)
        | _ => this
      }
    }
    
    copy_name : string
    {
      get
      {
        if (copy == 0) "" else $"$copy"
      }
    }
    
    [NeedChange]
    public state : FsmState;

    //[RecordIgnore] [Accessor] cloneFor : PseudoStateNode;
    public copy : int;
    
    public NativeName : option[string]
    {
      get
      {
        match (this)
        {
          | Join(name = n) 
          | Choice(name = n)
          | Merge(name = n)
          | Junction(name = n) => Some(n)
          | _ => None()
        }
      }
    }
    
    public static @==(a : PseudoStateNode, b : PseudoStateNode) : bool
    {
      | (Join(state = st, name = null, target = t), Join(state = st2, name = null, target = t2)) => st == st2 && t == t2
      | (Junction(name = n), Junction(name = n2))
      | (Choice(name = n), Choice(name = n2))
      | (Join(name = n), Join(name = n2))
      | (Merge(name = n), Merge(name = n2)) => n == n2
      | (Fork(target = lst, state = st), Fork(target = lst2, state = st2)) => st == st2 && lst.Equals(lst2, _ == _)
      | (EntryPoint(state = st), EntryPoint(state = st2))
      | (ExitPoint(state = st), ExitPoint(state = st2))
      | (Terminate(state = st), Terminate(state = st2)) => st == st2
      | _ => false
    }
    
    public virtual UpdateReference(an : FsmAnalyser) : PseudoStateNode * FsmAnalyser
    {
      if (state !=null && state.reference) 
      {
       def (st, an) = an.statemap.Get(state.Name, an);
       def st = if (st != null) ChangeState(st) else this;
       (st, an)
     } else (this, an)
    }
    
  }
  

}
