using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Statechart;
using System.Reflection;

namespace Nemerle.Statechart
{

  using StateTransition;
  using ListUtils;

  [Record]
  [DebuggerDisplay("State  =  {Name}")]
  public partial variant FsmState
  {
    | State
      {
        this(name : string)
        {
          this(StateNode.State(name), null, null, true)
        }

      }

    | Final
      {
          //this(st : Final, reference : bool = false, ncopy : bool = false)
          //{
          //  base(st, reference, clone);
          //}
        this(state : StateNode.Final, an : FsmAnalyser)
        {
          base(state.state, Enumerable.Empty(), an, false)
        }
        
        this(super : FsmState, an : FsmAnalyser, reference : bool =  false)
        {
          base(super, $"$(super)Final", an, reference)
        }

      }

    | ConcurrentSubRegion
      {
        index : int;
        
        [TraverseIgnore] 
        [NeedChange(index)] 
        contained_in : ConcurrentRegion;

        this(st : StateNode.State, an : FsmAnalyser)
        {
          base(st, null, an, false)
            //do_activity = st.do_activity |> StateAction.Do(_.action.ActionList, this, _.flags);
            //internal_tran = Internal.Create(this, st.internal_tran);
            //entry = st.entry |> StateAction.Entry(_.action.ActionList, this, _.attrib);
            //exit = st.exit |> StateAction.Exit(_.action.ActionList, this, _.attrib);
            //history = StateHistory.Create(this, st.history);
            //transitions = Transition.Create(this, st.transitions);
            //initial = st.initial |> Initial(this, _);
            //pseudo_states = st.pseudo_states |> PseudoStateNode.Create(_.node, this, null);
            //sub_states = st.sub_states |> State(_, this, false);
            //sub_states.Iter(x => x.super_state = this);
            //super_state = region;
        }

        //transitions_to_final : IEnumerable[StateTransition]
        //{
        //  get
        //  {
        //      (LivedSubStatesNested.FoldLeft(Enumerable.Empty(), (x, a) => x.transitions.Where(x => x.ActualTo is Final))
        //  }
        //}

        FinalState : option[FsmState]
        {
          get
          {
            sub_states.Find(_ is Final)
          }
        }
      }

    | ConcurrentRegion
      {
        [NeedChange]
        sub_regions : IEnumerable[ConcurrentSubRegion] = Enumerable.Empty();

        this(state : StateNode.State, sr : IEnumerable[FsmState.ConcurrentSubRegion], an : FsmAnalyser)
        {
          base(state, [], an, false);
          sub_regions = sr.MapIndex((x, i) => x.ChangeContainedInIndex(this, i));
        }


          /// <summary>
          /// Indicates that maybe external transitions from some points of orthogonal state out of region not only completion
          /// </summary>
        MayTakePlaceForcedTransitions : bool 
        {
          get
          {
            all_transitions_nested.Exists(_.OutOfRegion)
          }
        }

        NeedHistorySave : bool
        {
          get
          {
              !ParticipateInHistory.IsEmpty()
          }
        }

          /// <summary>
          /// Indicates that maybe transitions from outer states forking control to this orthogonal region
          /// </summary>
        MayForkingFromOut : bool 
        {
          get
          {
            def is_this(r)
            {
              | null => false
              | _    => match (r.PartOfRegion)
                        {
                          | Some(r) when (r == this) => true
                          | _                        => false
                        }
            }

            analyser.forks.Exists(x => x.target.Exists(x => is_this(x.ToState)))
          }
        }

        public static get_pattern(reg : list[ConcurrentSubRegion]) : string
        {
          def idx = (reg |> index).Sort(_ - _);
          $<#..$(idx;"")#>; 
        }


        RegionExcept(st : list[ConcurrentSubRegion]) : ConcurrentSubRegion
        {
          match (sub_regions.Exclude(st, _ == _))
          {
            | [sub] => sub
            | head :: _ => head
            | _ => null
          }
        }

        RegionsExcept(st : list[FsmState]) : list[ConcurrentSubRegion]
        {
          sub_regions.Filter(x => !x.AllSubStates.Exists(y => st.Exists(y == _)) && !st.Exists(_ == x))
        }

        RegionsExcept(st : FsmState) : list[ConcurrentSubRegion]
        {
          sub_regions.Filter(x => !x.AllSubStates.Contains(st) && x != st)
        }

        Joins : list[PseudoStateNode.Join]
        {
          get
          {
            def get_join(t, lst)
            {
              match (t)
              {
                | StateTransition where (To = TransitionTarget.PseudoState(Join as j)) => j :: lst
                | _                                                                    => lst
              }
            }

            def tran = AllLivedSubStatesNested.FoldLeft([], (x, a) => x.all_transitions.FoldLeft(a, get_join));
            tran.RemoveDuplicatesSort((x, y) => x.name.CompareTo(y.name));
          }
        }

        HaveJoinTransitions : bool
        {
          get
          {
              !Joins.IsEmpty()
          }
        }

        HaveFinalCompletion : bool
        {
          get
          {
            def st = SuperStatesInclude;
            HaveFinal && st.Exists(x => !x.completion_transitions.IsEmpty())
          }
        }


        FinalStates : list[FsmState]
        {
          get
          {
            if (HaveFinal) sub_regions |> FinalState.Value else []
          }
        }

      }

    | InlinedSubMachineInstance
      {
        instance_of : InlinedSubMachine;

        this(st : FsmState)
        {
          base(st)
        }
        
        InitInline() : InlinedSubMachineInstance
        {
            //def update_pseudo(tar, _, new_st)
            //{
            //  match (tar)
            //  {
            //    | TransitionTarget.PseudoState(node) as t when (node == new_st) => t.ChangeNode(new_st)
            //    | _ => null
            //  }
            //}
           
          def num = instance_of.ncopy + 1; // increment copy number
          //def st = instance_of.ChangeCopyNum(num); // clone the inline sub machine instance

          def copy_state(st, _)
          {
            def init   = st.initial;//.Select(x : StateTransition => x.Clone(num));
            def tran   = st.transitions;//.Select(x => x.Clone(num));
            def intern = st.internal_tran;//.Select(x => x.Clone(num));
            def hist   = st.history.Map(_.ChangeReferenceState(true, st));
            def en     = st.entry.Map(_.ChangeState(st));
            def ex     = st.exit.Map(_.ChangeState(st));
            def st = st.ChangeTransitionsHistoryInitialEntryExitInternalTranCopyNum(tran, hist, init,  en, ex, intern, num);
            st.SetNewId() // set new identificator for state
          }
          
          def st         = instance_of.ReduceSingle(copy_state); // copy state and its content, changing references accordingly
          //def do_act     = st.do_activity; // take data from it except transitions to outer world
          //def inter_tran = st.internal_tran;
          //def entry      = st.entry;
          //def exit       = st.exit;
          //def init       = st.initial;
          //def history    = st.history;
          //def sub_st     = st.sub_states;
          //def tran       = st.all_transitions_nested; // get all transitions
          //def tran       = tran.Concat(st.AllHistory.FilterValues(_.default));
          def old_st       = instance_of.AllStates; // take old all states in sm
          def new_st       = st.AllStates; // take all states in new sm copy
          def ren_st       = old_st.ZipLazy(new_st); // take old and new copy
          
          def retarget_transitions(s, _)
          {
            def check_tran(tr)
            {
              ren_st.FoldLeft(tr, ((o, n), a) => a.UpdateTargets(o, n))
            }
            
            def update_target(tran)
            {
              // iterate over transitions and check states renaming if found old
              tran.Map(check_tran)
            }
            
            //ren_st.FoldLeft();
            def init     = update_target(s.initial);
            def tran     = update_target(s.transitions);
            def int_tran = update_target(s.internal_tran);
            def hist = s.history.Map(x => x.ChangeDefault(x.default.Map(check_tran)));
            s.ChangeTransitionsHistoryInitialInternalTran(tran, hist, init, int_tran)
          }
          //def sub_st = sub_st.Map(_.ChangeSuperState(this)); // change super state to this
          //ren_st.Iter((ost, nst) => tran.Iter(x => x.UpdateTargets(ost, nst))); // change targets according to rename in new location
          def st = st.ReduceSingle(retarget_transitions); // retarget transitions to new place state
          //def nst = ren_st.MapLazy((x, y) => y.ChangeCloneFor(x));
          //def pseudo = st.pseudo_states;
          //statemap.Update(nst);
          InlinedSubMachineInstance(st)// updates state map
        }

      }
    | SubMachine
      {
        type : string;

        [NeedChange(proc_events)] ref_sub_states : array[string] = array[];
        proc_events : array[string] = array[];

        this(st : StateNode.State, an : FsmAnalyser)
        {
          base(st, [], an, false);
          def (StateNode.State(type = StateType.SubMachine(type = t))) = st;
          this.type = t;
        }

        scanned : bool
        {
          get
          {
              !ref_sub_states.IsEmpty() || !proc_events.IsEmpty()
          }
        }

        Scan() : SubMachine
        {
          if (!scanned)
          {
            def type = Type.GetType(type);
            def st = type.GetField("ContainsStates");
            def ref_sub_states = st.GetValue(null) :> array[string];
            def evt = type.GetField("ProcessEvents");
            def proc_events = evt.GetValue(null) :> array[string];
            ChangeRefSubStatesProcEvents(ref_sub_states, proc_events)
          } else this
        }


        override UpdateReference() : FsmState
        {
          def st  = base.UpdateReference();
          def fsm = analyser.States.FilterType();
          match (fsm.Find(x => x.type == type))
          {
            | Some(InlinedSubMachine as f) => InlinedSubMachineInstance ^& (instance_of = f);
            | _                            => st
          }
        }

      }

    | InlinedSubMachine
      {
        type : string;
        ncopy : int;

        //this(st : StateNode.State, an : FsmAnalyser, reference : bool = false)
        //{
        //  base(st, [], an, reference);
        //  def (StateNode.State(type = StateType.InlinedSubMachine(type = t))) = st;
        //  this.type = t;
        //}
      }  
  }

}
