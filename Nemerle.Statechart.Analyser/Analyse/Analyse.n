// analyser.n
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.ComponentModel;

namespace Nemerle.Statechart
{

  using StateTransition;
  using ListUtils;

  [NotifyPropertyChange]
  partial class FsmAnalyser : INotifyPropertyChanged
  {

    internal GetEventParms(evt : TransitionEvent) : list[string * string]
    {
      def parms = evt.parms;
      if (parms.IsEmpty()) [] else
      match (EventDecls.Find(x => x.name == evt.name))
      {
        | Some(e) => def types = e.parms_type;
                     if (types.Length != parms.Length)
                     {
                       messager.AddError(FsmError.EventDeclarationNumberOfParamsNotEqual(e, evt));
                       []
                     } else
                     {
                       parms.Zip(types)
                     }
       | _                        => messager.AddError(FsmError.EventDeclarationNotFound(evt));[]
      }
    }
    
    CheckActivities() : void 
    {
      def do_act = States.SelectMany(x => x.do_activity.Select(y => (x, y)));
      //def do_act = do_act.Filter((_, x) => x.Length != 0);

      def sm = do_act.Filter((x : FsmState, _) => x.PartOfStateMachine.HasValue);
      def do_act = sm.GroupBy((x : FsmState, _) => x.PartOfStateMachine.Value.SubMachineType);
      foreach (group in do_act)
      {
        foreach (st in group.GroupBy((x, _) => x.name))
        {
          def (need, not) = st.NToList().Partition((_, x) => x.need_completion);
          def st = FsmState(st.Key, this, StateType.State());
          if (need.Length > not.Length)
          {
            need.Iter((_, x) => x.state = st.name);
          } else
          {
            not.Iter((_, x) => x.state = st.name)
          }
        }
      }
    }
    
    
    public Analyse() : void
    {
      try
      {
        CheckParseErrors();
        CreateStateMap();
        CheckHistoryStates(); // check for errors in history
        CheckTransitions();
        CheckInitialTransitions();
        CreateTransitions();
        //CreateActiveStates();
        BreakIfError();
        //CreateTransitionPaths();
        TransformFsm();
        ResolveConflicts();
        MergeTransitions();
        CheckUsedElements();
        CheckActivities();
        CreateHistoryPaths(); // create history paths
        FinalizeAnalyse();
      }
      catch 
      {
        | x is FsmErrorException => 
          def err = x.error;
          when (err != null) messager.AddError(err);
      }
    }

  }
}
