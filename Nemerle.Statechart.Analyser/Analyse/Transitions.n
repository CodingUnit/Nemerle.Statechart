using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using ListUtils;
  //using DecisionNode;  
  using GuardNode;
  using Opt;
/// <summary>
/// Description of AnalyseTransitions.
/// </summary>
  partial class FsmAnalyser
  {

    CheckInitialTransitions() : void
    {
      def check_auto_initial(st, rec)
      {
        match (st)
        {
          | FsmState(type = StateType.Final)  => ()
          | FsmState(type = StateType.Region, sub_states = lst) => when (rec) foreach (st in lst) check_auto_initial(st, rec);
          | FsmState(initial = None, sub_states = head :: _) when (!head.IsFinal) => st.DefineInitial(head);
                                                                                     when (rec) check_auto_initial(head, rec);
          | _ => ()
        }
      }

      def check_init_tran_correct(t)
      {
        match (t.pseudo_states.FilterType())
        {
          | []           => ()
          | t1 :: _ :: _ => messager.AddError(FsmError.InitialPseudoStateAtMostOne(t1))
          | PseudoStateNode.Initial(tran = tran) as i :: [] => 
              match (tran.To)
              {
                | PseudoState(PseudoStateNode.History(state = st)) 
                | PseudoState(PseudoStateNode.EntryPoint(state = st))
                | TransitionTarget.State(st) when (t.AllSubStates.ContainsRef(st)) => ()
                | _                                                                => messager.AddError(FsmError.InitialTransitionMustGoToState(i))
              }
              match (tran.To)
              {
                | PseudoState(PseudoStateNode.History(default = None)) => messager.AddError(FsmError.InitialTransitionToHistoryMustHaveDefaultTran(i))
                | _                                                    => ()
              }
              when (tran.guard.NotEmpty) messager.AddError(FsmError.InitialTransitionCannotHaveGuards(i));
        }
        
      }
      
      
      // check state attributes
      foreach (st in States)
      {
        check_init_tran_correct(st); // check for correct initial transitions
        when (st.Attributes.Exists(_ is StateAttribute.Initial))
        {
          st.Super.DefineInitial(st)
        }
        when (FsmFlags.AutoInitial) check_auto_initial(st, false)
      }
      
      check_auto_initial(TopState, true);
      foreach (st when st.IsComposite in States)
      {
        when (!st.IncomingTransitions.IsEmpty())
        if (st.IsConcurrent)
        {
          def sreg = st.sub_states.Where(x => x.initial.IsNone);
          when (!sreg.IsEmpty())
          {
            messager.AddError(FsmError.SubRegionsMustContainInitial(sreg.NToList()))
          }
        } else
        {
          when (st.initial.IsNone) messager.AddError(FsmError.CompositeStateWithIncomingTransitionsMustHaveInitial(st))
        }
      }
      
    }
    
    
    //FlattenTransitions(st : IEnumerable[FsmState] = null) : void
    //{
    //  def states = st ?? States;
    //  // create super state transitions in simple states
    //  foreach (st when st.Super != null in states)
    //  {
    //    st.DefineTransitions(st.Super.transitions)
    //  }
      
    //  foreach (st when st.IsComposite in states)
    //  {
    //    st.DeleteTransitions() // delete other transitions from composite states
    //  }
    //}
#if 0        
    CheckDeferedEvents() : void
    {
      def check_override(tr, st, defer)
      {
        // transitions with trigger exists in defered list
        def tr = tr.Where(x => defer.Exists(y => x.trigger == y));
        // filter and partition transition with position in hierarchy lower or equal current state
        def (left_tr, removed) = tr.PartitionLazy(x => x.From.hierarchy_pos >= st.hierarchy_pos);
        // left_tr transitions that overrides defered events in current state
        def left_events = left_tr.Map(_.trigger); // left events that override other defered
        def left_defer = defer.Exclude(left_events); // remove from defer that events
        //def tr = tr.Except(removed); // remove from transition list removed events
        (removed, left_defer)
      }
      
      foreach (st in States)
      {
        when (st.Super != null) 
        {
          def evts = st.Super.deferred_events; // super state deffered events
          def (rem_tran_evts, evts) = check_override(st.transitions, st.Super, evts); // transition events in current state
          st.DeleteTransitions(rem_tran_evts); // removed transitions overriden by defered events
          st.deferred_events += evts;
        }
      }
    }
    

    create_join_transitions() : void
    {

      def check_join(j, tr : IEnumerable[_])
      {
        match (j)
        {
          | PseudoStateNode.Join(target = t) as jn =>

              if (tr.ElementsEqual((x, y) => x.Trigger == y.Trigger))
              {
                if (tr.All(x => x.Source.PartOfSubRegion.HasValue) &&
                    tr.ElementsEqual((x, y) => x.Source.PartOfRegion.Value == y.Source.PartOfRegion.Value : object))
                {
                  def tran = StateTransition(j.state, t, tr.First().Trigger);
                  def reg = tr.First().Source.PartOfRegion.Value;
                  def tr = tr.OrderBy(x => x.Source.PartOfSubRegion.Value.Index);
                  //j.joined_tran = tr;
                  //j.region = reg;

                  //j.transition = tran;
                  /// !!! mutable
                  //tr.Iter(x => x.ToPseudo.SetValue(x => (x :> PseudoStateNode.Join).ChangeRegionJoinedTranTransition(reg, tr, tran)));
                  jn.region = reg;
                  jn.joined_tran = tr.NToList();
                  jn.transition = tran;
                } else 
                {
                  AddError(FsmError.JoinTransitionMustLeaveRegion(j, tr.NToList()));
                }
              } else 
              {
                AddError(FsmError.JoinTransitionMustHaveSameTrigger(j, tr.NToList()))
              }
        }
      }

      def get_join(t, lst)
      {
        match (t)
        {
          | StateTransition(To = TransitionTarget.PseudoState(PseudoStateNode.Join as j)) => (j, t) :: lst
          | _                                                                             => lst
        }
      }

      def join_tran = StateTransitions.FoldLeft([], get_join);
      def jtrans = join_tran.GroupBy((x, _) => x);
      def jtrans = jtrans.Map(x => (x.Key, x.Values()));
      jtrans.Iter(check_join)
    }

    create_fork_transitions() : void
    {
      def check_fork(f)
      {
        | PseudoStateNode.Fork(target = t) =>

              def st = t.Select(x => x.ToState);
              def reg = st.Select(x => x.PartOfSubRegion);
              if (!reg.IsEmpty() && reg.All(x => x.HasValue))
              {
                //def sreg = reg |> Last();
                def dups = reg.DuplicatesGroup(x => x.Value.Index);
                def regs = st.Select(x => x.PartOfRegion.Value);
                if (dups.Count() != 0 || !regs.ElementsEqual((x, y) => x == y : object)) 
                {

                  AddError(FsmError.ForkMustGoToSeparateRegion(f))
                } else
                {
                  //def reg = regs.First();
                  def sub_trans = t.Map(x => StateTransition.Transition(f.state, x, null));
                  f.fork_tran = sub_trans;
                  //def sub_trans = sub_trans.Map(x => x.ChangeLocal(true));
                  //tr.ToPseudo.SetValue(x => (x :> PseudoStateNode.Fork).ChangeForkTran(sub_trans))
                }
              } else
              {
                AddError(FsmError.ForkMustGoToRegion(f))
              }

      }

      def tran = StateTransitions.GetPseudo();
      tran.Iter(check_fork)
      //statemap.Update();
    }
#endif
    CheckLocalTrans() : void
    {
      foreach (tr when tr.kind == TransitionKind.Local in StateTransitions)
      {
        def src = match (tr.FromPseudo)
        {
          | Some(PseudoStateNode.EntryPoint as p) => p.state
          | _                                     => tr.From
        }
        def dest = tr.AtLeastStaticTo;
        if (dest.IsSubstateOf(src) || src == dest : object || src.IsSubstateOf(dest)) () else
        {
          messager.AddError(FsmError.LocalTransitionTargetMustBeWithinOrSuper(tr))
        }
      }
    }
    
    CheckTransitions() : void
    {
      // check cross regions transition
      //foreach (StateTransition(AtLeastStaticTo = to) as tr in StateTransitions)
      //{
      //  match (to, tr.From)
      //  {
      //    | (null, _) => ()
      //    | (FsmState(PartOfRegion = Some(r), PartOfSubRegion = Some(sr)), FsmState(PartOfRegion = Some(r2), PartOfSubRegion = Some(sr2))) => 
      //        when (r : object == r2 && sr : object != sr2) AddError(FsmError.TransitionCrossOrthogonalBoundaryOfSameRegion(tr))
      //    | _         => ()
      //  }
      //}
      
      CheckLocalTrans();
    }

    

  }
}
