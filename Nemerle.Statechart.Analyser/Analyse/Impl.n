using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using FsmState;
  using PseudoStateNode;
  
  public interface IdObject
  {
    Num : int {get;}
  }
  
  [Record]
  public variant FsmError
  {
    //| Sequence {seq : IEnumerable[FsmError];}
    //| UnknownState {state : FsmState;name : FsmState;tran : StateTransition;}
    | StateNotFound {state : string;}
    | ParentStateNotFound {state : FsmState; parent : string;}
    | SeveralState {states : list[string];}
    | DuplicateTransition {tran : list[StateTransition];}
    | DuplicateHistory {history : PseudoStateNode.History;}
    | RegionMustContainInitial {reg : FsmState;tran : StateTransition;}
    | SubRegionsMustContainInitial {reg : list[FsmState];}
    | UnknownTerminateTransition {node : StateTransition;}
    | ForkMustGoToRegion {fork : PseudoStateNode;}
    | ForkMustGoToSeparateRegion {fork : PseudoStateNode;}
    | UnknownNode {tran : StateTransition; name : string; }
    | JoinTransitionMustHaveSameTrigger {join : PseudoStateNode;tran : list[StateTransition];}
    | JoinTransitionMustLeaveRegion {join : PseudoStateNode;tran : list[StateTransition];}
    | TransitionCrossOrthogonalBoundaryOfSameRegion {tran : StateTransition;}
    | DefaultTransitionMustGoToState {tran : StateTransition;history : PseudoStateNode;}
    //| JunctionElseMustBeLast {junction : PseudoStateNode;}
    //| JunctionElseMustAfterAnotherGuard {junction : PseudoStateNode;}
    //| EmptyJunction {junction : PseudoStateNode;}
    //| JunctionActionMaybeLast {junction : PseudoStateNode;action : list[Actions];}
    //| ChoiceElseMustBeLast {choice : PseudoStateNode;}
    //| ChoiceElseMustAfterAnotherGuard {junction : PseudoStateNode;}
    | EmptyChoice {junction : PseudoStateNode;}
    //| ChoiceActionMaybeLast {junction : PseudoStateNode;action : list[Actions];}
    //| SubMachineStateNotFound {fsm : FsmState.SubMachine;state : string;}
    | UnknownTarget {tran : StateTransition; target : TransitionTarget;}
    | InitialPseudoStateAtMostOne { init : PseudoStateNode.Initial; }
    | InitialTransitionMustGoToState { init : PseudoStateNode.Initial; }
    | InitialTransitionCannotHaveGuards { init : PseudoStateNode.Initial; }
    | InitialTransitionToHistoryMustHaveDefaultTran { init : PseudoStateNode.Initial; }
    | CompositeStateWithIncomingTransitionsMustHaveInitial { st : FsmState; }
    | StateHasNotHistory { st : FsmState; }
    | ElseMustHaveOtherTransition { tr : StateTransition; }
    | SeveralElseGuards { tr : list[StateTransition]; }
    | PseudoStateNotFound { name : string; }
    | SeveralPseudoStates { lst : list[PseudoStateNode]; }
    | RelocatePseudoNotFound { tr : StateTransition; }
    | RelocateSourceNotSupported { pseudo : PseudoStateNode;}
    | RelocatePseudoAlreadyHaveTarget { tran : StateTransition; pseudo : PseudoStateNode;}
    | LocalTransitionTargetMustBeWithin {tran : StateTransition;}
    | StateMachineNotFound { usings : StateNode.Using; }
    | RegionMustContainSubRegions { reg : FsmState; }
    //| ThereMustBeOnlyOneInitial {st : FsmState; tr : list[StateTransition.Initial]; }
  }

  [Record]
  public variant FsmWarning
  {
    | HistoryNotUsed {hist : PseudoStateNode;}
    | StateNotUsed {state : FsmState;}
    | TransitionNotUsed {tran : StateTransition;}
    | TransitionOverriden {tran : StateTransition;by : StateTransition;}
    | RegionNotUsed {regions : FsmState;}
    | NoConcurrentActivity {act : StateAction.Do;}
  }

  public variant ParseError
  {
    | DuplicateActivity {node : StateNode.DoActivity;}
    | UnknownElement {node : StateNode;}
    | UnknownMachineFlag {flag : string;}
  }
  
  [Record]
  class FsmErrorException : Exception
  {
    public error : FsmError;
    
    public this() {}
  }
  
  
}
