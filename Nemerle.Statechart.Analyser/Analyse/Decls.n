using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Statechart;
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Collections;

using NC = Nemerle.Collections;

namespace Nemerle.Statechart
{
  using ListUtils;

  //[Record]
  public partial class FsmAnalyser
  {

    public statemap : StateMap;

    public FsmFlags : MachineFlags {get;set;}
    
    public EventCtx : EventContext = EventContext();
    
    public LoadedMachines : Hashtable[string, StateNode.StateMachine]
    {
      get
      {
        statemap.LoadedMachines
      }
    }
    
    public DeferedEvents : IEnumerable[string]
    {
      get
      {
        States.SelectMany(_.deferred_events).Where(x => x.Name != null).Select(_.Name)
      }
    }
    
    public Events : IEnumerable[StateEvent]
    {
      get
      {
        def defered = ActiveStates.SelectMany(x => x.states.SelectMany(x => x.deferred_events));
        def evts = Transitions.Select(x => x.Trigger).Concat(defered);
        def evts = evts.Where(x => x.Name != null);
        evts.RemoveDuplicatesSort(x => x.Name)
      }
    }

    public States : array[FsmState]
    {
      get
      {
        statemap.States
      }
    }

    public StateTransitions : array[StateTransition]
    {
      get
      {
        statemap.Transitions
      }
    }
    
    public mutable HistoryPaths : Hashtable[FsmState, list[HistoryPath]]; // paths from outer history

    public Complete : bool
    {
      get
      {
        Errors.IsEmpty() && !Events.IsEmpty()
      }
    }
    
    [Memoized]
    public actions : list[FsmAction]
    {
      get
      {
        def st_act = States.SelectMany(_.actions);
        def act = all_used_transitions.SelectMany(_.action).Concat(st_act);
        def act = act.Exclude(_ is FsmAction.Normal(name = null));
        act.RemoveDuplicatesSort(_.ToString())
      }
    }
    
    [Memoized]
    public all_actions : list[PathNode]
    {
      get
      {
        def tran_act = tran_paths.SelectMany(_.Path);
        tran_act.RemoveDuplicatesSort(_.ToString())
      }
    }

    [Memoized]
    public tran_paths : list[PathSequence]
    {
      get
      {
        all_used_transitions.SelectMany(x => x.Path).NToList()
      }
    }
    
    [Memoized]
    public tran_path_nodes : list[TranPath]
    {
      get
      {
        def ex = tran_paths.SelectMany(x => x.exit_tran_path);
        def en = tran_paths.SelectMany(x => x.entry_tran_path);
        def ex = ex.RemoveDuplicatesSort(_.state);
        def en = en.RemoveDuplicatesSort(_.state);
        ex.Concat(en).NToList()
      }
    }
    
    public not_used_history : IEnumerable[PseudoStateNode]
    {
      get
      {
        HistoryStates.Where(x => !Used[x])
      }
    }

    public HistoryStates : IEnumerable[PseudoStateNode.History]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }

    public Junctions : IEnumerable[PseudoStateNode.Junction]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }

    public PseudoStates : array[PseudoStateNode]
    {
      get
      {
        statemap.PseudoStates
      }
    }
    
    public Used : NC.Hashtable[object, bool] = NC.Hashtable();

    [Memoized(States, PseudoStates)]
    InitialTran : IEnumerable[StateTransition]
    {
      get
      {
        States.FilterValues(_.initial_tran)
      }
    }

    public DoActivities : IEnumerable[StateAction.Do]
    {
      get
      {
        States.SelectMany(x => x.do_activity).RemoveDuplicatesSort(_.Name)
      }
    }

    public Regions : IEnumerable[FsmState]
    {
      get
      {
        def regs = States.Where(x => x.type is StateType.Region);
        regs.Where(x => x.LivedNested);
      }
    }

    public not_used_regions : IEnumerable[FsmState]
    {
      get
      {
        def regs = States.Where(x => x.type is StateType.Region);
        regs.Where(x => !x.LivedNested)
      }
    }

    public forks : IEnumerable[PseudoStateNode.Fork]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }

    public joins : IEnumerable[PseudoStateNode.Join]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }
    
    //[Accessor] mutable traverser : TransitionTraverser;

    //public special_transitions : IEnumerable[StateTransition]
    //{
    //  get
    //  {
    //    def fork_tran = forks.SelectMany(x => x.fork_tran);
    //    def join_tran = joins.SelectMany(x => x.joined_tran);
    //    def exit_tran = exit_points.SelectMany(x => x.tran.ToList());
    //    def entry_tran = entry_points.Select(x => x.tran);
    //    fork_tran + join_tran + exit_tran + entry_tran
    //  }
    //}

    public exit_points : IEnumerable[PseudoStateNode.ExitPoint]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }
    
    public entry_points : IEnumerable[PseudoStateNode.EntryPoint]
    {
      get
      {
        PseudoStates.FilterType()
      }
    }
    
    public concurrent_states : IEnumerable[FsmState]
    {
      get
      {
        States.Where(x => x.type is StateType.Region)
      }
    }

    [Memoized]
    public empty_states : IEnumerable[FsmState]
    {
      get
      {
        def filter_used(st)
        {
          match (st.type)
          {
            | StateType.SubRegion
            | Region
            | Final         => false
            | _             => true
          }
        }

        def empty = States.Exclude(x => x.LivedNested); // determine lived states
        def empty = empty.Exclude(x => x.LivedNestedInStateMachine);
        empty.Where(filter_used)
      }
    }

    public LivedNestedStates : IEnumerable[FsmState]
    {
      get
      {
        States.Where(x => x.LivedNested) // determine lived states
      }
    }  

    public Fsm : StateNode.StateMachine;

    public NextJunctionNum() : int
    {
      unnamed_junction_num++;
      unnamed_junction_num
    }

    public NextChoiceNum() : int
    {
      unnamed_choice_num++; 
      unnamed_choice_num
    }

    

    public StatesId : StateId;

    public StateMachinesInProj : list[string * StateNode.StateMachine];
    
    public this(fsm : StateNode.StateMachine, name : string, mach : list[string * StateNode.StateMachine])
    {
      this.Fsm = fsm;
      StateMachinesInProj = mach;
      Name = fsm.name ?? name;
      statemap  = StateMap(this);
      StatesId = StateId(this);
    }

    public Name     : string;
    public Errors   : List[string] = List();
    public Warnings : List[string] = List();

    FinalizeAnalyse() : void
    {
      StatesId.CreateMasks();
      def longest = States.Max(x => x.Name.Length);
      def len = States.Count();
      
      def create_state_report(st)
      {
        match (st)
        {
          | FsmState(Id = null) with id = IdType(BitArray(len))
          | FsmState(Id = id) => 
        
              def id_hex = id.Result.Fold("", (x, a) => x.ToString("X8") + a);
              def id_val = id.val.OfType.[bool]().MapListRev(x => if (x) '1' else '0');
              def id_val = string(id_val.ToArray());
              string.Format($<#{0, $longest}: Id = $(id_val) (0x$id_hex) #>, st.Name)
        }
      }
      
      
      when (FsmFlags.Debug) 
      {
        def info = States.Map(create_state_report);
        File.WriteAllLines($"$(Name)statemap.log", info);
      }
    }

    public Error : bool
    {
      get
      {
         !Errors.IsEmpty()
      }
    }

    public history_default_transitions : IEnumerable[StateTransition]
    {
      get
      {
        HistoryStates.FilterValues(x => x.default)
      }
    }

    public used_transitions : IEnumerable[StateTransition]
    {
      get
      {
        StateTransitions.Where(x => Used[x])
      }
    }

    //public Clones : NC.Hashtable[FsmState, list[FsmState]] = NC.Hashtable();
    public LivedStates : IEnumerable[FsmState]
    {
      get
      {
        States.Where(_.Lived)
      }
    }
    

    [Memoized]
    public not_used_transitions : IEnumerable[StateTransition]
    {
      get
      {
        def initial_fsm(i) : bool
        {
          if (i.IsInitial)
          {
           if (i.FromPseudo.Value.state.PartOfStateMachine is Some(m))
           {
             m.AllPseudo.Exists(_ is PseudoStateNode.EntryPoint)
           } else false
          } else false
        }
        
        def tran = StateTransitions + InitialTran;
        def not_used = tran.Where(x => !Used[x]);
        def not_used = not_used.Exclude(initial_fsm);
        not_used.Where(x => x.From.Lived);
      }
    }

    [Memoized(StateTransitions, InitialTran)]
    public all_transitions_with_spec : IEnumerable[StateTransition]
    {
      get
      {
        StateTransitions + history_default_transitions + InitialTran; // special_transitions + 
      }
    }
    
    [Memoized]
    public all_used_transitions : IEnumerable[StateTransition]
    {
      get
      {
        def trans = all_transitions_with_spec;
        trans.Where(_.Used)
      }
    }

    public ConflictTransitions : IEnumerable[IEnumerable[StateTransition]]
    {
      get
      {
        States.SelectMany(_.ConflictTransitions)
      }
    }
    
    CompositeStates : IEnumerable[FsmState]
    {
      get
      {
        States.Where(_.IsComposite)
      }
    }
    
    SimpleStates : IEnumerable[FsmState]
    {
      get
      {
        States.Where(_.IsSimple)
      }
    }
    
    public TopState : FsmState
    {
      get
      {
        statemap.StateTree
      }
    }

  }
}
