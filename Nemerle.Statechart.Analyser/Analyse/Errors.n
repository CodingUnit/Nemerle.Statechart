using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Errors.
  /// </summary>
  partial class FsmAnalyser
  {
    CheckParseErrors() : void
    { 
      def check_err(err)
      {
        match (err)
        {
          | StateNode.Error(StateNode.DoActivity as node) => ParseError.DuplicateActivity(node)
          | StateNode.Error(node)                         => ParseError.UnknownElement(node)
        }
      }

      def flags = Fsm.flags.errors.Select(x => ParseError.UnknownMachineFlag(x));// |> ParseError.UnknownMachineFlag(_);
      def err = Fsm.GetErrors().Select(check_err);
      def errs = err.Concat(flags);
      AddError(errs)
    }

    public BreakIfError() : void
    {
      when (!Errors.IsEmpty()) throw FsmErrorException()
    }

    public AddWarning(err : FsmWarning) : void
    {
      Warnings.Add(err);
    }

    public AddWarning(err : IEnumerable[FsmWarning]) : void
    {
      Warnings.AddRange(err);
    }

    public AddError(err : IEnumerable[FsmError]) : void
    {
      Errors.AddRange(err)//AddErrors(err)
    }

    public AddError(err : FsmError) : void
    {
      Errors.Add(err)
    }

    public AddError(err : IEnumerable[ParseError]) : void
    {
      AddError(err.Map(x => FsmError.ParsingError(x)))
    }

  }
}
