using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of FsmStateFuncs.
  /// </summary>
  public module FsmStateFuncs
  {

    //public IsTopState(this node : FsmState) : bool
    //{
    //  node.Parent == null
    //}

    //public SubRegions(this node : FsmState) : IEnumerable[FsmState]
    //{
    //  if (node.Data is FsmState.ConcurrentRegion) node.ChildNodes else Enumerable.Empty()
    //}

    //public SubStates(this node : FsmState) : IEnumerable[FsmState]
    //{
    //  node.ChildNodes
    //}

    ///// <summary>
    ///// Is it Lived state, consider on nesting lived states
    ///// </summary>
    //public LivedNested(this node : FsmState) : bool
    //{
    //  node.Lived() || !node.AllLivedSubStates().IsEmpty()
    //}

    /// <summary>
    /// Direct lived substates with consider of nesting state life
    /// </summary>
    public LivedSubStatesNested(this node : FsmState) : IEnumerable[FsmState]
    {
      node.ChildNodes.Where(x => x.LivedNested())
    }

    ///// <summary>
    ///// All Lived substates with consider of nesting state life on all nesting levels
    ///// </summary>
    //public AllLivedSubStatesNested(this node : FsmState) : IEnumerable[FsmState]
    //{
    //  node.GetBreadthFirstEnumerable().Where(_.LivedNested())
    //    //sub_states.Filter(_.LivedNested) + (sub_states |>< AllLivedSubStatesNested)
    //}

    /// <summary>
    /// Direct lived sub states without consider of living nesting states of this substates
    /// </summary>
    public LivedSubStates(this node : FsmState) : IEnumerable[FsmState]
    {
      node.SubStates().Where(x => x.Lived())
    }

    public Analyser(this node : FsmState) : FsmAnalyser
    {
      node.Data.analyser
    }
    
    public PseudoStates(this node : FsmState) : IEnumerable[PseudoStateNode]
    {
      node.Analyser().PseudoStates[node]
    }
    
    public AllPseudo(this node : FsmState) : IEnumerable[PseudoStateNode]
    {
      node.AllStates().SelectMany(x => x.PseudoStates())
    }
      /// <summary>
    /// All sub states at all nesting levels
    /// </summary>
    public AllSubStates(this node : FsmState) : IEnumerable[FsmState]
    {
      node.AllStates().Skip(1)
        //sub_states + (sub_states |>< AllSubStates)
    }

    /// <summary>
    /// All sub states include this at all nesting levels
    /// </summary>
    public AllStates(this node : FsmState) : IEnumerable[FsmState]
    {
      node.GetBreadthFirstEnumerable()
    }

    //public AllPseudoStates : list[PseudoStateNode]
    //{
    //  get
    //  {
    //    pseudo_states + (sub_states |>< AllPseudoStates)
    //  }
    //}

    /// <summary>
    /// All lived sub states
    /// </summary>
    public AllLivedSubStates(this node : FsmState) : IEnumerable[FsmState]
    {
      node.AllSubStates().Where(x => x.Lived())
    }

    //public DefineInitial(this node : FsmState, st : FsmState) : void
    //{
    //  def tran = StateTransition.Initial(node, st);
    //  node.Data.analyser.statemap.Transitions.Add(node, NodeValue(node, tran));
    //  //node.Update(x => x.ChangeInitial(tran :: x.initial))
    //}

        /// <summary>
    /// Sub states included in the history of this state
    /// </summary>
    public SubStatesParticipateInHistory(this node : FsmState) : IEnumerable[FsmState]
    {
      node.History().Value.SelectMany(x => x.SubStatesParticipateIn())
    }

    public History(this node : FsmState) : TwoOption[PseudoStateNode]
    {
      def hist = node.Data.analyser.statemap.PseudoStates[node].FoldLeft([], (x, a) => if (x.Value is PseudoStateNode.History) x :: a else a);
      TwoOption.FromList(hist)
    }

    public SubStatesParticipateIn(this node : PseudoStateNode) : IEnumerable[FsmState]
    {
      match (node.Value)
      {
        | PseudoStateNode.History(type = HistoryType.Deep)     => node.Parent.AllLivedSubStates()
        | PseudoStateNode.History(type = HistoryType.Shallow)  => node.Parent.LivedSubStatesNested()
        | _                                                    => Enumerable.Empty()
      }
    }

    public PartOfRegion(this node : FsmState) : option[FsmState]
    {
      node.SuperStatesInclude().Find(x => x.Data is FsmState.ConcurrentRegion)
    }

    public PartOfSubRegion(this node : FsmState) : option[FsmState]
    {
      node.SuperStatesInclude().Find(x => x.Data is FsmState.ConcurrentSubRegion)
    }
    
    ///// <summary>
    ///// History pseudo-states in which participate this state
    ///// </summary>
    public ParticipateInHistory(this node : FsmState) : IEnumerable[PseudoStateNode]
    {
      node.Data.analyser.HistoryStates.Where(x => x.SubStatesParticipateIn().Contains(node))
    }

    public SuperStates(this node : FsmState) : IEnumerable[FsmState]
    {
      node.Parents()
    }

    public SuperStatesFromTop(this node : FsmState) : IEnumerable[FsmState]
    {
      Enumerable.Reverse(node.SuperStates())
    }

    public SuperStatesFromTopInclude(this node : FsmState) : IEnumerable[FsmState]
    {
      node.SuperStatesFromTop().Append(node)
    }    

    public HaveFinal(this node : FsmState) : bool
    {
      match (node.Data)
      {
        | ConcurrentRegion => node.SubStates().All(x => x.HaveFinal())
        | _                => node.SubStates().Exists(x => x.Data is FsmState.Final)
      }
    }

    //public FinalSubState(this node : FsmState) : option[GeneralTree[FsmState.Final]]
    //{
    //  node.SubStates().FindType()
    //}

    public DefaultTransitions(this node : FsmState) : IEnumerable[StateTransition]
    {
      node.History().Value.FoldLeft([], (x, a) => if ((x.Value :> PseudoStateNode.History).default is Some(t)) t :: a else a)
    }

    public UsedInGenerate(this node : FsmState) : bool
    {
        node.Lived() || !node.AllLivedSubStates().IsEmpty()
    }


        /// <summary>
    /// Transitions defined direct from this state
    /// </summary>
    public this_transitions(this node : FsmState) : IEnumerable[StateTransition]
    {
      node.AllTransitions().Where(x  => x.Parent == node : object)
    }

    //public IsSubStateOf(this node : FsmState, st : FsmState) : bool
    //{
    //  node.SuperStates().Exists(_ == st)
    //}

    //public Index(this node : FsmState) : int
    //{
    //  node.Parent.ChildNodes.IndexOf(node)
    //}

    //public Super(this node : FsmState) : FsmState
    //{
    //  node.Parent
    //}

        //[TraverseIgnore] 
        //[NeedChange(index)] 
    public ContainedIn(this node : FsmState) : FsmState
    {
      node.Super()
    }

    public static all_transitions_nested(this node : FsmState) : IEnumerable[StateTransition]
    {
      node.GetBreadthFirstEnumerable().SelectMany(x => x.AllTransitions())
    }
              /// <summary>
          /// Indicates that maybe external transitions from some points of orthogonal state out of region not only completion
          /// </summary>
    public MayTakePlaceForcedTransitions(this node : FsmState) : bool 
    {
      node.all_transitions_nested().Exists(x => x.Value.OutOfRegion)
    }

    public NeedHistorySave(this node : FsmState) : bool
    {
      !node.ParticipateInHistory().IsEmpty()
    }

    public get_pattern(reg : IEnumerable[FsmState]) : string
    {
      def idx = reg.Select(x => x.Index()).OrderBy(x => x).NToList();
      $<#..$(idx;"")#>
    }


    public RegionExcept(this node : FsmState, st : IEnumerable[FsmState]) : FsmState
    {
      match (node.SubRegions().Except(st))
      {
        | [sub]     => sub
        | head :: _ => head
        | _         => null
      }
    }

    public RegionsExcept(this node : FsmState, st : IEnumerable[FsmState]) : IEnumerable[FsmState]
    {
      node.SubRegions().Where(x => !x.AllSubStates().Exists(y => st.Exists(y : object == _)) && !st.Exists(_ == x : object))
    }

    public RegionsExcept(this node : FsmState, st : FsmState) : IEnumerable[FsmState]
    {
      node.SubRegions().Where(x => !x.AllSubStates().Contains(st) && x : object != st)
    }

    public GetPseudo[T](this tran : IEnumerable[StateTransition]) : IEnumerable[T] where T : PseudoStateNode
    {
      def get_pseudo(t, lst)
      {
        match (t)
        {
          | StateTransition(To = TransitionTarget.PseudoState(p)) when (p is T) => p :: lst
          | _                                                                                                 => lst
        }
      }

      tran.FoldLeft([], get_pseudo).Distinct()
    }

    public Joins(this node : FsmState) : IEnumerable[PseudoStateNode]
    {
      node.AllLivedSubStatesNested().SelectMany(x => x.AllTransitions().GetPseudo(_ is PseudoStateNode.Join))
    }

    public HaveJoinTransitions(this node : FsmState) : bool
    {
      !node.Joins().IsEmpty()
    }

    public Transitions(this node : FsmState) : IEnumerable[StateTransition]
    {
      node.AllTransitions()
    }
    
    //public AllTransitions(this node : FsmState) : IEnumerable[StateTransition]
    //{
    //  node.Data.statemap.Transitions[node]
    //}
    
    //public EventTransitions(this node : FsmState) : IEnumerable[StateTransition]
    //{
    //  node.AllTransitions().Where(x => !(x.Value is StateTransition.Initial))
    //}
    
    public ExternalTransitions(this node : FsmState) : IEnumerable[StateTransition]
    {
      node.AllTransitions().Where(x => x.Value is StateTransition.Transition)
    }
    
    //public InitialTransitions(this node : FsmState) : IEnumerable[StateTransition]
    //{
    //  node.AllTransitions().Where(x => x.Value is StateTransition.Initial)
    //}

    public InternalTransitions(this node : FsmState) : IEnumerable[StateTransition]
    {
      node.AllTransitions().Where(x => x.Value is StateTransition.Internal)
    }
    
    public AddSubState(this st : FsmState, sub : FsmState) : void
    {
      //st.analyser = Analyser;
      st.Add(sub)
      //if (sub_states.Exists(x => x.Num == st.Num)) this else ChangeSubStates(sub_states.Append(st).NToList())//sub_states = sub_states + [st];
    }

    public DefineTransitions(this st : FsmState, tr : IEnumerable[StateTransition]) : void
    {
      def create_copy(tr)
      {
        tr.Clone(x => x.ChangeFrom(st))
      }
      
      def copy = tr.Map(create_copy);
      st.Data.statemap.Transitions.Add(st, copy);
      //def (tran : IEnumerable[StateTransition.Transition], other)   = tr.PartitionType();
      //def (intern : IEnumerable[StateTransition.Internal], other)   = other.PartitionType();
      //def (init : IEnumerable[StateTransition.Initial], _)          = other.PartitionType();
      //def intern = internal_tran + intern.Select(_ : StateTransition);
      //def init = initial + init.Select(_ : StateTransition);
      //def tran = transitions + tran.Select(_ : StateTransition);
      //ChangeTransitionsInitialInternalTran(tran.NToList(), init.NToList(), intern.NToList())
    }

    public static Compare(comparer : StateTransition * StateTransition -> int) :  StateTransition *  StateTransition -> int
    {
      (x, y) => comparer(x, y)
    }
    
    public DeleteTransitions(this st : FsmState, tr : IEnumerable[StateTransition]) : void
    {
      st.Data.statemap.Transitions.Rem(st, tr)
    }
    
    public DeleteTransitions(this st : FsmState) : void
    {
      def tran = st.Data.statemap.Transitions[st].Where(x => !(x.Value is StateTransition.Initial));//Clear(st)
      st.Data.statemap.Transitions.Rem(st, tran)
    }
    
    //public IsSimpleState(this node : FsmState) : bool
    //{
    //  node.SubStates().IsEmpty()
    //}

    /// <summary>
    /// Use both types of history in state
    /// </summary>
    public BothHistories(this node : FsmState) : bool
    {
        node.History().IsTwo
    }

    public UsedHistory(this node : FsmState) : IEnumerable[PseudoStateNode]
    {
        node.History().Value.Where(x => node.Data.analyser.Used[x])
    }
    
    public Lived(this node : FsmState, res : bool) : void
    {
      node.Analyser().Used[node] = res
    }
    
    public static Lived(this st : FsmState) : bool
    {
        st.Analyser().Used[st]
    }
    
    public LivedState(this node : FsmState) : bool
    {
      def an = node.Analyser();
      node.Lived() || an.Clones[node].Exists(x => x.Lived())
    }
    
      //public GetFsmNode(this node : FsmState) : GeneralTree[FsmNode]
    //{
    //  node.Value.statemap.GetNode(node)
    //}
    
    //public HaveFinalCompletion() : bool
    //{
    //  def st = SuperStatesInclude;
    //  HaveFinal && st.Exists(x => !x.completion_transitions.IsEmpty())
    //}


    //public FinalStates : IEnumerable[FsmState]
    //{
    //    sub_regions.Select(x => x.FinalSubState.Value) else Enumerable.Empty()
    //}

    /// <summary>
    /// Events for which reacts state or nested states
    /// </summary>
    public events_nested(this node : FsmState) : IEnumerable[StateEvent]
    {
      def evts = node.AllLivedSubStates().SelectMany(x => x.Events());
      evts.Distinct()
    }

    public PartOfRegionsOf(this node : FsmState, st : FsmState) : IEnumerable[FsmState]
    {
      node.SuperStatesInclude().NToList().FirstElems(_ == st : object).Where(x => x.Data is FsmState.ConcurrentRegion)
    }
    
    public SuperStatesInclude(this node : FsmState) : IEnumerable[FsmState]
    {
      node.SuperStates().AddBefore(node)
    }

    public PartOfStateMachine(this node : FsmState) : option[FsmState]
    {
      node.SuperStatesInclude().Find(x => x.Data is FsmState.InlinedSubMachine)
    }

    //public AllPseudo(this node : FsmState)  : IEnumerable[PseudoStateNode]
    //{
    //    node.AllStates().SelectMany(_.ChildPseudo)
    //}

    //public AllHistory : IEnumerable[PseudoStateNode.History]
    //{
    //  get
    //  {
    //    AllSubStates.SelectMany(x => x.history.Value)
    //  }
    //}

    public PartOfSubRegions(this node : FsmState) : IEnumerable[FsmState]
    {
        node.SuperStatesInclude().Where(x => x.Data is FsmState.ConcurrentSubRegion)
    }

    //public PartOfTopRegion : option[ConcurrentRegion]
    //{
    //  get
    //  {
    //    match (PartOfRegions)
    //    {
    //      | []  => None()
    //      | lst => Some(lst.Last())
    //    }
    //  }
    //}

    //public PartOfRegion : option[ConcurrentRegion]
    //{
    //  get
    //  {
    //    SuperStatesInclude.FindType()
    //  }
    //}

    //public PartOfRegions : IEnumerable[ConcurrentRegion]
    //{
    //  get
    //  {
    //    SuperStatesInclude.FilterType()
    //  }
    //}    
    public TraverseTransitions(this node : FsmState) : void
    {
      def paths = TransitionPaths(node);
      node.Update(x => x.ChangePaths(paths.TraverseTransitions(true)));
      //UpdateTransitions(trans).ChangePaths(paths)
    }
    
   
    public HierarchyPos(this node : FsmState) : int
    {
      if (node.Data.calc_hierarchy_pos != -1) node.Data.calc_hierarchy_pos else node.Height
    }
    
    public Name(this node : FsmState) : string
    {
        match (node.Data)
        {
          | Final
          | State
          | ConcurrentRegion
          | ConcurrentSubRegion                 => node.NativeName()
          | SubMachine(name = n)                => $"SubMachine$n$(node.Data.CopyName)"
          | InlinedSubMachine(name = n)         => $"InlinedSubMachine$n$(node.Data.CopyName)"
          | InlinedSubMachineInstance(name = n) => $"InlinedSubMachineInstance$n$(node.Data.CopyName)"
        }
    }

    public OriginalName(this node : FsmState) : string
    {
        match (node.Data)
        {
          | Final               => $"$(node.Super())Final"
          | ConcurrentSubRegion => def idx = node.Index();
                                   def reg = node.Super(); 
                                   $"$(reg)SubRegion$idx"
          | x                   => $"$x"
        }
    }

    public NativeName(this node : FsmState) : string
    {
        $"$(node.OriginalName())$(node.Data.CopyName)"
    }
    
    public GetHistory(this node : FsmState, type : PseudoStateNode) : PseudoStateNode
    {
      match (node.History(), type.Value)
      {
        | (One(h), _)                                                                                              => h
        | (Two(NodeValue(Value = PseudoStateNode.History(type = t1)) as f, s), PseudoStateNode.History(type = t))  => if (t1 == t) f else s
        | _                                                                                                        => null
      }
    }
    
    public CompletionTransitions(this node : FsmState) : IEnumerable[StateTransition]
    {
      node.AllTransitions().Where(x => x.Value.IsCompletion)
    }
    
    public join_completion_transitions(this node : FsmState) : IEnumerable[StateTransition]
    {
        node.CompletionTransitions().Where(x => x.Value.To is TransitionTarget.PseudoState(NodeValue(Value = PseudoStateNode.Join)))
    }

    public HistoryPaths(this node : FsmState) : list[HistoryPath]
    {
    //  ublic HistoryPaths : IEnumerable[string * HistoryPath] // paths from outer history
    //{
    //  get
    //  {
    //    def shist = SuperStates.Where(x => x.ParticipateInHistory.Exists(x => x.type == HistoryType.Shallow));
    //    def spaths = shist.SelectMany(_.HistoryPaths);
    //    def paths = ParticipateInHistory.Select(x => (x.state.name, HistoryPath(x.state, this, x).CreatePath()));
    //    paths.Concat(spaths)
    //  }
    //}
      //node.ParticipateInHistory().Select(x => (x.Parent, HistoryPath(x.Parent, node, x)).CreatePath());
      def hist = node.Analyser().HistoryPaths;
      if (hist != null && hist.ContainsKey(node))
      {
        hist[node]
      } else null
    }
    
    public HaveHistoryPaths(this node : FsmState) : bool
    {
      node.HistoryPaths() != null
      //node.Analyser().HistoryPaths != null && HistoryPaths[node] HistoryPaths[node].IsEmpty()
    }

    
    ///// <summary>
    ///// Work transitions
    ///// </summary>
    //public WorkTransitions(this node : FsmState) : IEnumerable[StateTransition]
    //{
    //        node.EventTransitions.Where(x => x.Used)
    //        //__.Exclude(_.CrossFor);
    //        //__.Exclude(_.NotWork);
    //        //__.Where(_.UsedInGenerate)
    //}
    
        /// <summary>
    /// Events for which reacts state
    /// </summary>
    public Events(this node : FsmState) : IEnumerable[StateEvent]
    {
        node.WorkTransitions().Select(x => x.Value.Trigger).Distinct()
    }

        public region_exit_path(this node : FsmState) : IEnumerable[PathNode]
    {
        match (node.PartOfRegion())
        {
          | Some(r) => def (exit, _) = TransitionPath.FindPath(node, r, Enumerable.Empty(), Enumerable.Empty()); // exit state nested in region
                       TransitionPath.ExitNodeCreate(node, exit); // create exit state node
                       
          | _       => Enumerable.Empty()
        }
    }

              /// <summary>
          /// Indicates that maybe transitions from outer states forking control to this orthogonal region
          /// </summary>
       public MayForkingFromOut(this node : FsmState) : bool 
        {
            def is_this(r)
            {
              | null => false
              | _    => match (r.PartOfRegion())
                  {
                    | Some(r) when (r : object == node) => true
                    | _                                 => false
                  }
            }

            node.Analyser().forks.Exists(x => (x.Value :> PseudoStateNode.Fork).target.Exists(x => is_this(x.ToState)))
        }

       public NCopy(this node : FsmState) : int
        {
          node.Analyser().Clones[node].Length
        }

  }
  
  public module TransitionFuncs
  {
    
    
    
    public TraversePath(this node : StateTransition, recursive : bool = false) : void
    {
      def path = TransitionPath(node, recursive);
      path.Traverse();
      //def tran = path.Transition;
      //tran.ChangePath(path)
    }

    public FromRegion(this node : StateTransition) : option[FsmState]
    {
      node.Parent.PartOfSubRegion()
    }
    //{
    //  get
    //  {
    //    From.PartOfSubRegion()
    //  }
  }
  
  public module PseudoStateFuncs
  {
        public GetName(this node : PseudoStateNode) : string
        {
          def state = node.Parent;
          def state_val = state.Data;
          match (node.Value)
          {
            | PseudoStateNode.History(type = t) => 
            
              def type = match (t)
                          {
                            | HistoryType.Deep     => "Deep"
                            | Shallow              => "Shallow"
                            | None                 => ""
                          }

              
              if (state.History().IsOne) $"$(state_val)History" else $"$(state_val)$(type)History"
              
           | PseudoStateNode.Terminate => $"$(state_val)Terminate"
           | Fork(target = t)          => $<#Fork$(state_val)To..$(t;"_")#>
           | n                         => n.ToString()
           //| FsmNode.State(st)                                => st.Value.Name
           //| FsmNode.PseudoState(n)                           => n.ToString()
          }
        }

        public SimpleName(this node : PseudoStateNode) : string
        {
          def state = node.Parent.Data;
          match (node.Value)
          {
            | PseudoStateNode.History => $"$(state)History"
            | _                       => null
          }
        }
        
        
  }
}

