using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

namespace Nemerle.Statechart
{

  [Record]
  public class NodeReference
  {
    public Num           : int;
    public Source        : FsmState;
    public Dest          : FsmState;
    public SourceChange  : FsmState * FsmState -> FsmState;
    public DestChange    : FsmState * FsmState -> FsmState;
    public SourceVersion : FsmState -> uint;
    public DestVersion   : FsmState -> uint;
  }

/// <summary>
/// Description of ChangeManager.
/// </summary>
  public class ChangeManager
  {
    mutable changes    : array[list[FsmState -> FsmState]] = array[];
    analyser   : FsmAnalyser;

    public this(an : FsmAnalyser) 
    {
      this.analyser = an
    }

    statemap : StateMap
    {
      get
      {
        analyser.statemap
      }
    }

    public StateMapChanged() : void
    {
      def num = statemap.GlobalId;
      when (num != changes.Length)
      {
        Array.Resize(ref changes, num)
      }
    }

    public Add(num : int, obj : FsmState -> FsmState) : void
    {
      def ch = changes[num];
      def ch = if (ch != null) obj :: ch else obj :: [];
      changes[num] = ch;
    }

    public CheckChange() : list[FsmState]
    {
      def check(ch, i)
      {
        def st = statemap.Get(i);

        def change(uf, a)
        {
          def src = match (a.Find(x => x.Num == i))
                     {
                       | Some(st) => st
                       | _        => st
                     }
          uf(src) :: a
        }

        ch.FoldLeft([], change)
      }

      changes.SelectMany(check).NToList()
    }

  }



}
