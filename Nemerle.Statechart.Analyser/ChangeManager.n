using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

namespace Nemerle.Statechart
{

  [Record]
  public class NodeReference
  {
    public Num           : int;
    public Source        : FsmState;
    public Dest          : FsmState;
    public SourceChange  : FsmState * FsmState -> FsmState;
    public DestChange    : FsmState * FsmState -> FsmState;
    public SourceVersion : FsmState -> uint;
    public DestVersion   : FsmState -> uint;
  }

  /// <summary>
  /// Description of ChangeManager.
  /// </summary>
  public class ChangeManager
  {
    changes    : array[list[FsmState -> FsmState]] = array[];
    analyser   : FsmAnalyser;

    public this(an : FsmAnalyser) 
    {
      this.analyser = an
    }

    statemap : StateMap
    {
      get
      {
        analyser.statemap
      }
    }

    public StateMapChanged() : void
    {
      def num = statemap.GlobalId;
      when (num != references.Length)
      {
        Array.Resize(ref references, num);
        def ch = BitArray(num);
        when (changes != null) changes.OfType.[bool]().IterI(ch.Set);
        changes = ch
      }
    }

    public static throw_err() : void
    {
      throw InvalidOperationException("more than one modification detected!");
    }

    public Add(obj : FsmState -> FsmState) : void
    {
        changes.Add(obj)
    }

    public CheckChange() : void
    {
    }

  }



}
