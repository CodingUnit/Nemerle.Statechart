using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NGenerics.DataStructures.Trees;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMachines.
  /// </summary>
  class StateMachines
  {
    
    public static InitInline(this _st : FsmState) : void
    {
      #if 0 
      | GeneralTree(Data = FsmState.InlinedSubMachineInstance(instance_of = instance_of, name = name, copy_num = c)) => 
      
      //def (FsmState.InlinedSubMachineInstance(i, , Num = cur_num, copy_num = c)) = st.Data; 

          def transitions = st.Transitions();
          //def find_inst   = inst.Find(x => x.Num == instance_of.Num).ObjFromOption();
          //def base_inst   = find_inst :> FsmState.InlinedSubMachine ?? instance_of;

          def num         = instance_of.NCopy() + 1; // increment copy number

          def st          = instance_of.GetCopy(num); // copy state and its content, updating references accordingly
          st.Update(x => x.ChangeNameCopyNum(name, c)); // leave name id and transitions to outer world as in instance
          st.Analyser().statemap.Transitions[st] = transitions.NToList();
          //def new_st      = st.AllStates.ToArray(); // take all states in new sm copy
          //def old_st      = instance_of.AllStates.ToArray();
          
          //assert2(new_st.Length     == old_st.Length);

          //def new_st       = st.AllStates.ToArray(); // take all states in new sm copy

          //def update_base_inst(s, _)
          //{
          //  def check_tran(tr, ntran)
          //  {
          //    tr.ZipLazy(ntran).Map((i, n) => i.ChangeClones(n :: i.clones));
          //  }

          //  match (new_st.Find(o => o.cloneFor.Num == s.Num))
          //  {
          //    | Some(st) => // // if it is state machine instance don't touch external transitions
          //                  def trans     = if (st.Num != cur_num) check_tran(s.transitions, st.transitions) else s.transitions;
          //                  def int_trans = check_tran(s.internal_tran, st.internal_tran);
          //                  def init      = check_tran(s.initial, st.initial);
          //                  s.ChangeClonesInitialInternalTranTransitions(st :: s.clones, init, int_trans, trans)

          //    | _        => throw InvalidOperationException("unknown state machine state")
          //  }
          //}

          // TODO: решить проблемы с клонами, они должны быть только на уровне инстанций fsm, в ID и не более
          //def base_inst   = base_inst.ReduceSingle(update_base_inst); // updating base instance clones information

          // if have processed base sm type exclude it
          //def inst = if (find_inst != null) inst.Exclude(x => x.Num == base_inst.Num) else inst;
          // updates state map
          //(st, base_inst :: inst) // add base sm type to accumulator
       | _ => ()
       #endif
    }

  }
}
