using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  partial class TraversePath
  {
    public Source : ActiveStateConfig;
        
    tran_target   : HTarget;
    
    public tran_path   : TransitionPath;
    
    path : PathCalc = PathCalc();
    
    tree_trav : TraverseDecisionTree;
    
    public this(trav : TraversePath, source : ActiveStateConfig, tar : HTarget)
    {
      this.tree_trav = trav.tree_trav;
      tran_path = trav.tran_path;
      Source = source;
      //TargetState = target;
      tran_target = tar;
    }
    
    public this(source : ActiveStateConfig, tran_path : TransitionPath)
    {
      Source = source;
      //TargetState = target;
      this.tran_path = tran_path;
      tran_target = tran_path.transition.Target;
      tree_trav = TraverseDecisionTree(transition, path, this);
    }
    
    TargetStates : list[HState]
    {
      get
      {
        match (tran_target)
        {
          | HTarget.State(st)                          => st :: []
          | HTarget.PseudoState(HPseudoState.Fork(st)) => st
          | _                                          => []
        }
      }
    }
    
    Local : bool
    {
      get
      {
        tran_path.transition.Local || tran_target is HTarget.PseudoState
      }
    }
    
    [Memoized]
    SourceConfig : list[HState]
    {
      get
      {
        match (tran_source)
        {
          | State                  
          | HTarget.PseudoState(HPseudoState.Join) => Source.states
          | HTarget.PseudoState(p)                 => p.state.active_config
          | _                                      => []
        }
      }
    }

    [Memoized]
    FixedStates : list[HState]
    {
      get
      {
        if (Target != null)
        {
          def fixed_src = Source.states.Exclude(x => !x.regions.ContainsIn(FixedRegions));
          def fixed_tar = Target.states.Exclude(x => !x.regions.ContainsIn(FixedRegions));
          def intersection = fixed_src.Intersect(fixed_tar).NToList();
          intersection
        } else []
      }
    }
    
    [Memoized]
    SourceRegs : list[HState]
    {
      get
      {
        MainSourceConfig.SelectMany(_.regions).NToList()
      }
    }
    
    [Memoized]
    TargetRegs : list[HState]
    {
      get
      {
        if (TargetStates != null) TargetStates.SelectMany(x => x.regions).NToList() else []
      }
    }
    
    [Memoized]
    FixedRegions : list[HState]
    {
      get
      {
        SourceRegs.Intersect(TargetRegs).NToList()
      }
    }
    
    [Memoized]
    Target : ActiveStateConfig
    {
      get
      {
        if (!TargetStates.IsEmpty()) GetTargetConfig() else null
      }
    }
    
    GetTargetConfig() : ActiveStateConfig
    {
      if (FixedRegions.IsEmpty())
      {
        tran_path.InitialConfiguration(TargetStates)
      } else
      {
        def tar = TargetStates.SelectMany(x => x.active_config).NToList();
        def src = Source.states.Exclude(y => !y.regions.ContainsIn(FixedRegions));
        def target = src.FoldLeft(tar, (x, a) => if (TargetStates.Exists(y => x.SameRegion(y))) a else x :: a);
        tran_path.InitialConfiguration(target)
      }
    }
    
    [Memoized]
    TargetConfig : list[HState]
    {
      get
      {
        match (tran_target)
        {
          | HTarget.PseudoState(HPseudoState.Fork)
          | State                                  => Target.states
          | HTarget.PseudoState(p)                 => p.state.active_config
          | _                                      => []
        }
      }
    }
    
    [Memoized]
    MainSourceConfig : list[HState]
    {
      get
      {
        if (MainSource != null) MainSource.SelectMany(x => x.active_config).Distinct().NToList() else []
      }
    }
    
    [Memoized]
    MainSource : list[HState]
    {
      get
      {
        match (tran_source)
        {
          | State(st)                                           => st :: []
          | HTarget.PseudoState(HPseudoState.Join(states = st)) => st
          | HTarget.PseudoState(p)                              => p.state :: []
          | _                                                   => []
        }
      }
    }
    
    [Memoized]
    public MainTarget : HState
    {
      get
      {
        match (tran_target)
        {
          | HTarget.PseudoState(null) => null
          | HTarget.PseudoState(p)    => p.state
          | State(st)                 => st
          | _                         => null
        }
      }
    }
    
    [Memoized]
    MainTargetConfig : list[HState]
    {
      get
      {
        if (MainTarget != null) MainTarget.active_config else []
      }
    }
    
    IsInternal : bool
    {
      get
      {
        match (transition.Target)
        {
          | HTarget.Nowhere
          | HTarget.Defer => true
          | _             => false
        }
      }
    }
    
    transition : HTransition
    {
      get
      {
        tran_path.transition
      }
    }
    
    tran_source : HTarget
    {
      get
      {
        transition.Source
      }
    }
    
    [Memoized]
    LcaConfig : list[HState]
    {
      get
      {
        if (Lca != null) Lca.active_config else []
      }
    }
    
    [Memoized]
    Lca : HState
    {
      get
      {
        if (Local) MainSourceConfig.DupLast(MainTargetConfig) else
          MainSourceConfig.ChopLast().NToList().DupLast(MainTargetConfig.ChopLast().NToList())// TranTargetState
      }
    }
        
    static CheckCompletion(act : ActiveStateConfig) : TargetDeterminator
    {
      def simple = act.simple_states;
      if (simple.All(_.IsFinal))
      {
        TargetDeterminator.Completion(act)
      } else
      {
        def w_completion = simple.Filter(x => x.transitions.Exists(_.IsCompletion));
        def w_do = w_completion.Filter(x => !x.do_activity.IsEmpty());
        foreach (st in w_do)
        {
          st.do_activity.Iter(x => x.need_completion = true);
        }
        match (w_completion, w_do)
        {
          | (_ :: _, []) => TargetDeterminator.Completion(act)
          | _            => TargetDeterminator.State(act)
          
        }
      }
    }

    [Memoized]
    ExitPath : list[HState]
    {
      get
      {
        def to_lca = SourceConfig.LastElems(Lca);
        def wo_fixed = to_lca.Exclude(FixedStates);
        wo_fixed.Reverse()
      }
    }
    
    [Memoized]
    EntryPath : list[HState]
    {
      get
      {
        def from_lca = TargetConfig.LastElems(Lca);
        def wo_fixed = from_lca.Exclude(FixedStates);
        wo_fixed
      }
    }
    
    ExitSource() : void
    {
      path.AddExit(ExitPath)
    }
    
    Action() : void
    {
      path.AddAction(transition.Actions)
    }
    
    EntryTarget() : void
    {
      path.AddEntry(EntryPath)
    }
    
    TraverseJunction(j : HPseudoState.Junction) : TargetDeterminator
    {
      tree_trav.Traverse();
      def tree = tree_trav.ResultTree;
      //j.decision_tree = tree;
      TargetDeterminator.Junction(tree, j.name)
    }
    
    public NewTarget(tar : HTarget) : TraversePath
    {
      TraversePath(this, Source, tar)
    }
    
    public ProcessTarget() : TargetDeterminator
    {
      match (tran_target)
      {
        | HTarget.State
        | HTarget.PseudoState(HPseudoState.Fork)          => CheckCompletion(Target)
        | HTarget.PseudoState(HPseudoState.Terminate)     => TargetDeterminator.Terminate()
        | HTarget.PseudoState(HPseudoState.History as h)  => TargetDeterminator.History(h.PseudoState :> PseudoState.History)
        | HTarget.PseudoState(HPseudoState.Junction as j) => TraverseJunction(j)
        | HTarget.Defer                                   => TargetDeterminator.Defer()
        | _                                               => TargetDeterminator.NoStateChange()
      }
    }

    public CreateEntryPath() : Transition
    {
      Action();
      when (!IsInternal) EntryTarget();
      def target = ProcessTarget();
      def tree = tree_trav.Create(target);
      Transition(Source, null, transition.Trigger, transition.Guard, path.Path, target, tree, 0, 0, transition.Kind, false, false, [], [], TargetStates)
    }
    
    public CreatePath() : Transition
    {
      if (IsInternal)
      {
        Action()
      } else
      {
        when (MainTarget != null)
        {
          ExitSource();
          Action();
          EntryTarget();
        }
      }
      def target = ProcessTarget();
      def tree = tree_trav.Create(target);
      def originate = if (tran_source is HTarget.State(st)) st else null;
      Transition(transition.Location, Source, originate, transition.Trigger, transition.Guard, path.Path, target, tree, 0, 0, transition.Kind, false, false, [], [], TargetStates)
    }
    
  }
}
