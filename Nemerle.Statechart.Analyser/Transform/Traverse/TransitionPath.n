using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  /// <summary>
  /// Description of Config.
  /// </summary>
  class TransitionPath
  {
    public transition : HTransition;

    active_proc : ActiveConfigProcessor;

    public this(tr : HTransition, act_proc : ActiveConfigProcessor)
    {
      transition = tr;
      this.active_proc = act_proc;
    }

    Source : HTarget
    {
      get
      {
        transition.Source
      }
    }

    Target : HTarget
    {
      get
      {
        transition.Target
      }
    }

    SourceState : HState
    {
      get
      {
        match (Source)
        {
          | HTarget.State(st) => st
          | _                 => null
        }
      }
    }
    
    TargetState : HState
    {
      get
      {
        match (Target)
        {
          | HTarget.State(st) => st
          | _                 => null
        }
      }
    }
    
    Local : bool
    {
      get
      {
        transition.Local
      }
    }

    IsCompletion : bool
    {
      get
      {
        transition.IsCompletion
      }
    }

    get_source_configs(st : HState) : list[ActiveStateConfig]
    {
      def st = match (st.hierarchy)
      {
        // simple state
        | []           => Config.Simple(st)
        | head :: []   => // sequential composite state
            if (!Local && IsCompletion) // completion
            {
              def final = head.accept_state.Value;
              Config.Simple(final)
            } else
            {
              Config.Composite(st)
            }
          // concurrent region
        | regs           => if (IsCompletion) 
                            {
                              def final = regs.Map(x => x.accept_state.Value);
                              Config.Concurrent(final)
                            } else Config.Composite(st)
      }
      Solve(st, _.states)
    }

    
    [Memoized]
    source_configs : list[ActiveStateConfig]
    {
      get
      {
        match (transition.Source)
        {
          | HTarget.State(st) => get_source_configs(st)
          | HTarget.PseudoState(p) =>
              match (p)
              {
                | HPseudoState.Join => []
                | _                 => []
              }
          | _ => []
        }
      }
    }

    
    public InitialConfiguration(st : HState) : ActiveStateConfig
    {
      def conf = Solve(Config.Unknown(st), x => x.init_state.Value :: []);
      conf.Head
    }

    public InitialConfiguration(st : list[HState]) : ActiveStateConfig
    {
      def conf = Solve(Config.Concurrent(st), x => x.init_state.Value :: []);
      conf.Head
    }
    
    public static Solve(this proc : ActiveConfigProcessor, conf : Config, selector : HFsm -> list[HState]) : list[ActiveStateConfig]
    {
      def solver = ConfigSolver(conf, selector);
      def conf = solver.Solve();
      proc.CreateConfig(conf)
    }

    Solve(conf : Config, selector : HFsm -> list[HState]) : list[ActiveStateConfig]
    {
      def solver = ConfigSolver(conf, selector);
      def conf = solver.Solve();
      active_proc.CreateConfig(conf)
    }

    CreateTransitionPath(src_conf : ActiveStateConfig, target : HState) : Transition
    {
      def trav = TraversePath(src_conf, target, this);
      trav.CreatePath()
    }
    
    TraversePseudo(source : ActiveStateConfig, _pseudo : HPseudoState) : Transition
    {
      def trav = TraversePath(source, null, this);
      trav.CreatePath()
    }
    
    public TraverseInitial() : Transition
    {
      def source = SourceState.active_config;
      def source = ActiveStateConfig([], source, [], [], null, false);
      //def target = InitialConfiguration(TargetState);
      //CreateTransitionPath(init, source, target) // create nodes for entry exit actions
      def trav = TraversePath(source, TargetState, this);
      trav.CreateEntryPath()
    }
    
    public Traverse() : list[Transition]
    {
      match (Target)
      {
        | HTarget.State(st)         => source_configs.Map(CreateTransitionPath(_, st)) 
        | HTarget.PseudoState(st)   => source_configs.Map(TraversePseudo(_, st))
        | HTarget.Nowhere           => source_configs.Map(CreateTransitionPath(_, null))
      }
    }
  }
}
