using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of TraverseDecisionTree.
  /// </summary>
  [Record]
  class TraverseDecisionTree
  {
    transition : HTransition;

    path : PathCalc;
    
    trav_path : TraversePath;
    
    Source : ActiveStateConfig
    {
      get
      {
        trav_path.Source
      }
    }
    
    [Memoized]
    junction : HPseudoState.Junction
    {
      get
      {
        (transition.Target :> HTarget.PseudoState).node :> HPseudoState.Junction
      }
    }
    
    [RecordIgnore]
    source_tree : DecisionNode {get;set}
        
    [RecordIgnore]
    public ResultTree : DecisionNode {get; private set;}
    
    type : JunctionType
    {
      get
      {
        ((transition.Target :> HTarget.PseudoState).node :> HPseudoState.Junction).type
      }
    }
    
    EmptyTarget(target : TargetDeterminator) : DecisionNode
    {
      //(transition.Source :> HTarget.State).state
      DecisionNode.Target(transition.Actions, path.Path, null, null, [], transition.Target, target)
    }
    
    DefaultTree(target : TargetDeterminator) : DecisionNode
    {
      DecisionNode.Target(transition.Actions, path.Path, null, null, [], transition.Target, target)
    }

    public Create(target : TargetDeterminator) : DecisionNode
    {
      | TargetDeterminator.Junction(tree, _)  => tree
      | _                                     => match (transition.Guard)
                                                 {
                                                   | GuardNode.Empty      => EmptyTarget(target);
                                                   | GuardNode.Expr as g  => def target = DefaultTree(target);
                                                                             def node = DecisionNode.Condition(transition.Actions, PathSequence(), null, null, [], g, target, None());
                                                                             target.Parent = node;
                                                                             node
                                                   | GuardNode.Else       => DefaultTree(target)
                                                 }
    }

    FinalizeTree() : void
    {
      when (type == JunctionType.Junction)
      {
        foreach (node in ResultTree.GetBreadthFirstEnumerable())
        {
          when (!node.ChildNodes.IsEmpty())
          {
            foreach (ch in node.ChildNodes)
            {
              ch.path = node.path + ch.path;
            }
            node.path = PathSequence();
          }
        }
      }
    }
    
    PrepareTree() : void
    {
      source_tree = junction.decision_tree.Clone();
      def guard = transition.Guard;
      def act = transition.Actions;
      when (!act.IsEmpty() || guard.NotEmpty)
      {
        source_tree = DecisionNode.Condition(act, PathSequence(), transition.SourceState, null, [], guard, source_tree, None())
      }
    }
    
    public Traverse() : void
    {
      PrepareTree();
      def tree = source_tree;
      foreach (node in tree.GetBreadthFirstEnumerable())
      {
        def prev_st = if (node.Parent == null) Source.states else node.Parent.state.active_config;
        def current = if (node is DecisionNode.Target(target = tar) as t)
        {
            def ntrav = trav_path.NewTarget(tar);
            def mtar = ntrav.MainTargetConfig;
            t.destination = ntrav.ProcessTarget();
            mtar
        } else
        {
          node.state.active_config
        }

        def path = PathCalc.GetPath(prev_st, current, node.actions);
        node.path = path;
      }
      ResultTree = tree;
      FinalizeTree()
    }

  }
}
