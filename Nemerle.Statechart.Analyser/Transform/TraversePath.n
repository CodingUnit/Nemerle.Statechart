using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  partial class TraversePath
  {
    public Source : ActiveStateConfig;
    public Target : ActiveStateConfig;
    tran_target   : HTarget;
    
    public tran_path   : TransitionPath;
    
    path : PathCalc = PathCalc();
    
    tree_trav : TraverseDecisionTree;
    
    public this(trav : TraversePath, source : ActiveStateConfig, target : ActiveStateConfig, tar : HTarget)
    {
      this.tree_trav = trav.tree_trav;
      Source = source;
      Target = target;
      tran_target = tar;
    }
    
    public this(source : ActiveStateConfig, target : ActiveStateConfig, tran_path : TransitionPath)
    {
      Source = source;
      Target = target;
      this.tran_path = tran_path;
      tran_target = tran_path.transition.Target;
      tree_trav = TraverseDecisionTree(transition, path, this);
    }
    
    Local : bool
    {
      get
      {
        tran_path.transition.Local || tran_target is HTarget.PseudoState(HPseudoState.Junction)
      }
    }
    
    [Memoized]
    SourceConfig : list[HState]
    {
      get
      {
        match (tran_source)
        {
          | HTarget.PseudoState(p) => p.state.active_config
          | State                  => Source.states
          | _                      => []
        }
      }
    }

    [Memoized]
    TargetConfig : list[HState]
    {
      get
      {
        match (tran_target)
        {
          | HTarget.PseudoState(p) => p.state.active_config
          | State                  => Target.states
          | _                      => []
        }
      }
    }
    
    [Memoized]
    MainSource : HState
    {
      get
      {
        match (tran_source)
        {
          | HTarget.PseudoState(p) => p.state
          | State(st)              => st
          | _                      => null
        }
      }
    }
    
    [Memoized]
    public MainTarget : HState
    {
      get
      {
        match (tran_target)
        {
          | HTarget.PseudoState(null) => null
          | HTarget.PseudoState(p)    => p.state
          | State(st)                 => st
          | _                         => null
        }
      }
    }
    
    IsInternal : bool
    {
      get
      {
        transition.Target is HTarget.Nowhere
      }
    }
    
    transition : HTransition
    {
      get
      {
        tran_path.transition
      }
    }
    
    tran_source : HTarget
    {
      get
      {
        transition.Source
      }
    }
    
    
    
    [Memoized]
    LcaConfig : list[HState]
    {
      get
      {
        if (Lca != null) Lca.active_config else []
      }
    }
    
    [Memoized]
    Lca : HState
    {
      get
      {
        if (Local) MainSource.active_config.DupLast(MainTarget.active_config) else
          MainSource.active_super.DupLast(MainTarget.active_super)// TranTargetState
      }
    }
        
    static CheckCompletion(act : ActiveStateConfig) : TargetDeterminator
    {
      def simple = act.simple_states;
      // TODO: final states in each region
      match (simple.Find(_.IsFinal))
      {
        | Some(final)  => match (final.active_super.SelectMany(x => x.transitions.Filter(x => x.IsCompletion)))
                          {
                            | []     => TargetDeterminator.State(act)
                            | _      => TargetDeterminator.Completion(act)
                          }
        | _            => def w_completion = simple.Filter(x => x.transitions.Exists(_.IsCompletion));
                          def w_do = w_completion.Filter(x => !x.do_activity.IsEmpty());
                          foreach (st in w_do)
                          {
                            st.do_activity.Iter(x => x.need_completion = true);
                          }
                          if (w_completion.IsEmpty()) TargetDeterminator.State(act) else TargetDeterminator.Completion(act)
      }
    }

    [Memoized]
    ExitPath : list[HState]
    {
      get
      {
        SourceConfig.LastElems(Lca).Reverse()
      }
    }
    
    [Memoized]
    EntryPath : list[HState]
    {
      get
      {
        TargetConfig.LastElems(Lca)
      }
    }
    
    ExitSource() : void
    {
      path.AddExit(ExitPath)
    }
    
    Action() : void
    {
      path.AddAction(transition.Actions)
    }
    
    EntryTarget() : void
    {
      path.AddEntry(EntryPath)
    }
    
    TraverseJunction(j : HPseudoState.Junction) : TargetDeterminator
    {
      tree_trav.Traverse();
      def tree = tree_trav.ResultTree;
      //j.decision_tree = tree;
      TargetDeterminator.Junction(tree, j.name)
    }
    
    public NewTarget(tar : HTarget) : TraversePath
    {
      | HTarget.State(st) => TraversePath(this, Source, tran_path.InitialConfiguration(st), tar)
      | _                 => TraversePath(this, Source, null, tar)
    }
    
    public ProcessTarget() : TargetDeterminator
    {
      match (tran_target)
      {
        | HTarget.State                                   => CheckCompletion(Target)
        | HTarget.PseudoState(HPseudoState.Terminate)     => TargetDeterminator.Terminate()
        | HTarget.PseudoState(HPseudoState.History as h)  => TargetDeterminator.History(h)
        | HTarget.PseudoState(HPseudoState.Junction as j) => TraverseJunction(j)
        | _                                               => TargetDeterminator.NoStateChange()
      }
    }

    public CreateEntryPath() : Transition
    {
      Action();
      when (!IsInternal) EntryTarget();
      def target = ProcessTarget();
      def tree = tree_trav.Create(target);
      Transition(Source, null, transition.Trigger, transition.Guard, path.Path, target, tree, 0, 0, transition.Kind, false)
    }
    
    public CreatePath() : Transition
    {
      if (IsInternal)
      {
        Action()
      } else
      {
        when (MainTarget != null)
        {
          ExitSource();
          Action();
          EntryTarget();
        }
      }
      def target = ProcessTarget();
      def tree = tree_trav.Create(target);
      def originate = if (tran_source is HTarget.State(st)) st else null;
      Transition(transition.Location, Source, originate, transition.Trigger, transition.Guard, path.Path, target, tree, 0, 0, transition.Kind, false)
    }
    
  }
}
