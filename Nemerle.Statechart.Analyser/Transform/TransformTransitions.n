using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Transitions.
  /// </summary>
  public partial class FsmAnalyser
  {
    ConvertEntryExitPoints() : void
    {
      def check_target(p, t)
      {
        match (p)
        {
          | TransitionTarget.PseudoState(PseudoStateNode.EntryPoint(_, p))          => t.AddAction(p.action);
                                                                                       check_target(p.To, t);
          | TransitionTarget.PseudoState(PseudoStateNode.ExitPoint(tran = Some(p))) => t.AddAction(p.action);
                                                                                       check_target(p.To, t)
          | _                                                                       => p
        }
      }
      
      def tran = StateTransitions.Concat(InitialTran);
      foreach (StateTransition(To = p) as t in tran)
      {
        def tar = check_target(p, t);
        t.To = tar
      }
    }
    
    ConvertInitialTransitions() : void
    {
      // transform action on transition to state
      foreach (FsmState(initial = Some(i)) as state in States)
      {
        def tran = i.tran;
        match (tran.action)
        {
          | []  => ()
          | lst => def st = FsmState(this, StateType.State()); // create simple state
                   st.name = $"$(state)Initial";
                   st.generated = true;
                   def ntran = StateTransition(st, tran.To, TransitionKind.External);// :: [];
                   ntran.trigger = StateEvent.Completion;
                   st.transitions = ntran :: []; // create completion transition to target of initial
                   st.entry = lst.Map(StateAction.Entry(st.ToString(), _, ActionFlags.None)); // entry action to initial actions
                   def sub = state.sub_states;
                   st.Super = state;
                   state.sub_states = sub.AddBefore(st).NToList(); // add substate before other sub states
                   tran.To = TransitionTarget.State(st);
                   tran.action = []; // clear action
        }
      }
    }
    
    /// <summary>
    /// Creating Transitions
    /// </summary>
    CreateTransitions() : void
    {
      CheckAndCreateCompletionTransitions();
      ConvertEntryExitPoints();
      ConvertInitialTransitions();
      //CheckDeferedEvents(); // check defered events
      //CreateAndCheckConflictTransitions(); // create parent transitions
      //CreateDecisionTree();
      
    }

    CheckAndCreateCompletionTransitions() : void
    {
      
      def create_final_state(start, end)
      {
        if (start == end) () else
        {
          when (!start.Super.HaveFinal)
          {
            def final = FsmState(this, StateType.Final());
            start.Super.Add(final);
            def tran = StateTransition(start, TransitionTarget.Final(final), TransitionKind.External);
            start.transitions += [tran];
            create_final_state(start.Super, end)
          }
          create_final_state(start.Super, end)
        }
      }
      
      foreach (st in States)
      {
        when (st.IsSimple || st.HaveFinal)
        {
          def tran = st.SuperStatesInclude.SelectMany(_.CompletionTransitions);
          foreach (tr in tran)
          {
            def from = tr.From;
            create_final_state(st, from)
          }
        }
      }
    }

#if 0    

    RenameTransition(tran : IEnumerable[StateTransition]) : void
    {
      def dups = tran.NToList().Duplicates((x, y) => x.Name.CompareTo(y.Name));
      dups.Iter(x => x.NeedGuardedName = true);
      def dups = tran.DuplicatesGroup(x => x.Name);
      dups.Iter(x => x.Iter(x => Used[x] = false));
      def err = dups.Map(x => FsmError.DuplicateTransition(x.NToList()));
      AddError(err);
    }

#endif

    SubStatesParticipateIn(hist : HPseudoState.History) : IEnumerable[ActiveStateConfig]
    {
      def state = hist.state;
      match (hist.type)
      {
        | HistoryType.Deep     => def confs = state.all_simple_states.Select(x => x.active_config);
                                  def confs = confs.Select(x => ActiveStates.First(y => y.IsThis(x)));
                                  confs
        | HistoryType.Shallow  => match (state.hierarchy)
                                  {
                                    | [reg] => def states = reg.states;
                                               def conf = states.Select(x => ActiveConfigProc.GetInitialConfiguration(x));
                                               //def sort = conf.Map(ConfigSolver.CreateConfig);
                                               def participate = conf.Select(x => ActiveStates.First(y => y.IsThis(x)));
                                               participate
                                    | _     => Enumerable.Empty()
                                  }
        | _                    => Enumerable.Empty()
      }
    }

    CreateHistoryPaths() : void
    {
      def trav = ConfigTraverser([], ActiveConfigProc);
      
      def history = ActiveStates.SelectMany(x => x.states.SelectMany(x => x.history.Value)).Distinct();//HistoryStates.Select(x => x.ToHPseudo :> HPseudoState.History);
      foreach (hist in history)
      {
        def sub = SubStatesParticipateIn(hist);
        def parent = hist.state;
        def tran = hist.default.Map(x => trav.TraverseTran(x).First());
        def res = PseudoState.History(tran, hist.type, hist.state);
        def paths = sub.Map(x => HistoryPathBuilder(trav, parent, x, res).CreatePath());
        foreach (p in paths)
        {
          def active = p.To;
          active.HistoryPath ::= p;
          active.History ::= res;
        }
      }
      
    }
    
    ResolveConflicts() : void
    {
      def is_sub_state_of(x, y)
      {
        y.all_sub_states.ContainsRef(x)
      }
      
      def compare(x, y)
      {
        def x = x.OriginateFrom;
        def y = y.OriginateFrom;
        if (is_sub_state_of(x, y)) -1 else
          if (is_sub_state_of(y, x)) 1 else 0
      }
      
      def guard_compare(x, y)
      {
        match (x.Guard, y.Guard)
        {
          | (GuardNode.Empty, GuardNode.Empty) => 0
          | (GuardNode.Empty, _)               => -1
          | (GuardNode.Else, GuardNode.Empty)  => 1
          | (GuardNode.Else, _)                => -1
          | (_, GuardNode.Empty)               => 1
          | _                                  => 0
        }
      }
      
      def not_originate_from_other_configs(last, tr)
      {
        def source_configs = TransitionPath.GetSourceConfigs(tr, ActiveConfigProc);
        def last = last.Source;
        match (source_configs)
        {
          | [one] => one : object == last
          | _     => false
        }
      }
      
      foreach (conf in ActiveStates)
      {
        def by_trigger = conf.transitions.GroupBy(_.Trigger); // with equal trigger
        foreach (ctrig when ctrig.IsMoreThanOne() in by_trigger) // if transitions in group is more than one
        {
          def grouped_equal_prio = ctrig.NToList().Group(compare); // group by priority of states relations
          grouped_equal_prio.IterI((i, x) => x.Iter(x => x.Priority = i)); // set prio for each group of transition with equal prio
          def (conflict, other) = grouped_equal_prio.Partition(x => x.IsMoreThanOne()); // get conflicting transitions with equal prio
          
          foreach (conf in conflict)
          {
            def dups = conf.Duplicates((x, y) => x.Guard.CompareTo(y.Guard)); // duplicates is several conflicting transitions with equal guard
            dups.Iter(x => AddError(FsmError.DuplicateTransition(x))); // add to error list
          }
          
          def conflict = conflict.Map(x => x.RemoveDuplicatesSort((x, y) => x.Guard.CompareTo(y.Guard))); // remove duplicates from each group
          def trans = conflict + other; // merge again transitions in set
          def trans = trans.Map(x => x.Sort(guard_compare)); // sort each group by guard
          def trans = trans.Flatten(); // remove grouping
          CheckGuards(trans);
          def (last, other) = trans.SplitFind(x => x.Guard.IsEmpty || x.Guard is GuardNode.Else); // find last with no guard or else guard
          def last = last.Last(); // get the last
          def not_used = other.Filter(x => not_originate_from_other_configs(last, x)); // get other that not touch other state configurations
          not_used.Iter(x => AddWarning(FsmWarning.TransitionOverriden(x, last))); // it is always overriden
          when (!other.IsEmpty()) conf.transitions = conf.transitions.Exclude(other); // exclude it from the set
        }
      }
    }
    
    CheckGuards(tran : list[Transition]) : void
    {
      match (tran.Partition(x => x.Guard is GuardNode.Else))
      {
        | ([], _)  => ()
        | ([e], g) => def guards_tr = g.Filter(x => x.Guard.NotEmpty);
                      when (guards_tr.IsEmpty()) AddError(FsmError.ElseMustHaveOtherTransition(e));
        | (e, _)   => AddError(FsmError.SeveralElseGuards(e))
      }
    }
    
    MergeTransitions() : void
    {
      
      def set_to_else(t, n)
      {
        foreach (node in t.GetBreadthFirstEnumerable())
        {
          | DecisionNode.Condition(else_node = None) as node => node.else_node = Some(n)
          | _                                                => ()
        }  
      }
      
      def merge_trans(tr, a)
      {
        set_to_else(a, tr);
        a
      }
      
      foreach (conf in ActiveStates)
      {
        def by_trigger = conf.transitions.GroupBy(_.Trigger);
        foreach (ctrig when ctrig.IsMoreThanOne() in by_trigger)
        {
          def by_priority = ctrig.OrderBy(x => x.Priority);
          def trees = by_priority.Map(x => x.DecisionTree);
          def tree = trees.Reduce(merge_trans);
          def tran = by_priority.First();
          tran.Grouped = by_priority.Count();
          def delete = by_priority.Except(tran);
          conf.transitions = conf.transitions.Exclude(delete.NToList());
          tran.DecisionTree = tree
        }
      }
    }
    
  }
}
