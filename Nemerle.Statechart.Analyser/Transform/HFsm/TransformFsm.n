using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Transform.
  /// </summary>
  partial class FsmAnalyser
  {

    finite_automatas : list[HFsm] {get;set;default []}

    transitions : list[HTransition] {get;set;default []}

    convert_FsmStateToHState(st : FsmState) : HState
    {
      def tran = st.transitions;//.Filter(x => x.To.TargetStates.All(y => y.Super == x.From.Super));
      def tran = tran.Map(x => x.ToHTransition);
      def newst = st.ToHState;
      
      newst.transitions = tran;
      newst
    }

    mutable finite_number : int;
    
    CreateFiniteAutomata() : void
    {

      //def connected_transitions(gr, initial)
      //{
      //  def tr = gr.SelectMany(_.transitions).Append(initial); // transitions in group
      //  def to = tr.Select(x => x.To); // to target
      //  def targets = to.SelectMany(_.TargetStates); // target states
      //  gr//.Filter(targets.Contains) // only those states transition targets connects at this level
      //}

      def create_automata(st, a)
      {
        //st.ToHState.hierarchy = ;
        def sub = st.sub_states;
        match (st.type)
        {
          | StateType.Region    => a 
          | StateType.SubRegion with super = convert_FsmStateToHState(st.Super)
          | _ with super = convert_FsmStateToHState(st) => 
            match (sub)
            {
              | []  => a
              | sub =>
                      def group = sub;//connected_transitions(sub, st.initial_tran);
                      def states = group.Map(convert_FsmStateToHState);
                  
                      def init = st.InitialState.Map(convert_FsmStateToHState);
                      def history = st.history.Map(x => x.ToHPseudo :> HPseudoState.History);
                      def accept = sub.Find(_.IsFinal).Map(convert_FsmStateToHState);
                      def name = $"A$finite_number";
                      finite_number++;
                      def fsm = HFsm(name, states, init, accept, super, history);
                      foreach (st in states)
                      {
                        st.automaton = fsm;
                        st.super = super;
                      }
                      fsm :: a
                    }
            }
      }

      
      def fsms = States.FoldBack([], create_automata);
      foreach (st in States)
      {
        match (st.type)
        {
          | StateType.Region      => def sreg = st.sub_states;
                                     def fsms = sreg.Map(x => x.sub_states.First(x => x.ToHState.automaton != null).ToHState.automaton);
                                     st.ToHState.hierarchy = fsms;
          | StateType.SubRegion   => ()
          | _ when st.IsComposite => 
                                     def fsm = st.sub_states.First(x => x.ToHState.automaton != null).ToHState.automaton;
                                     st.ToHState.hierarchy = [fsm];
          | _                     => st.ToHState.hierarchy = [];
        }
      }
      finite_automatas = fsms;
      transitions = StateTransitions.MapToList(_.ToHTransition);
      CreateDecisionTree();
    }

    CreateDecisionTree() : void
    {
      foreach (tr in transitions)
      {
        match (tr.Target)
        {
          | HTarget.PseudoState(HPseudoState.Junction as j) => DecisionNode.create_decision_tree(j, tr)
          | _                                               => ()
        }
      }
    }
    
    TransformFsm() : void
    {
      CreateFiniteAutomata();
      CreateActiveConfigurations();
    }
    
  }
}
