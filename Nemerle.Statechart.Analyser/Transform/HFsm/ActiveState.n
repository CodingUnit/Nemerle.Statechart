using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{


  /// <summary>
  /// Description of ActiveState.
  /// </summary>
  [Record]
  public class ActiveStateConfig : IEquatable[ActiveStateConfig]
  {
    [Memoized]
    public name : string
    {
      get
      {
        def states = if (simple_states.IsEmpty()) states else simple_states;
        $<#..$(states;"")#>
      }
    }
    
    public transitions : list[Transition] {get;set;default []}

    public states : list[HState]; // states in it resides
    //public state : FsmState {get;set;}

    [Memoized]
    public deffered_events : list[StateEvent]
    {
      get
      {
        states.SelectMany(_.deferred_events).NToList()
      }
    }

    public IsThis(st : IEnumerable[HState]) : bool
    {
      simple_states.All(st.ContainsRef)
    }

    public HistoryPath : list[HistoryPath] {get;set;default []}

    public History : list[PseudoState.History] {get;set;default []}

    public Id : IdType {get;set;}

    [Memoized]
    public regions : list[HState]
    {
      get
      {
        states.Filter(_.IsConcurrent)
      }
    }
    
    [Memoized]
    public simple_states : list[HState]
    {
      get
      {
        states.Filter(_.IsSimple)
      }
    }

    public Equals(b : ActiveStateConfig) : bool
    {
      this : object == b
    }
    
    
    public override GetHashCode() : int
    {
      name.GetHashCode()
    }
    
    public Used : bool {get;set;default false}
    public override ToString() : string { name }
  }

  [Record]
  public class Transition : Located, IEquatable[Transition]
  {
    public Source  : ActiveStateConfig;
    
    /// <summary>
    /// source of transition arrow
    /// </summary>
    public OriginateFrom : HState;
    
    
    public Trigger : StateEvent;
    public Guard   : GuardNode;
    //public Actions : list[FsmAction];
    public Path    : PathSequence;
    public Target  : TargetDeterminator;

    public DecisionTree : DecisionNode {get;set;}
    
    public Priority : int {get;set;default 0}
    
    public Grouped : int {get;set;default 1}
    
    public Kind : TransitionKind;
    
    public Used : bool {get;set;default false}
    
    public TargetState : HState;
    
    [Memoized]
    public Name : string
    {
      get
      {
        match (Kind)
        {
          | Internal => $"InternalTransition$(Source)By$Trigger"
          | Initial  => $"InitialTransitionFrom$(Source)To$Target"
          | _        => def tar = Target.ToString();
                        if (tar.IsEmpty()) $"Transition$(Source)By$Trigger" else $"Transition$(Source)To$(Target)By$Trigger"
        }
      }
    }

    public Equals(b : Transition) : bool
    {
      Name == b.Name
    }
    
    public override GetHashCode() : int
    {
      Name.GetHashCode()
    }
    
    public override ToString() : string { Name }

  }

  [Record]
  public variant PseudoState
  {
    | History 
      {
        default : option[Transition];
        type    : HistoryType;
        state   : HState;

        [Memoized]
        Name : string
        {
          get
          {
            def type = match (type)
                        {
                          | HistoryType.Deep     => "Deep"
                          | Shallow              => "Shallow"
                          | None                 => ""
                        }

            if (state != null)
            {
              if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
            } else "History";
          }
        }

        public override ToString() : string
        {
          Name
        }
      }
  }

  public variant TargetDeterminator
  {
    | State { state : ActiveStateConfig }
    | History { state : HPseudoState.History; }
    | NoStateChange
    | Terminate// { node : HPseudoState.Terminate; }
    | Completion { state : ActiveStateConfig; }
    | Junction { node : DecisionNode; name : string;}

    public override ToString() : string
    {
      match (this)
      {
        | State(st)       => $"$st"
        | History(h)      => $"$h"
        | Terminate       => "Terminate"
        | Junction(_, n)  => $"Junction$n"
        | Completion(st)  => $"$(st)Completion"
        | _               => ""
      }
    }
  }

  //[Record]
  //public class Transition
  //{
  //  public trigger : StateEvent;

  //  public guard : GuardNode;

  //  public path : PathSequence;

  //  public end : TransitionEnd;

  //}

  class ActiveConfigProcessor
  {
    
    active_configs : List[ActiveStateConfig] = List();

    public ActiveConfigs : IEnumerable[ActiveStateConfig]
    {
      get
      {
        active_configs
      }
    }
    
    public CreateConfig(seq : list[Configuration]) : list[ActiveStateConfig]
    {
      seq.Map(x => CreateConfig(x.States))
    }

    public static Sort[T](this lst : IEnumerable[T], func : T -> HState, desc : bool = false) : list[T]
    {
      def sort(x, y)
      {
        def st1 = func(x);
        match (st1.regions)
        {
          | [] => 0
          | r :: _ => st1.region_pos(r) - func(y).region_pos(r)
        }
      }
      
      def by_reg = lst.NToList().Sort(sort);
      def by_hierarchy = if (desc) by_reg.OrderByDescending(x => func(x).hierarchy_pos) else by_reg.OrderBy(x => func(x).hierarchy_pos);
      by_hierarchy.ThenBy(x => func(x).Location).NToList();
    }
    
    public CreateConfig(seq : IEnumerable[HState]) : ActiveStateConfig
    {
      def result = seq.SelectMany(_.active_config).Distinct().NToList();
      def sort = result.Sort(x => x);
      match (active_configs.Find(x => x.IsThis(sort)))
      {
        | null => def conf = ActiveStateConfig([], sort, [], [], null, false);
                  active_configs.Add(conf);
                  conf
        | c  => c
      }

    }

  }
}
