using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Transitions.
  /// </summary>
  public partial class FsmAnalyser
  {
    ConvertEntryExitPoints() : void
    {
      def check_target(p, t)
      {
        match (p)
        {
          | TransitionTarget.PseudoState(PseudoStateNode.EntryPoint(_, p))          => t.AddAction(p.action);
                                                                                       check_target(p.To, t);
          | TransitionTarget.PseudoState(PseudoStateNode.ExitPoint(tran = Some(p))) => t.AddAction(p.action);
                                                                                       check_target(p.To, t)
          | _                                                                       => p
        }
      }
      
      def tran = StateTransitions.Concat(InitialTran);
      foreach (StateTransition(To = p) as t in tran)
      {
        def tar = check_target(p, t);
        t.To = tar
      }
    }
    
    ConvertInitialTransitions() : void
    {
      // transform action on transition to state
      foreach (FsmState(initial = Some(i)) as state in States)
      {
        def tran = i.tran;
        match (tran.action)
        {
          | []  => ()
          | lst => def st = FsmState(this, StateType.State()); // create simple state
                   st.name = $"$(state)Initial";
                   def ntran = StateTransition(st, tran.To, TransitionKind.External);// :: [];
                   ntran.trigger = StateEvent.Completion;
                   st.transitions = ntran :: []; // create completion transition to target of initial
                   st.entry = lst.Map(StateAction.Entry(st.ToString(), _, ActionFlags.None)); // entry action to initial actions
                   def sub = state.sub_states;
                   st.Super = state;
                   state.sub_states = sub.AddBefore(st).NToList(); // add substate before other sub states
                   tran.To = TransitionTarget.State(st);
                   tran.action = []; // clear action
        }
      }
    }
    
    /// <summary>
    /// Creating Transitions
    /// </summary>
    CreateTransitions() : void
    {
      CheckAndCreateCompletionTransitions();
      ConvertEntryExitPoints();
      ConvertInitialTransitions();
      //CheckDeferedEvents(); // check defered events
      //CreateAndCheckConflictTransitions(); // create parent transitions
      //CreateDecisionTree();
      
    }

    CheckAndCreateCompletionTransitions() : void
    {
      
      def create_final_state(start, end)
      {
        if (start == end) () else
        {
          when (!start.Super.HaveFinal)
          {
            def final = FsmState(this, StateType.Final());
            start.Super.Add(final);
            def tran = StateTransition(start, TransitionTarget.Final(final), TransitionKind.External);
            start.transitions += [tran];
            create_final_state(start.Super, end)
          }
          create_final_state(start.Super, end)
        }
      }
      
      foreach (st in States)
      {
        when (st.IsSimple || st.HaveFinal)
        {
          def tran = st.SuperStatesInclude.SelectMany(_.CompletionTransitions);
          foreach (tr in tran)
          {
            def from = tr.From;
            create_final_state(st, from)
          }
        }
      }
    }

    RenameTransition(tran : IEnumerable[StateTransition]) : void
    {
      def dups = tran.NToList().Duplicates((x, y) => x.Name.CompareTo(y.Name));
      dups.Iter(x => x.NeedGuardedName = true);
      def dups = tran.DuplicatesGroup(x => x.Name);
      dups.Iter(x => x.Iter(x => Used[x] = false));
      def err = dups.Map(x => FsmError.DuplicateTransition(x.NToList()));
      AddErrors(err);
    }

    ResolveConflictTransitions(st : FsmState, trans : IEnumerable[StateTransition]) : void
    {
      def conflict = trans.OrderByDescending(x => x.From.hierarchy_pos).NToList();
      def by_hierarchy = conflict.GroupBy(x => x.From.hierarchy_pos);
      
      // check for duplicates
      foreach (tr in by_hierarchy)
      {
        def dups = tr.NToList().Duplicates(FsmState.Compare(StateTransition.GuardComparer)); // find duplicates with same guards and same triggers
        when (!dups.IsEmpty())
        {
          AddError(FsmError.DuplicateTransition(dups))
        }
      }
      
      def search_for_no_guard(g)
      {
        if (!g.IsMoreThanOne()) g else
          match (g.Find(x => x.guard.IsEmpty))
          {
            | Some(t) => def tr   = g.Except(t); // without guard already enabled and have more priority
                         def warn = tr.Map(FsmWarning.TransitionOverriden(_, t)); // signal this, not needed declaration, design error
                         AddWarnings(warn);
                         ListUtils.SingleElement(t)

            | _       => g
          }
      }


      def resolve_on_levels = by_hierarchy.SelectMany(search_for_no_guard).NToList();
      //def del = trans.Except(resolve_on_levels);
      def (left, _) = resolve_on_levels.SplitFind(x => x.guard.IsEmpty);
      def del = trans.Except(left);
      st.DeleteTransitions(del);// conflicted deleted from set of enabled without signal, normal situation
    }
    
    CreateTransitionPaths() : void
    {
      //def traverse()
      //{
      //  traverser = TransitionTraverser(this);
      //  traverser.Add(TopState.initial_tran.Value);
      //  traverser.Traverse(); // model the fsm traversing states and transition from top recursively through initial transition and pseudo states
      //  traverser = null;
      //}

      //all_transitions_with_spec.dup
      def obj = States.Select(_ : object).Concat(all_transitions_with_spec).Concat(PseudoStates); // all_transitions_with_spec
      obj.Iter(Used.Add(_, false)); // init used properties

      //traverse(); // traverse paths
      CreateTransitionsWithPaths()
    }

    CreateTransitionsWithPaths() : void
    {
      def empty = empty_states.Select(FsmWarning.StateNotUsed); // warning about all without substates and not lived that is not used
      def not_used = not_used_transitions.Select(FsmWarning.TransitionNotUsed);
      AddWarnings(empty);
      AddWarnings(not_used); // determine used elements

      RenameTransition(used_transitions);
      def hist = not_used_history.Select(FsmWarning.HistoryNotUsed);
      AddWarnings(hist)
    }

    CreateHistoryPaths() : void
    {
      def create_hist_path(h, a)
      {
        def sub = h.SubStatesParticipateIn;
        def parent = h.state;
        sub.FoldLeft(a, (x, a) => HistoryPath(parent, x, h) :: a)
      } 

      def paths = HistoryStates.FoldLeft([], create_hist_path);
      paths.Iter(_.CreatePath());
      def paths = paths.GroupBy(x => x.To).Select(x => (x.Key, x.NToList()));
      HistoryPaths = Hashtable(paths);
    }
  }
}
