using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using PathNode;
  using TransitionDestination;
  using TransitionTarget;
  using FsmState;
  /// <summary>
  /// Transition Path
  /// </summary>
  public partial class TransitionPath
  {
    [Accessor] mutable path : PathNode = Empty();
    mutable recursive : bool;
    traverser : TransitionTraverser;
    [Accessor] transition : StateTransition;
    analyser : FsmAnalyser;
    
    AddNode(node : PathNode) : void
    {
      path += node
    }

    TraverseChoice(j : PseudoStateNode.Junction, tran : StateTransition) : TransitionDestination
    {
      | (PseudoStateNode.Junction(decisionTree = t, state = jst), _) =>

          DefPath(tran.From, jst);
          def exit = ExitNodeCreate([jst]);
          AddNode(exit);
          def init_path = path;
          //path = Empty();
          
          def create_tree_node(t)
          {
              | DecisionNode.Condition(state = st, PrevState = pst) =>
                def node_path = GetPath(pst, st, true, jst);
                t.ChangeNodePathOutPath(node_path, Empty())
          }
          
          def create_targ_tree(t)
          {
            | DecisionNode.Target(target = tar, state = st, PrevState = pst) as t =>
                path = Empty();
                def node_path = GetPath(pst, st, true, jst);
                DefPath(st, tar.ToState, true, jst);
                def dest = TraverseTargetReg(tar, tran);
                def out_path = path;//.Clone();
                t.ChangeDestinationOutPathNodePath(dest, out_path, node_path)
            //| _ => null
          }

          def dest_tree = t.FoldThis((_, b, e, t) => create_tree_node(t.ChangeBodyElseNode(b, e)), 
                                     (_, _, t) => create_targ_tree(t));
          path = init_path;
          //j.DecisionTree = dest_tree;
          JunctionNode(dest_tree)
    }

    TraverseJunction(j : PseudoStateNode.Junction, tran : StateTransition) : TransitionDestination
    {
      | (PseudoStateNode.Junction(decisionTree = t, state = jst), _) =>

            DefPath(tran.From, jst);
            def exit = ExitNodeCreate([jst]);
            AddNode(exit);

            def init_path = path;
                      
          def create_targ_tree(t)
          {
            | DecisionNode.Target(target = tar, state = st) as t =>
                  path = Empty();
                  def node_path = init_path + GetPath(jst, st, true, jst);
                  DefPath(st, tar.ToState, true, jst);
                  def dest = TraverseTargetReg(tar, tran);
                  def out_path = path;//.Clone();
                  t.ChangeDestinationOutPathNodePath(dest, out_path, node_path)
            //| _ => null
          }

          def dest_tree = t.FoldThis(null, (_, _, t) => create_targ_tree(t));
          path = Empty();
            //j.DecisionTree = dest_tree;
          JunctionNode(dest_tree)
    }

    TraverseMerge(j : PseudoStateNode.Merge, tr : StateTransition) : TransitionDestination
    {
      | (PseudoStateNode.Merge(to = TransitionTarget.JunctionNode(guard = g, action = a, to = t)), _) =>

          match (g)
          {
            | GuardNode.Empty => ()
            | g               => transition.AddCheck(CheckNode.Guard([g]));
          }
          match (a)
          {
            | Some(a) => AddNode(Action(a))
            | _ => ()
          }

          DefPath(j.state, t.ToState, false);
          TraverseTargetReg(t, tr)
    }

    TraversePseudo(st : PseudoStateNode, tr : StateTransition) : TransitionDestination
    {
      match (st)
      {
        | Terminate  as n                             => Terminate(n)
        | Fork(target = t) as f                       => TraverseFork(f, t)
        | Junction(type = JunctionType.Choice)   as j => TraverseChoice(j, tr)
        | Junction as j                               => TraverseJunction(j, tr)
        | Merge    as m                               => TraverseMerge(m, tr)
        | _                                           => Unknown()
      }
    }
	  /// <summary>
	  /// Processing final state node
	  /// </summary>
    TraverseFinal(st : FsmState.Final) : TransitionDestination
    {
      | FsmState.Final(PartOfRegion = Some(r), PartOfSubRegion = Some(sr), completion_transitions = tran) =>
          match (tran)
          {
            | [] => State(st)
            | tran =>
                def st = st.ChangeLived(true);
                //st.Completion = tran;
                traverser.Add(tran.NToList());
                when (recursive && st.paths == null) traverser.Add(st);
                Final(st, sr, r, tran)
          }

      | Final(super_state = parent, completion_transitions = tran) =>

          def history = st.ParticipateInHistory;
          def hist_clear = ClearHistory(history); // create clear history node
          // find completion transition
          match (tran)
          {
            | []  => State(st);
                  // if have completion transition without GuardNode
            | [Transition(Guard = None()) as tran]  =>
                  // if not defined transition path create it
                when (tran.Path == null) tran.TraversePath(analyser);
                AddNode(hist_clear); // get nodes and add to path
                TransitionExecute(tran)
                  // if we have transition list
            | tran  =>
                AddNode(hist_clear); // add node
                traverser.Add(tran.NToList());
                Choice(parent, tran, Some(st))
          }
    }


    TraverseHistory(hist : StateHistory) : TransitionDestination
    {
      | StateHistory where (default = Some(Default(ToState = _) as tran))  =>
          //h.Used = true;
          traverser.Add(tran);
          History(hist)
      | _  =>
          //hist.Used = true;
          History(hist)
    }

    TraverseSubMachine(fsm : FsmState.SubMachine, state : string) : TransitionDestination
    {
      def fsm = fsm.ChangeLived(true);
      TransitionDestination.SubMachine(fsm, state)
    }
    
    TraverseDefaultTransition(tran : StateTransition.Default) : TransitionDestination
    {
      | Default(history = hist, Source = src, From = from) =>
      
          DefPath(src, from, tran); // unwind path from Source up to transition begining (From)
          def st = tran.ToState;
          when (st == null) throw FsmErrorException(FsmError.DefaultTransitionMustGoToState(tran, hist));
          tran.Used = true;
          match (hist, st.history.Value.Find(_ is StateHistory.Deep))
          {
            | (StateHistory.Deep, Some(StateHistory.Deep(default = t) as h)) =>
                match (t)
                {
                  | Some(t) => traverser.Add(t : StateTransition)
                  | _ => ()
                }
                History(h)
            | _ => TraverseTargetReg(tran.To, tran)
          }
    }

    TraverseOrdinaryTransition(tran : StateTransition) : TransitionDestination
    {
      DefPath(tran.Source, tran.From, tran); // unwind path from Source up to transition begining (From)
      tran.Used = true;
      TraverseTargetReg(tran.To, tran)
    }

    TraverseHistoryPath(tran : StateTransition.History) : TransitionDestination
    {
      | History(From = from, Source = src, history = hist, ToState = st) =>

          when (tran.Source == null) tran.Source = tran.From;
          DefPath(src, from, tran); // unwind path from Source up to transition begining (From)
          tran.Used = true;
          match (st)
          {
            | ConcurrentRegion => HistoryRestore(hist)
            | st               => TraverseStateTarget(st)
          }
    }

    TraverseInitialTransition(tran : StateTransition.Initial) : TransitionDestination
    {
      DefPath(tran.Source, tran.From, tran); // unwind path from Source up to transition begining (From)
      tran.Used = true;
      TraverseTarget(tran.To, tran)
    }

    TraverseStateTarget(st : FsmState) : TransitionDestination
    {
         // transition to region
      | ConcurrentRegion as r => TraverseOrthogonalRegion(r)
      | Final as st => TraverseFinal(st)
         // if simple state and no initial transition
      | FsmState where (Initial = []) as st  =>
          when (recursive && st.paths == null) traverser.Add(st);
          def st = st.ChangeLived(true);
          State(st) // end state
          // if state with one initial transition without Guard
      | FsmState where (Initial = [Initial(Guard = None()) as init])  => 
          // check initial transition path, and traverse it if it null
          when (init.Path == null) init.TraversePath(analyser, true);
          TransitionExecute(init)
          
      | FsmState where (Initial = init) as st  => traverser.Add(init.NToList());
          init.Iter(x => {x.UsedInChoice = true;x.IsCrossed = false});
          Choice(st, init, None()); // creating dynamic choice node
    }

    TraverseTarget(to : TransitionTarget, tr : StateTransition) : TransitionDestination
    {
      match (to)
      {
        | State(st) => TraverseStateTarget(st)
          // if target is orthogonal state
        | Final(st) => TraverseFinal(st) // process final node
        | History(st) => TraverseHistory(st) // process history node
        | PseudoState(st) => TraversePseudo(st, tr)
        | SubMachine(m, s) => TraverseSubMachine(m, s)
        | _ => Unknown()
      }
    }

    TraverseTargetReg(to : TransitionTarget, tr : StateTransition) : TransitionDestination
    {
      match (to)
      {
        | TransitionTarget where (PartOfSubRegion = Some(r)) when (!transition.WithinRegion) => TraverseSubRegion(r, to, tr)
        | _ => TraverseTarget(to, tr)
      }
    }

    TraverseTransition(tran : StateTransition) : TransitionDestination
    {
      | Internal                                => tran.Used = true;NoStateChange()
      | Default as tr                           => TraverseDefaultTransition(tr)
      | Initial as tr                           => TraverseInitialTransition(tr)
      | History as tr                           => TraverseHistoryPath(tr)
          // if not exit from region
      | Transition(WithinRegion = true)         => TraverseWithinRegionTransition(tran)
          // if go to join pseudo state
      | Transition(To = PseudoState(Join as j)) => TraverseJoinTransition(j, tran)
          // if from state in orthogonal region, and transition begins in orthogonal regions boundary or upper
      | Transition(Source = FsmState where (PartOfSubRegion = Some(r))) 
                                                => TraverseTransitionFromRegion(r, tran)
                                                // else ordinary transition
      | _                                       => TraverseOrdinaryTransition(tran)
    }

    /// <summary>
    /// Traversing path
    /// </summary>
    public Traverse(rec : bool = false) : void
    {
      def check_actual_to(to)
      {
        | SubRegion(state = st)
        | ForceStateChange(st) => check_actual_to(st)
        | Choice(_, _, Some(st))
        | Final(state = st)
        | Terminate(PseudoStateNode where (state = st))
        | State(st) =>
            def st = st.ChangeLived(true);
            when (recursive && st.paths == null) traverser.Add(st);
            st
        | Region(st)
        | Choice(st, _, _) => st
        | _ => null
      }

      recursive = rec;
      def to = TraverseTransition(transition); // traversing transition
      transition.Destination = to;
      transition.ActualTo = check_actual_to(to)
    }

    public this(tran : StateTransition, analyser : FsmAnalyser)
    {
      transition = tran;
      this.analyser = analyser;
      traverser = analyser.Traverser;
    }

    public Actions : list[string]
    {
      get
      {
        path.Actions
      }
    }
  }

}
