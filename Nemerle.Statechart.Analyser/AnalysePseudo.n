using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using ListUtils;
  using DecisionNode;
  /// <summary>
  /// Description of AnalysePseudo.
  /// </summary>
  public partial class FsmAnalyser
  {
    mutable unnamed_junction_num : int;
    mutable unnamed_choice_num : int;
    
    CheckJunctionChoice(node : PseudoStateNode) : PseudoStateNode
    {
      | PseudoStateNode.Choice(Name = n) as node => 
      
            match (choices.Find(x => x.Name == n))
            {
              | Some(j) => j
              | _ => 
                    def n = node.WithTree(DecisionNode.Create(node, this));
                    choices ::= n;
                    n
                   
            }
      
      | Junction(Name = n) as node => 
      
            match (junctions.Find(x => x.Name == n))
            {
              | Some(j) => j
              | _ => 
                    def n = node.WithTree(DecisionNode.Create(node, this));
                    junctions ::= n;
                    n
            }

      | _ => null
    }

  }
}
