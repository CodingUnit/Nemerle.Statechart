using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using ListUtils;
  //using DecisionNode;
  /// <summary>
  /// Description of AnalysePseudo.
  /// </summary>
  public partial class FsmAnalyser
  {
    mutable unnamed_junction_num : int;
    mutable unnamed_choice_num   : int;

    //public GetNextNum() : int
    //{
    //  statemap.GetNextGlobalNum()
    //}

    CheckJunction(node : PseudoStateNode.Junction) : void
    {
      def create_actions(a)
      {
        when (a.Parent != null)
        {
          a.actions += a.Parent.actions;
          a.Parent.actions = [];
        }
      }
      
      node.tree.Iter(create_actions)
        //DecisionNode.create_junc_tree_node(this, node)
    }
    //CheckJunctionNode(node : TransitionTarget.JunctionNode) : TransitionTarget.JunctionNode
    //{
    //  | JunctionNode(state = st) => 
    //      def (n, e) = DecisionNode.create_junc_tree_node(this, node, [], 0, st, null, null, []);
    //      def n = node.ChangeDecisionTree(n);
    //      AddErrors(e);
    //      n
    //}

    CheckPseudoStates() : void
    {
      Junctions.Iter(CheckJunction)
    }
    
    CreateDecisionTree() : void
    {
      Junctions.Iter(DecisionNode.create_decision_tree)
    }
  }
}
