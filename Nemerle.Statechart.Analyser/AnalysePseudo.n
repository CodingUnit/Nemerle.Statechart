using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using ListUtils;
  using DecisionNode;
  /// <summary>
  /// Description of AnalysePseudo.
  /// </summary>
  public partial class FsmAnalyser
  {
    [NeedChange] unnamed_junction_num : int;
    [NeedChange] unnamed_choice_num : int;

    CheckJunctionChoice(node : PseudoStateNode.Junction) : PseudoStateNode
    {
      def n = DecisionNode.Create(this, node);
      node.ChangeTo(node.to.ChangeDecisionTree(n))
    }

    CheckJunctionNode(node : TransitionTarget.JunctionNode) : TransitionTarget.JunctionNode
    {
      | JunctionNode(state = st) => def (n, e) = DecisionNode.create_junc_tree_node(this, node, [], 0, st, null, null, []);
        def n = node.ChangeDecisionTree(n);
        AddErrors(e);
        n
    }
    
  }
}
