using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of FsmStateDecls.
  /// </summary>
  [Record]
  [NotifyPropertyChange]
  public partial class FsmState : INotifyPropertyChanged
  {

    public do_activity : list[StateAction.Do] {get;set;default []}

    [NotifyPropertyChange]
    public Super : FsmState {get;set;}
    
    public type : StateType {get;set;}
    
    // calculated
    [Memoized(Super)]
    public super_states : list[FsmState] 
    {
      get
      {
        if (Super != null) 
        {
          Super.super_states + [Super]
        } else
        {
          []
        }
      }
    }
    
    [NotifyPropertyChange]
    public sub_states : list[FsmState] {get;set;default []}
    
    [Memoized(initial)]
    public initial_tran : option[StateTransition] 
    {
      get
      {
        initial.Map(_.tran)
      }
    }
    
    [Memoized(pseudo_states)]
    public initial : option[PseudoStateNode.Initial]
    {
      get
      {
        pseudo_states.FindType()
      }
    }
    
    [NotifyPropertyChange]
    public transitions : list[StateTransition] {get;set;default []}
    
    [NotifyPropertyChange]
    public pseudo_states : list[PseudoStateNode] {get;set;default []}
    
    public statemap : StateMap
    {
      get
      {
        analyser.statemap
      }
    }
    
    public state : StateNode.State;

    
    public entry : list[StateAction.Entry] {get;set;default []}
    public exit  : list[StateAction.Exit]  {get;set;default []}

    public deferred_events : list[StateEvent] {get;set;default []}
    
    public copy_num : int {get;set;}
    
    public paths : TransitionPaths {get;set;}

    //public static TopStateName : string = "[Top]";

    public name : string {get;set;}

    public analyser : FsmAnalyser;

    public Id : IdType { get; set; }

    //public active_state : ActiveState { get; set; }

    //public merged_concurrent : list[FsmState] {get;set;default []}
    
    //public merged_states : list[list[FsmState] * FsmState] {get;set;default []}
    
    [Memoized(Super)]
    public hierarchy_pos : int 
    {
      get
      {
        if (Super != null) 
        {
          Super.hierarchy_pos + 1
        } else 0
      }
    }
    
  }
}
