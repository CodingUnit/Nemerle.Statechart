using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  using PseudoStateModelNode;
  using FsmState;
  using PseudoStateNode;
  using ListUtils;

  /// <summary>
  /// Description of TransitionTargetImpl.
  /// </summary>
  partial variant TransitionTarget
  {
    
    public static Create(st : FsmState, target : TargetType) : TransitionTarget
    {
      //def an = st.analyser;
      match (target)
      {
        | PseudoState as t                  => PseudoState(st, t)
        | Final                             => TransitionTarget.Final(null)
        //| State       as t                  => State(an, t)
        | Named       as t                  => Named(st, t)
        //| SubMachine(_m, s)                 => SubMachine(null, s)//SubMachine(m, null), s)
        | Qualified(parent = p, target = t) => Qualified(p, Create(st, t))
        | Self                              => TransitionTarget.State(st)
        | NoTarget                          => TransitionTarget.Nowhere()
        //| JunctionNode(g, a, t, n)          => JunctionNode(an, g, a, Create(st, t), n.Map(x => Create(st, x) :> JunctionNode), null, JunctionType.Junction)
      }
    }

    //public CompareTo(target : TransitionTarget) : int
    //{
    //  CompareTo(this, target)
    //}

    //public static CompareTo(t1 : TransitionTarget, target : TransitionTarget) : int
    //{
    //  | (PseudoState(node = n1), PseudoState(node = n2))                    => if (n1 : object == n2) 0 else -1
    //  | (Final(state = n1), Final(state = n2))                              
    //  | (State(state = n1), State(state = n2))                              => if (n1 : object == n2) 0 else -1
    //  //| (SubMachine(machine = m, state = s), SubMachine(machine = m2, state = s2)) when (m.Value == m2.Value) => s.CompareTo(s2)
    //  //| (Qualified(p, t), Qualified(p2, t2)) when (p == p2)   => t.CompareTo(t2)
    //  | _                                                                   => -1
    //}

    public PartOfSubRegion : option[FsmState]
    {
      get
      {
        def st = ToState;
        match (st)
        {
          | null                              => None()
          | FsmState(type = StateType.Region) => Some(st)
          | _                                 => st.PartOfSubRegion
        }
      }
    }

    [Memoized]
    public ToState : FsmState
    {
      get
      {
        match (this)
        {
          | PseudoState(PseudoStateNode(state = st))
          | Final(st)
          | State(st)  => st
          | _          => null
        }
      }
    }

    /// <summary>
    /// state on it terminates transition arrow from statechart
    /// </summary>
    [Memoized]
    public TargetStates : list[FsmState]
    {
      get
      {
        match (this)
        {
          | PseudoState(p) => 
            match (p)
            {
              | PseudoStateNode.EntryPoint(_, tr) 
              | ExitPoint(tran = Some(tr))        => tr.To.TargetStates
              | Fork(t)                           => t
              | Join(target = t)                  => t.TargetStates
              | Junction(tree = t)                => t.Targets.SelectMany(x => x.TargetStates).NToList()
              | _                                 => []
            }
          | Final(st)
          | State(st)  => [st]
          | _          => []
        }
      }
    }
    
    public IsJunction : bool
    {
      get
      {
        this is PseudoState(PseudoStateNode.Junction)
      }
    }
    
    public override ToString() : string
    {
      match (this)
      {
        | Final(st)       => $"$st"
        | PseudoState(n)  => $"$n"
        | State(st)       => $"$st"
        | Named(_, n)     => $"$n"
        | Qualified(p, t) => $"$p.$t"
        | Nowhere         => ""
      }
    }
    

  }
}
