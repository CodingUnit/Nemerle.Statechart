using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of FsmStateFuncs.
  /// </summary>
  public partial class FsmState
  {

    [Memoized]
    public IncomingTransitions : list[StateTransition]
    {
      get
      {
        analyser.StateTransitions.Filter(x => x.To.TargetStates.ContainsRef(this))
      }
    }
    
    [Memoized]
    public IsConcurrent : bool
    {
      get
      {
        type is StateType.Region
      }
    }

    [Memoized]
    public IsSubRegion : bool
    {
      get
      {
        type is StateType.SubRegion
      }
    }
    
    [Memoized]
    public IsComposite : bool
    {
      get
      {
        !IsSimple
      }
    }

    [Memoized]
    public IsFinal : bool
    {
      get
      {
        type is StateType.Final
      }
    }

    public ExitPoints : IEnumerable[PseudoStateNode.ExitPoint]
    {
      get
      {
        pseudo_states.FilterType()
      }
    }

    public IsTopState : bool
    {
      get
      {	  
        Super == null
      }
    }

    [Memoized]
    public IsSequentialState : bool
    {
      get
      {
        !IsConcurrent
      }
    }
    
    public IsSubstateOf(st : FsmState) : bool
    {
      super_states.ContainsRef(st)
    }

    public InstancesOfSameStateMachine : IEnumerable[FsmState]
    {
      get
      {
        if (PartOfStateMachine is Some(s))
          statemap.States.Where(x => if (x.PartOfStateMachine is Some(m)) x.name == name && m.SubMachineType == s.SubMachineType else false)
        else Enumerable.Empty()
      }
    }
    
    public AllPseudo : IEnumerable[PseudoStateNode]
    {
      get
      {
        AllStates.SelectMany(_.pseudo_states)
      }
    }
      /// <summary>
    /// All sub states at all nesting levels
    /// </summary>
    public AllSubStates : IEnumerable[FsmState]
    {
      get
      {
        AllStates.Skip(1)
      }
        //sub_states + (sub_states |>< AllSubStates)
    }

    /// <summary>
    /// All sub states include this at all nesting levels
    /// </summary>
    public AllStates : IEnumerable[FsmState]
    {
      get
      { // TODO: caching of iterators
        GetBreadthFirstEnumerable()
      }
    }

    public DefineInitial(st : FsmState) : void
    {
      def new_p = PseudoStateNode.Initial(this, st);
      def p = match (initial)
               {
                 | Some(i) => pseudo_states.Remove(i);
                 | _       => pseudo_states
               }
      pseudo_states = new_p :: p;
      //node.Update(x => x.ChangeInitial(tran :: x.initial))
    }

    public history : TwoOption[PseudoStateNode.History]
    {
      get 
      {
        def hist = pseudo_states.FilterType();//FoldLeft([], (x, a) => if (x.Value is PseudoStateNode.History) x :: a else a);
        //def hist = hist.NToList();
        TwoOption.FromList(hist)
      }
    }



    public PartOfRegion : option[FsmState]
    {
      get
      {
        SuperStatesInclude.Find(x => x.type is StateType.Region)
      }
    }

    public PartOfSubRegion : option[FsmState]
    {
      get
      {

        SuperStatesInclude.Find(x => x.type is StateType.SubRegion)
      }
    }

    ///// <summary>
    ///// History pseudo-states in which participate this state
    ///// </summary>
    //public ParticipateInHistory : IEnumerable[PseudoStateNode.History]
    //{
    //  get
    //  {
    //    analyser.HistoryStates.Where(x => x.SubStatesParticipateIn.Contains(this))
    //  }
    //}

    //public SuperStatesFromTop : IEnumerable[FsmState]
    //{
    //  get
    //  {
    //    Enumerable.Reverse(SuperStates)
    //  }
    //}

    //public SuperStatesFromTopInclude : IEnumerable[FsmState]
    //{
    //  get
    //  {
    //    SuperStatesFromTop.Append(this)
    //  }
    //}    

    public HaveFinal : bool
    {
      get
      {
        match (type)
        {
          | StateType.Region => sub_states.All(x => x.HaveFinal)
          | _                => sub_states.Exists(x => x.type is StateType.Final)
        }
      }
    }

    public FinalSubState : option[FsmState]
    {
      get
      {
        sub_states.Find(x => x.type is StateType.Final)
      }
    }

    public all_transitions_nested : IEnumerable[StateTransition]
    {
      get
      {
        AllStates.SelectMany(x => x.transitions)
      }
    }

    public Index : int
    {
      get
      {
        Super.sub_states.IndexOf(this)
      }
    }

              /// <summary>
          /// Indicates that maybe external transitions from some points of orthogonal state out of region not only completion
          /// </summary>
    public MayTakePlaceForcedTransitions : bool 
    {
      get
      {
        all_transitions_nested.Exists(x => x.OutOfRegion)
      }
    }

    //public NeedHistorySave : bool
    //{
    //  get
    //  {
    //    !ParticipateInHistory.IsEmpty()
    //  }
    //}

    public static get_pattern(reg : IEnumerable[FsmState]) : string
    {
      def idx = reg.Select(x => x.Index).OrderBy(x => x).NToList();
      $<#..$(idx;"")#>
    }

    public RegionsExcept(st : IEnumerable[FsmState]) : IEnumerable[FsmState]
    {
      //def st = st.Where(x => x.PartOfSubRegion.HasValue);
      def sreg = st.FoldBack([], (x, a) => if (x.PartOfSubRegion is Some(r)) r :: a else a);
      sub_states.Exclude(sreg)
    }

    public RegionsExcept(st : FsmState) : IEnumerable[FsmState]
    {
      | FsmState(PartOfSubRegion = Some(r)) => sub_states.Except(r)
      | _                                   => sub_states
      //sub_states.Except(st.P)//Where(x => !x.AllSubStates.Contains(st) && x : object != st)
    }

    //public SequentialFromConcurrent(lst : IEnumerable[FsmState]) : FsmState
    //{
    //  def ordered = lst.OrderBy(x => x.sub_region).NToList();
    //  match (merged_states.Find((x, _) => x.Equals(ordered)))
    //  {
    //    | Some((_, x)) => x
    //    | _            => null
    //  }
    //}
    
    public this_transitions : IEnumerable[StateTransition]
    {
      get
      {
        transitions.Where(x  => x.From == this)
      }
    }

    public ExternalTransitions : IEnumerable[StateTransition]
    {
      get
      {
        transitions.Where(x => x.kind == TransitionKind.External)
      }
    }

    public DefineTransitions(tr : IEnumerable[StateTransition]) : void
    {
      def create_copy(tr)
      {
        def tr = tr.Clone();
        tr.Source = this;
        tr
      }

      def copy = tr.Map(create_copy);
      transitions = transitions + copy;
    }

    public static Compare(comparer : StateTransition * StateTransition -> int) :  StateTransition *  StateTransition -> int
    {
      (x, y) => comparer(x, y)
    }

    public DeleteTransitions(tr : IEnumerable[StateTransition]) : void
    {
      transitions = transitions.Exclude(tr.NToList());
    }

    public DeleteTransition(tr : StateTransition) : void
    {
      transitions = transitions.Except(tr).NToList();
    }

    public DeleteTransitions() : void
    {
      transitions = [];
    }

    public Name : string
    {
      get
      {
         $"$(OriginalName)$(CopyName)"
      }
    }

    public IsSimple : bool
    {
      get
      {
        sub_states.IsEmpty()
      }
    }

    /// <summary>
    /// Use both types of history in state
    /// </summary>
    public BothHistories : bool
    {
      get
      {
        history.IsTwo
      }
    }

    public static HistoryName(this lst : list[HPseudoState.History]) : string
    {
      | n :: [] => n.Name
      | n       => def n = n.Select(x => x.Name);
                  $<#..$(n;"")#>
    }

    public PartOfRegionsOf(st : FsmState) : IEnumerable[FsmState]
    {
      SuperStatesInclude.NToList().FirstElems(_ == st : object).Where(x => x.type is StateType.Region)
    }

    public SuperStatesInclude : IEnumerable[FsmState]
    {
      get
      {
        Enumerable.Reverse(SuperStatesIncludeFromTop)
      }
    }

    [Memoized(super_states)]
    public SuperStatesIncludeFromTop : list[FsmState]
    {
      get
      {
        super_states + [this]
      }
    }

    public SubMachineType : string
    {
      get
      {
        match (type)
        {
          | StateType.SubMachine(null) => name
          | StateType.SubMachine(t)    => t
          | _                          => null
        }
      }
    }
    
    public PartOfStateMachine : option[FsmState]
    {
      get
      {
        SuperStatesInclude.Find(x => x.type is StateType.SubMachine)
      }
    }
    
    //public TraverseTransitions() : void
    //{
    //  paths = TransitionPaths(this);
    //  paths.TraverseTransitions(true);
    //}

    public OriginalName : string
    {
      get
      {
        match (type)
        {
          | SubMachine(s)       => $"SubMachine$s"
          | Final               => $"$(Super)Final"
          | SubRegion           => $"$(Super)SubRegion$Index"
          | _                   => $"$(name)"
        }
      }
    }

    public NativeName : string
    {
      get
      {
        name
      }
    }

    public GetHistory(h : PseudoStateNode.History) : PseudoStateNode
    {	  
      match (history, h.type)
      {
        | (One(h), _)                                           => h
        | (Two(PseudoStateNode.History(type = t1) as f, s), t)  => if (t1 == t) f else s
        | _                                                     => null
      }
    }

    [Memoized(transitions)]
    public CompletionTransitions : IEnumerable[StateTransition]
    {
      get
      {
        transitions.Where(_.IsCompletion)
      }
    }

    public join_completion_transitions : IEnumerable[StateTransition]
    {
      get
      {
        CompletionTransitions.Where(x => x.To is TransitionTarget.PseudoState(PseudoStateNode.Join))
      }
    }

    //public HistoryPaths : list[HistoryPath]
    //{
    //  get
    //  {
    //    def hist = analyser.HistoryPaths;
    //    if (hist != null && hist.ContainsKey(this))
    //    {
    //      hist[this]
    //    } else null
    //  }
    //}

    //public HaveHistoryPaths : bool
    //{
    //  get
    //  {
    //    HistoryPaths != null
    //  }
    //}

    public EventsDecl : IEnumerable[StateEvent]
    {
      get
      {
        transitions.Select(_.trigger)
      }
    }

    [Memoized(entry, exit)]
    public actions : IEnumerable[FsmAction]
    {
      get
      {
        def en = entry.Select(_.action);
        def ex = exit.Select(_.action);
        en.Concat(ex)
      }
    }
              /// <summary>
          /// Indicates that maybe transitions from outer states forking control to this orthogonal region
          /// </summary>
    //public MayForkingFromOut : bool 
    //{
    //  get
    //  {
    //    def is_this(r)
    //    {
    //      | null => false
    //      | _    => match (r.PartOfRegion)
    //          {
    //            | Some(r) when (r : object == this) => true
    //            | _                                 => false
    //          }
    //    }

    //    analyser.forks.Exists(x => x.target.Exists(x => is_this(x.ToState)))
    //  }
    //}

    public TransitionsByTrigger : IEnumerable[IEnumerable[StateTransition]]
    {
      get
      {
        transitions.GroupBy(x => x.FriendlyTriggerName);
      }
    }
    
    public ConflictTransitions : IEnumerable[IEnumerable[StateTransition]]
    {
      get
      {
        def by_trigger   = TransitionsByTrigger;
        by_trigger.Where(x => x.IsMoreThanOne());
      }
    }

    public static @==(a : FsmState, b : FsmState) : bool
    {
      a : object == b
    }

    public static @!=(a : FsmState, b : FsmState) : bool
    {
        !(@==(a, b))
    }

    public static CreateState(st : StateNode.State, sb : IEnumerable[FsmState], an : FsmAnalyser) : FsmState
    {
      FsmState(st, sb, an)
    }

    public MoveToNewSuper(super : FsmState) : void
    {
      Super.Rem(this); // удаляем из старого супер состояния
      super.Add(this) // добавляем в новое
    }

    public Add(st : FsmState) : void
    {
      sub_states = sub_states.Append(st).NToList();
      st.Super = this;
    }

    public Rem(st : FsmState) : void
    {
      sub_states = sub_states.Except(st).NToList();
    }

    public Replace(old : FsmState, new_st : FsmState) : void
    {
      sub_states   = sub_states.Map(x => if (x == old) new_st else x);
      new_st.Super = this;
    }

    public Replace(old : FsmState, new_st : IEnumerable[FsmState]) : void
    {
      def (before, after) = sub_states.PartitionAround(x => x == old);
      def sub = before.Concat(new_st).Concat(after);
      sub_states = sub.NToList();
      new_st.Iter(x => x.Super = this);
    }
    
    public AddPseudo(st : PseudoStateNode) : void
    {
      pseudo_states = pseudo_states.Append(st).NToList();
    }

    public InitialState : option[FsmState]
    {
      get
      {
        initial_tran.Map(_.ToState)
      }
    }
    
    [Memoized]
    public ToHState : HState
    {
      get
      {
        // transitions.Map(x => x.ToHTransition)
        // history.Map(x => x.ToHPseudo :> HPseudoState.History)
        HState(Name, [], [], null, entry, exit, do_activity, deferred_events, if (Super != null) Super.ToHState else null, TwoOption.None(), IsFinal)
      }
    }
  }





}

