// transitionactions.n
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{

  using ListUtils;
  using PseudoStateNode;
  /// <summary>
  /// Description of TransitionActions.
  /// </summary>
  public partial class StateTransition
  {

    public this(an : FsmAnalyser) 
    {
      this.analyser = an
    }

    public this(st : PseudoStateNode, evt : TransitionEvent, tran : StateNode.Transition)
    {
      this(st.state, evt, tran);
      FromPseudo = Some(st);
    }

    public this(st : FsmState, evt : TransitionEvent, tran : StateNode.Transition)
    {
      def an = st.analyser;
      this.analyser = an;
      Source = st;
      From = st;
      trigger = StateEvent(evt);
      kind = tran.kind;
      node = tran;
      RelocateFrom = tran.from.Map(x => PseudoStateNode.ExitPoint(0, st, x.FullName, Some(this)));
      when (tran != null)
      {
        guard = tran.guard;
        action = tran.action.MapDefault(_.actions, []);
      }
      To = if (tran.to != null) TransitionTarget.Create(st, tran.to) else TransitionTarget.Nowhere();
    }

    public this(st : FsmState, to : FsmState, kind : TransitionKind)
    {
      this(st, TransitionTarget.State(to), kind)
    }

    public this(st : PseudoStateNode, to : FsmState, kind : TransitionKind)
    {
      this(st.state, TransitionTarget.State(to), kind);
      FromPseudo = Some(st);
    }

    public this(st : FsmState, to : TransitionTarget, kind : TransitionKind)
    {
      this(st.analyser);
      //From = st;
      To = to;
      From = st;
      this.kind = kind;
      Source = From;
    }

    public this(tran : StateTransition)
    {
      this(tran.analyser);
      To = tran.To;
      guard = tran.guard;
      action = tran.action;
      From = tran.From;
      Source = tran.Source;
      Destination = tran.Destination;
      ActualTo = tran.ActualTo;
      node = tran.node;
      kind = tran.kind;
      executeCheck = tran.executeCheck;
      NeedGuardedName = tran.NeedGuardedName;
      trigger = tran.trigger;
      FromPseudo = tran.FromPseudo;
      internal_kind = tran.internal_kind;
      DecisionTree = if (tran.DecisionTree != null) tran.DecisionTree.Clone() else null;
      RelocateFrom = tran.RelocateFrom;
    }

    public node : StateNode.Transition;

    public kind : TransitionKind {get;set;}
    public trigger : StateEvent {get;set;}
    // state in from start transition in real time app
    public Source : FsmState {get;set;}
    // state in from arrow start in diagram
    public From : FsmState {get;set;}
    public guard : GuardNode {get;set;default GuardNode.Empty(-1)}
    public action : list[FsmAction] {get;set;default []}

    // used in exit entry points to set from another state begining of transition
    public RelocateFrom : option[PseudoStateNode] {get;set;default None()}
    public To : TransitionTarget {get;set;}
    public FromPseudo : option[PseudoStateNode] {get;set; default None()}

    public internal_kind : TransitionRunKind {get;set;}

    public ActualTo : FsmState {get;set;}

    public Path : list[PathSequence] 
    {
      get
      {
        DecisionTree.Fold([], (x, a) => x.path :: a)
      }
    }

    public Destination : TransitionDestination {get;set;}
    public analyser : FsmAnalyser;
    public executeCheck : CheckNode {get;set;default CheckNode.Empty()} 

    public DecisionTree : DecisionNode {get;set;}

    public Local : bool
    {
      get
      {
        kind == TransitionKind.Local
      }
    }

    public NeedGuardedName : bool {get;set;default false}

    //public PostConditions : TransitionPostConditions
    //{
    //  get
    //  {
    //    Destination?.PostConditions
    //  }
    //}

    public FriendlyTriggerName : string
    {
      get
      {
        if (trigger.IsCompletion) "Completion" else trigger.Name
      }
    }

    public IsCompletion : bool
    {
      get
      {
        trigger.IsCompletion
      }
    }

    public IsInitial : bool
    {
      get
      {
        FromPseudo is Some(PseudoStateNode.Initial)
      }
    }

    name : string
    {
      get
      {
        match (kind, FromPseudo)
        {
          | (Internal, None)                         => $"InternalTransition$(From)By$FriendlyTriggerName"
          | (Local, _) when (internal_kind == TransitionRunKind.History) => $"HistoryFrom$(From)To$ToState"
          | (_, None)                                => $"Transition$(Source)To$(To)By$FriendlyTriggerName"
          | (_, Some(PseudoStateNode.Initial))       => $"InitialTransitionFrom$(From)To$To"
          | (_, Some(PseudoStateNode.History as h))  => 
              match (Destination)
              {
                | History(state = st) => $"DefaultTransition$(h)To$st"
                | _                   => $"DefaultTransition$(h)To$ActualTo"
              }
          | (_, Some(PseudoStateNode.ExitPoint as e))     
          | (_, Some(PseudoStateNode.EntryPoint as e))    => $"TransitionFrom$(e)To$(To)"
          | _                                                         => throw InvalidOperationException("invalid transition name")
        }
      }
    }


    public Name : string
    {
      get
      {
        if (NeedGuardedName) GuardedName else name;
      }
    }

    public GuardedName : string
    {
      get
      {
        match (guard)
        {
          | GuardNode.Empty => name
          | g               => $"$(name)With$(g.Name)"
        }
      }
    }

    public static GuardComparer : StateTransition * StateTransition -> int = (g1, g2) => g2.guard.CompareTo(g1.guard);

    public static Comparer : StateTransition * StateTransition -> int  =  (t1, t2)  => t1.Name.CompareTo(t2.Name);

    public ToState : FsmState
    {
      get
      {
        match (To)
        {
          | TransitionTarget.State(st)  => st
          | _                           => null
        }
      }
    }

    public ToPseudo : PseudoStateNode
    {
      get
      {
        match (To)
        { 
          | PseudoState(node) => node
          | _                 => null
        }
      }
    }

    /// <summary>
    /// local flag with decision on path through pseudo states
    /// </summary>
    public RunLocal : bool
    {
      get
      {
        if (FromPseudo.HasValue) true else
          match (ToPseudo)
          {
            | PseudoStateNode.EntryPoint
            | ExitPoint
            | Junction  => true
            | _         => Local
          }
      }
    }

    public ToJunction : PseudoStateNode.Junction
    {
      get
      {
        match (ToPseudo)
        {
          | null => null
          | PseudoStateNode.Junction as j => j
          | _    => null
        }
      }
    }

    

    public StateObtainPseudoState(st : FsmState) : FsmState
    {
      if (Local) st else st.Super;
    }

    public StateObtainPseudoStateFromThis : FsmState
    {
      get
      {
        StateObtainPseudoState(From)
      } 
    }
    /// <summary>
    /// Concrete State for where transition ends known at compile time
    /// </summary>
    public AtLeastStaticTo : FsmState
    {
      get
      {
        match (To)
        {
          | Final(st)
          | State(st)         => st
          //| History(PseudoStateNode.History(state = st))
          //| PseudoState(Junction) => null
          | PseudoState(st)   => st.state
          //| JunctionNode(state = st)
          | _                 => null
        }

      }
    }

    public SimpleDecisionTree : bool
    {
      get
      {
        !(Destination is TransitionDestination.Junction)
      }
    }

    //public Trigger : StateEvent
    //{
    //  get
    //  {
    //    match (trigger)
    //    {
    //      | Some(t) => t
    //      | _       => null
    //    }
    //  }
    //}

    public Statemap : StateMap
    {
      get
      {
        analyser.statemap
      }
    }

    public Actions : IEnumerable[FsmAction]
    {
      get
      {
        Path.SelectMany(x => x.action_nodes.FilterValues(x => x.PathAction))
      }
    }

    public WithinRegion : bool
    {
      get
      {
        match (AtLeastTo.PartOfRegion, From.PartOfRegion)
        {
          | (Some(r), Some(reg)) => r == reg : object
          | _                    => false
        }
      }
    }

    public OutOfRegion : bool
    {
      get
      {
        match (AtLeastTo.PartOfRegion, From.PartOfRegion)
        {
          | (Some(r), Some(reg)) => r != reg : object
          | (Some, None)         => true
          | _                    => false
        }
      }
    }    

    /// <summary>
    /// State for which at least transition proceed known at compile time
    /// </summary>
    public AtLeastTo : FsmState
    {
      get
      {
        def check_dest(d)
        {
          | null => match (To)
              {
                | TransitionTarget.Final(st) => st
                //| History(PseudoStateNode.History(state = st))
                | PseudoState(node) => node.state
                | State(st)         => st
                | _                 => null
              }
          | TransitionDestination.State when ActualTo != null => ActualTo
          | State(st) => st
          | Choice(_, _, Some(st))
          | Choice(st, _, _) => st
          //| Fork(st, _)
          //| Region(st)
          //| Final(state = st) => st
          //| CheckAfter(before = st)
          //| ForceStateChange(st)
          //| SubRegion(state = st) => check_dest(st)
          //| TransitionExecute(t) => t.AtLeastTo
          | Terminate(j)
          //| Join(j)
          | History(j) => j.state
          | _ => null
        }

        check_dest(Destination)
      }
    }

    public AddCheck(node : CheckNode) : void
    {
      executeCheck = executeCheck + node
    }

    public static completion_evt : StateEvent = StateEvent(TransitionEvent(null, 0));

    public Used : bool
    {
      get
      {
        analyser.Used[this]
      }
      set
      {
        analyser.Used[this] = value
      }
    }

    public Clone() : StateTransition
    {
      StateTransition(this)
    }

    public override ToString() : string
    {
      Name
    }

    public static NameComparer : StateTransition * StateTransition -> bool = (x, y) => x.Name == y.Name;

    //public TraversePath(recursive : bool = false) : void
    //{
    //  def path = TransitionPath(this, recursive);
    //  path.Traverse();
    //}

    public FromRegion : option[FsmState]
    {
      get
      {
        Source.PartOfSubRegion
      }
    }


    public static GetPseudo[T](this tran : IEnumerable[StateTransition]) : IEnumerable[T] where T : PseudoStateNode
    {
      def get_pseudo(t, lst)
      {
        match (t)
        {
          | StateTransition(To = TransitionTarget.PseudoState(p)) when (p is T) => p :> T :: lst
          | _                                                                   => lst
        }
      }

      tran.FoldLeft([], get_pseudo).Distinct()
    }

    public static Compare(comparer : StateTransition * StateTransition -> int) :  StateTransition *  StateTransition -> int
    {
      (x, y) => comparer(x, y)
    }

    public AddAction(act : list[FsmAction]) : void
    {
      this.action += act
    }
    
    [Memoized]
    public ToHTransition : HTransition
    {
      get
      {
        def source = HTarget.State(From.ToHState);
        def target = To.ToHTarget;
        HTransition(source, trigger, guard, action, target, Local)
      }
    }
  }

}
