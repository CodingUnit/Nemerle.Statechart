using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{  

    variant TranType : Located
    {
      | Normal { tran : StateTransition; }
      | Junction { tr : FsmJunctionNode.Target; }
      
      public From : FsmState
      {
        [Memoize]
        get
        {
          match (this)
          {
            | Normal(tr)   => tr.From
            | Junction(tr) => tr.state
          }
        }
      }
      
      public Local : bool
      {
        [Memoize]
        get
        {
          if (this is Normal(tr)) tr.Local else false
        }
      }
      
      public To : TransitionTarget
      {
        [Memoize]
        get
        {
          match (this)
          {
            | Normal(tr)   => tr.To
            | Junction(tr) => tr.target
          }
        }          
      }
      
      public override Location : Location
      {
        get
        {
          match (this)
          {
            | Normal(tr)   => tr.Location
            | Junction(tr) => tr.Location
          }
        }
        set { _ = value }
      }
      
      public override ToString() : string
      {
        match (this)
        {
          | Normal(tr)   => tr.ToString()
          | Junction(tr) => tr.ToString()
        }
      }
    }

  [Record]
  partial class StateTransition
  {
    static Create(st : FsmState, tr : StateNode.Transition) : IEnumerable[StateTransition]
    {
      match (tr.evt)
      {
        | []  => ListUtils.SingleElement(StateTransition(st, TransitionEvent.Completion(-1), tr))
        | evt => def evt = evt.Exclude(x => x is TransitionEvent.Timed(TimedExpr.Error));
                 evt.Map(x => StateTransition(st, x, tr))
      }
    }

    public static Create(st : FsmState, tr : IEnumerable[StateNode.Transition]) : IEnumerable[StateTransition]
    {
      tr.SelectMany(Create(st, _))
    }
  }

}
