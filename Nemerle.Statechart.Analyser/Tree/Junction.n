using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  //[Traversable]
  [Record]
  public variant FsmJunctionNode : IGeneralTree[FsmJunctionNode]
  {
    | Node { nodes : list[FsmJunctionNode] {get;set;} }
    | Target
      {
        target : TransitionTarget {get;set;}
        dest   : TransitionDestination {get;set;}
      }

    public guard : GuardNode {get;set;}
    public actions : list[FsmAction] {get;set;}
    
    public ParentNode : PseudoStateNode.Junction {get;set;}
    
    public state : FsmState 
    {
      get
      {
        ParentNode.state
      }
    }
    
    public Parent : FsmJunctionNode {get;set;}
    public path   : PathSequence {get;set;}

    [Memoized]
    public Targets : IEnumerable[TransitionTarget]
    {
      get
      {
        Fold([], (x, a) => if (x is FsmJunctionNode.Target(target = t)) t :: a else a)
      }
    }
    
    public Rebuild(_ : IEnumerable[FsmJunctionNode]) : FsmJunctionNode
    {
      this
    }

    public Current : FsmJunctionNode 
    {
      get
      {
        this
      }
    }

    public GetChild() : IEnumerable[FsmJunctionNode]
    {
      match (this)
      {
        | Node(nodes = n) => n
        | Target  => Enumerable.Empty()
      }
    }

    public ChildNodes : IEnumerable[IGeneralTree[FsmJunctionNode]] 
    {
      get
      {
        match (this)
        {
          | Node(nodes = n) => n
          | Target  => Enumerable.Empty()
        }
      }
    }

    [Memoized]
    public ToHJunctionNode : HJunctionNode
    {
      get
      {
        match (this)
        {
          | Node as n   => HJunctionNode.Node(n.nodes.Map(_.ToHJunctionNode))
          | Target as n => HJunctionNode.Target(n.target.ToHTarget, null)
        }
      }
    }
    
    public static Create(st : PseudoStateNode.Junction, node : list[JunctionNode]) : FsmJunctionNode
    {
      def create(x, acc)
      {
        def node = match (x, x.ChildNodes.NToList())
                    {
                      | (JunctionNode(_, g, a, t), [])  => FsmJunctionNode.Target(g, a.GetActions(), st, null, null, TransitionTarget.Create(st.state, t), null)
                      | (JunctionNode(_, g, a, _), _)   => FsmJunctionNode.Node(g, a.GetActions(), st, null, null, acc.NToList())
                    }

        acc.Iter(x => x.Parent = node);
        node
      }

      // TODO: различающиеся гуарды должны быть на ветках junction и на переходах (объединить гуард перехода и nodes)
      def nodes = node.Map(x => x.FoldTree(null, create));
      FsmJunctionNode.Node(GuardNode.Empty(-1), [], st, null, null, nodes)
    }

    public Iter(func : FsmJunctionNode -> void) : void
    {
      this.GetBreadthFirstEnumerable().Iter(func)
    }

    public Iter(node_func : Node -> void, tar_func : Target -> void) : void
    {
      def func(n)
      {
        | Node as n   => when (node_func != null) node_func(n)
        | Target as n => when (tar_func != null) tar_func(n)
      }

      this.GetBreadthFirstEnumerable().Iter(func)
    }
  }
}
