using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  using FsmState;

  [Record]  
  public class StateEvent
  {
    [Accessor] evt : TransitionEvent;
    //public InternalOnly : bool {get;set;}

    public Name : string
    {
      get
      {
        if (evt.name != null) evt.name else "Completion"
      }
    }

    public CompareTo(b : StateEvent) : int
    {
      Name.CompareTo(b.Name)
    }

    public static @== (a : StateEvent, b : StateEvent) : bool
    {
      a.Name == b.Name
    }

    public IsCompletion : bool
    {
      get
      {
        evt.name == null
      }
    }

    public override ToString() : string
    {
      $"Event$Name"
    }
  }


  [Record]    
  public variant StateAction
  {
    | Entry
      {
        action : FsmAction;
        
        Name : string
        {
          get
          {
            $"Entry$(state)"
          }
        }

        flags : ActionFlags;

        override ToString() : string
        {
          Name
        }

      }
    | Exit
      {
        action : FsmAction;

        Name : string
        {
          get
          {
            $"Exit$(state)"
          }
        }

        flags : ActionFlags;

        override ToString() : string
        {
          Name
        }
      }

    | Do 
      {
        [FlagAccessor(NoCancel)]
        public flags : ActivityFlag; // shows that we must run each action concurrently with others

        action : Actions;
        
        [NeedChange]
        need_completion : bool;
        
        public CompareTo(act : Do) : int
        {
          match (this, act)
          {
            | (Do(fl, a, c), Do(fl2, a2, c2)) => if (fl == fl2 && a.CompareTo(a2) == 0 && c == c2) 0 else -1
          }
        }
        
        Name : string
        {
          get
          {
            $"DoActivity$state"
          }
        }

        override ToString() : string
        {
          Name
        }
      }       

    public state : FsmState;
  }

}
