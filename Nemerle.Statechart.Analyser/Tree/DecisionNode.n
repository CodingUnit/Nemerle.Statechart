using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{

  using ListUtils;
  using TreeUtils;
  
  //[Traversable]
  [Record]
  public partial variant DecisionNode : IGeneralTree[DecisionNode]
  {
    | Condition 
      {
        condition : GuardNode;
        body      : DecisionNode;
        else_node : option[DecisionNode];
      }
    | Target 
      {
        //[NeedChange] 
        target      : HTarget;
        destination : TargetDeterminator {get;set;}

      }

    public actions : list[FsmAction] {get;set;}
    public path  : PathSequence {get;set;}
    public state : HState {get;set;}

    [Memoized]
    public Path : list[PathSequence]
    {
      get
      {
        GetBreadthFirstEnumerable().Map(_.path)
      }
    }
    
    [Memoized]
    public Targets : list[TargetDeterminator]
    {
      get
      {
        GetBreadthFirstEnumerable().FoldLeft([], (x, a) => if (x is Target(destination = t)) t :: a else a)
      }
    }
    
    [Memoized]
    public PathActions : list[FsmAction]
    {
      get
      {
        GetBreadthFirstEnumerable().SelectMany(x => x.path.Path.FilterValues(x => x.PathAction)).NToList();
      }
    }
    
    public Clone() : DecisionNode
    {
      match (this)
      {
        | Condition(c, b, e) => Condition(actions, path, state, c, b.Clone(), e.Map(x => x.Clone()))
        | Target(t) as n     => Target(actions, path, state, t, n.destination)
      }
    }
    
    public ChildNodes : IEnumerable[DecisionNode]
    {
      get
      {
        match (this)
        {
          | Condition(_, a, Some(b)) => yield a; yield b;
          | Condition(_, a, _)       => yield a
          | Target                   => ()
        }
      }
    }
    
    public Current : DecisionNode
    {
      get
      {
        this
      }
    }
    
    public Iter(cond : Condition -> void, target : Target -> void) : void
    {
      def iter(a)
      {
        | Condition as a => when (cond != null) cond(a)
        | Target as a    => when (target != null) target(a)
      }
      
      Iter(iter)
    }

    public Iter(iter : DecisionNode -> void) : void
    {
      GetBreadthFirstEnumerable().Iter(iter)
    }
    
  }

}
