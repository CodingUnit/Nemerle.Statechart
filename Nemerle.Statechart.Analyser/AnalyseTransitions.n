using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using ListUtils;
  using DecisionNode;  
  using GuardNode;
/// <summary>
/// Description of AnalyseTransitions.
/// </summary>
  public partial class FsmAnalyser
  {

    CheckInitialTransitions() : void
    {
      def check_auto_initial(st, sub)
      {
        match (st)
        {
          | FsmState.Final 
          | ConcurrentRegion => st
          | FsmState(initial = init) when init.IsEmpty() && !sub.IsEmpty() with head = sub.First() =>
              if (head is FsmState.Final) st else st.DefineInitial(head);
          | x => x
        }
      }

      def err = States.FoldLeft(GetErrorInfo(), (x, a) => check_duplicates(x.initial, a));  // check duplicates
      def top = if (FsmFlags.AutoInitial) TopState.ReduceSingle(check_auto_initial) else TopState;

      def top = if (top.initial.IsEmpty()) // if not have initial transition in top state
                 if (top.transitions.IsEmpty()) // if not have other transitions
                   check_auto_initial(top, top.sub_states) // initial is first substate
                 else top; // else initial transition is top state
                else top;
      UpdateStateMap(top);
      //def map = map.ChangeStates(states.ToArray());
      AddErrors(err)
    }

    is_crossed_orthogonal(tr : StateTransition, st : FsmState) : bool
    {
      | (StateTransition(To = TransitionTarget.State(state = FsmState(PartOfRegion = Some(r), PartOfSubRegion = Some(sr)))),
                        FsmState(PartOfRegion = Some(r2), PartOfSubRegion = Some(sr2))) when r == r2 =>
          sr2 != sr
      | _ => false
    }

    CreateSuperStateTransitions() : void
    {
      def create_trans(st)
      {
        | FsmState.State(Super = null) => st
        | FsmState(Super = super, PartOfSubRegion = r) =>
            single_func
            {
              super.combined_transitions;
              if (r.HasValue) __.Where(x => !is_crossed_orthogonal(x, st)) else __;
              st.DefineTransitions(__)
            }
      }

      def states = States.Map(create_trans);
      statemap.Update(states)
    }

    CheckCrossTransitions() : void
    {
      def group(tr, st)
      {
        match (tr)
        {
          | _ :: []  => st // if not have group exit
          | StateTransition(Guard = Some()) as head :: tail  => 
              def (path, end) = tail.SplitFind(x => x.Guard.IsNone); // get all include last without GuardNode
              def tr = head.ChangeParentCrossed(path);
              def path = path.Map(x => x.ChangeCrossFor(true));
              def st = st.DeleteTransitions(end); // delete from usual transitions in state
              st.UpdateTransitions(tr :: path)
          | _ :: tail  => st.DeleteTransitions(tail)
          | _  => st
        }
      }

      def check_cross_tran(tr, st)
      {
        single_func
        {
          tr.NToList().Sort((x, y) => StateTransition.GuardComparer(y, x));
          __.Sort((x, y) => y.From.hierarchy_pos - x.From.hierarchy_pos); // sort on hierarchy position
          group(__, st); // group transitions
        }
      }

      def check_cross(st)
      {
        def tran = st.all_transitions_with_init;
        def group = FsmState.create_transition_group(tran).Where((_, x) => x.IsMoreThanOne()).Values();
        group.FoldLeft(st, check_cross_tran)
      }

      def states = States.Map(check_cross); // check from the top state
      statemap.Update(states)
    }

    check_duplicates(tr : IEnumerable[StateTransition], a : ErrorInfo) : ErrorInfo
    {
      def check_duplicate_tran(tr, a)
      {
        def check_begin_and_ends(tr : IEnumerable[_], a)
        {
          def equal(lst, lst2)
          {
            lst.Equals(lst2, _ == _);
          }

          if (tr.IsMoreThanOne())
          {
            def acts = tr.Select(x : StateTransition => x.ActionList);
            def res = acts.ElementsEqual(equal);
            if (res) a.AddError(FsmError.DuplicateTransition(tr)) else a;
          } else a
        }

        def ordinary = tr.Exclude(x => x is Initial || x.IsCompletion);
        def dups = ordinary.Duplicates(_.Guard); // find duplicates with same guards and same triggers
        if (!dups.IsEmpty())
        {
          a.AddError(FsmError.DuplicateTransition(dups))
        } else
        {
          def (intern, other) = tr.Partition(_ is Internal);
          def begin_and_end_eq = other.NToList().Group((x, y) => x.From.CompareTo(y.From) - x.To.CompareTo(y.To)).Select(x => x.AsEnumerable());
          def begin_and_end_eq = begin_and_end_eq.Where(_.IsMoreThanOne());
          def merged = begin_and_end_eq.Append(intern.Select(_ : StateTransition));
          merged.FoldLeft(a, check_begin_and_ends)
        }
      }

      def check_override(tr, a)
      {
        match (tr.Find(x => x.Guard.IsNone))
        {
          | Some(t) => def tr = tr.Filter(_ != t : object);
              def warn = tr.Map(x => FsmWarning.TransitionOverriden(x, t));
              a.HeadAppend(warn)
          | _ => a
        }
      }

      def group = FsmState.create_transition_group(tr).Values();
      def group = group.Where(_.IsMoreThanOne());
      def dup = group.FoldLeft(a, check_duplicate_tran);
      def warn = group.FoldLeft([], check_override);
      dup.AddWarning(warn)
    }

  /// <summary>
  /// Check duplicates
  /// </summary>
    CheckDuplicates() : void
    {
      def err = States.FoldLeft(GetErrorInfo(), (x, a) => check_duplicates(x.this_transitions, a));
      def err = States.FoldLeft(err, (x, a) => check_duplicates(x.initial, a));
      AddErrors(err)
    }

    get_named(tar : TransitionTarget.Named) : TransitionTarget
    {
      match (tar)
      {
        | Named(name = n, transition = tr) =>

            def states = PseudoStates.Filter(x => x.NativeName.HasValue);
            match (states.Find(x => x.NativeName.Value == n))
            {
              | Some(t) => TransitionTarget.PseudoState(tr, this, t)
              | _       => AddErrors(FsmError.UnknownNode(tr));
                           tar
            }
      }
    }

    check_targets(tr : TransitionTarget) : TransitionTarget
    {
      match (tr)
      {
        | PseudoState(node = Junction as j, transition = tr) as node => def n = CheckJunctionChoice(j);
            if (j != n : object) TransitionTarget.PseudoState(tr, this, n) else node
        | _                                                          => tr
      }

    }

    resolve_targets(st : FsmState, tr : TransitionTarget) : TransitionTarget
    {
      // TODO: может ли оно быть null?
      def tran = tr?.transition;

      match (tr)
      {
        | TransitionTarget.Final(state = null) as t =>
            def super = if (tran is Initial) st else st.Super;
            match (super.sub_states.FindType())
            {
              | Some(st)  => t.ChangeState(st)
              | _         => t
            }

        | PseudoState(node = Terminate(state = null) as node) as t =>
            match (PseudoStates.Filter(_ is PseudoStateNode.Terminate))
            {
              | []     => TransitionTarget.PseudoState(tran, this, node)
              | [term] => TransitionTarget.PseudoState(tran, this, term)
              | _      => AddErrors(FsmError.UnknownTerminateTransition(tran));
                          t
            }

        | PseudoState(node = Join(state = null, name = n)) as t =>
            match (PseudoStates.FilterType())
            {
              | [] => AddErrors(FsmError.UnknownNode(tran));
                      t
              | joins =>
                  match (joins.Find(x : PseudoStateNode.Join => x.name == n))
                  {
                    | Some(j) => TransitionTarget.PseudoState(tran, this, j)
                    | _       => AddErrors(FsmError.UnknownNode(tran));
                                 t
                  }
            }

        | Named as t => def t = get_named(t);
                        resolve_targets(st, t)
        | Qualified(parent = st, target = t) => 
            def st = statemap.Get(st);
            match (st, t)
            {
              | (FsmState.SubMachine as m, TransitionTarget.State(state = FsmState(Name = n))) =>
                  def m = m.Scan(); // scan external sub machine for states
                  when (!m.ref_sub_states.Contains(n)) AddErrors(FsmError.SubMachineStateNotFound(m, n));
                  TransitionTarget.SubMachine(tran, this, m, n)
              | (null, _) => AddErrors(FsmError.UnknownState(t.transition.From, FsmState.State(st.Name), t.transition));
                  t
              | (st, t) => resolve_targets(st, t)
            }
        | t  => t
      }
    }

    create_join_transitions() : void
    {

      def check_join(j, tr, (err, atran))
      {
        match (j)
        {
          | PseudoStateNode.Join(state = st, target = t) =>

              if (tr.ElementsEqual((x, y) => x.Trigger == y.Trigger))
              {
                if (tr.All(x => x.From.PartOfSubRegion.HasValue) &&
                    tr.ElementsEqual((x, y) => x.From.PartOfRegion.Value == y.From.PartOfRegion.Value))
                {
                  def tran = StateTransition.Create(st, tr.Head.Trigger, t, j);
                  def reg = tr.Head.From.PartOfRegion.Value;
                  def tr = tr.Sort((x, y) => x.FromRegion.index - y.FromRegion.index);
                  //j.joined_tran = tr;
                  //j.region = reg;

                  def j = j.ChangeRegionJoinedTranTransition(reg, tr, tran);
                  //j.transition = tran;
                  /// !!! mutable
                  def tr = tr.Map(x => x.ChangeTo(TransitionTarget.PseudoState(x, this, j))) : IEnumerable[_];
                  (err, atran.Concat(tr))
                } else (FsmError.JoinTransitionMustLeaveRegion(j, tr) :: err, atran)
              } else (FsmError.JoinTransitionMustHaveSameTrigger(j, tr) :: err, atran)
        }
      }

      def get_join(t, lst)
      {
        match (t)
        {
          | StateTransition(To = TransitionTarget.PseudoState(Join as j)) => (j, t) :: lst
          | _                                                             => lst
        }
      }

      def join_tran = States.FoldLeft([], (x, a) => x.all_transitions_with_init.FoldLeft(a, get_join));
      def jtrans = join_tran.Group((x, y) => x[0].name.CompareTo(y[0].name)).Map(x => (x.Head[0], x.Split()[1]));
      def (err, trans) = jtrans.FoldLeft(([], Enumerable.Empty()), ((x, y), a) => check_join(x, y, a));
      UpdateTransitions(trans);
      AddErrors(err)
    }

    create_fork_transitions() : void
    {
      def check_fork(tr, f, (err, atrans))
      {
        match (f)
        {
          | PseudoStateNode.Fork(target = t) =>

              def st = t |> ToState;
              def reg = st |> PartOfSubRegions;
              if (!reg.IsEmpty() && reg.All(x => !x.IsEmpty()))
              {
                def sreg = reg |> Last();
                def dups = sreg.Duplicates((x, y) => x.index - y.index);
                if (dups.Length != 0) (FsmError.ForkMustGoToSeparateRegion(f) :: err, atrans) else
                {
                  def reg = sreg.Head.contained_in;
                  def sub_trans = t |> StateTransition.Create(reg, null, _, f);
                  def sub_trans = sub_trans.Map(x => x.ChangeLocal(true));
              /// !!! mutable
                  def tr = tr.ChangeTo(TransitionTarget.PseudoState(tr, this, f.ChangeForkTran(sub_trans)));
                  (err, tr :: atrans)
                }
              } else
              {
                (FsmError.ForkMustGoToRegion(f) :: err, atrans)
              }
        }
      }

      def get_fork(t, lst)
      {
        match (t)
        {
          | StateTransition(To = TransitionTarget.PseudoState(Fork as f)) => (t, f) :: lst
          | _                                                             => lst
        }
      }

      def tran = States.FoldLeft([], (x, a) => x.all_transitions_with_init.FoldLeft(a, get_fork));
      def (err, tran) = tran.FoldLeft(([], []), ((x, y), a) => check_fork(x, y, a));
      UpdateTransitions(tran);
      AddErrors(err)
    }
  /// <summary>
  /// Creating Transitions
  /// </summary>
    CreateTransitions() : void
    {
      def check_tran(st, _)
      {
        def trans = st.all_transitions_with_init.Map(_.TargetTraverse(check_targets));
        st.UpdateTransitions(trans)
      }

      //States.Map(check_tran);
      UpdateStateMap(TopState.ReduceSingle(check_tran));
      create_join_transitions(); // creating join transitions
      create_fork_transitions(); // creating fork transitions
      CreateSuperStateTransitions(); // create parent transitions
      CheckDuplicates(); // check duplicates
      CheckCrossTransitions(); // look for cross transitions
    }

    CheckTransitions() : void
    {
      def proc_tran(st, tran, err)
      {
        match (tran.To)
        {
          | TransitionTarget.State(state = to) when (!statemap.Contains(st)) => FsmError.UnknownState(st, to, tran) :: err
          | _                                                                => err
        }
      }

      def check_cross_orthogonal(tr, err)
      {
        if (is_crossed_orthogonal(tr, tr.Source)) FsmError.TransitionCrossOrthogonalBoundaryOfSameRegion(tr) :: err else err
      }

      def init(st, err)
      {
        def err = st.initial.FoldLeft(err, proc_tran(st, _, _));
        st.all_transitions.FoldLeft(err, proc_tran(st, _, _));
      }

      def check_tran(st, sb)
      {
        def tran = st.all_transitions_with_init.Map(x => x.TargetTraverse(resolve_targets(st, _)));
        def st = st.UpdateTransitions(tran);
        st.Rebuild(sb)
      }

      def err = States.FoldLeft([], init);
      def err = States.FoldLeft(err, (x, e) => x.all_transitions.FoldLeft(e, check_cross_orthogonal));
      UpdateStateMap(TopState.ReduceSingle(check_tran));
      
      def update_states()
      {
        def check_target(t, a) 
        {
          t.To.Fold(a, state = (t, a) => t.state :: a, named = (t, a) => t.state :: a, junction_node = (t, a) => t.state :: a)
        }
        
        def st = States.FoldLeft([], (x, a) => x.all_transitions_with_init.FoldLeft(a, check_target));
        statemap.Update(st);
      }
      
      update_states();
      AddErrors(err)
    }

    RenameTransition(tran : IEnumerable[StateTransition]) : IEnumerable[string * StateTransition]
    {
      def (dups, tran) = tran.DuplicatesPartition(_.Name);
      def dups = dups.Map(x => x.ChangeNeedGuardedName(true));
      def dups = dups |> (GuardedName, _);
      def tran = tran |> (Name, _);
      def tran = tran.Concat(dups);
      def (dups, tran) = tran.DuplicatesPartition(x => x[0]);
      def dups = dups.GroupBy(x => x[0]);
      def err = dups.Map(x => FsmError.DuplicateTransition(x.Values()));
      AddErrors(err);
      tran
    }

    CreateTransitionPaths() : void
    {
      def traverse()
      {
        traverser.Add(TopState.initial.NToList());
        def res = traverser.Traverse(this); // model the fsm traversing states and transition from top recursively through initial transition and pseudo states
        def tran = traverser.Completed;
        UpdateTransitions(tran);
        statemap.Update(res);
      }

      def update_states()
      {
        def dest = trans_paths.FoldLeft(Enumerable.Empty(), (x, a) => a.Concat(x.Paths.Map((_, y) => y.Transition.Destination)));
        def tran = dest.FoldLeft(Enumerable.Empty(), (x, a) => a.Concat(x.Transition));
        UpdateTransitions(tran);
        def st   = dest.Select(_.ToState).Where(_ != null);
        def hist = dest.OfType.[TransitionDestination.History]().Select(_.state);
        def hist = hist.Select(_.ChangeUsed(true));
        
        def update_hist(s, _)
        {
          def hist = hist.Where(x => x.state.name == s.name);
          hist.FoldLeft(s, (x, a) => a.UpdateHistory(x))
        }
        
        statemap.Update(st);
        def top = TopState.ReduceSingle(update_hist);
        UpdateStateMap(top)
      }

      traverse(); // traverse paths
      update_states();
      CreateTransitionsWithPaths()
    }

    CreateTransitionsWithPaths() : void
    {
      def determine_used()
      {
        def empty = empty_states.Select(x => FsmWarning.StateNotUsed(x) : FsmWarning); // warning about all without substates and not lived that is not used
        def not_used = not_used_transitions.Select(x => FsmWarning.TransitionNotUsed(x) : FsmWarning);
        empty.Concat(not_used)
      }
      
      def warnings = determine_used(); // determine used elements

      //def (used_hstates, not_used) = history_states.Partition(_.Used);
      //history_states = used_hstates;

      def trans = RenameTransition(used_transitions);
      def trans = Map(trans);
      def int_tran =  States.FoldLeft(Enumerable.Empty(), (x, a) => a.Concat(x.internal_tran));
      def int_tran =  RenameTransition(int_tran);
      def int_tran = Map(int_tran);
      def init = used_states_initial_tran;
      def init = RenameTransition(init);
      def init = Map(init);
      internal_transitions = int_tran;
      transitions = trans;
      initial_transitions = init;
      def hist = not_used_history.Select(x => FsmWarning.HistoryNotUsed(x));
      def warnings = warnings.Concat(hist);
      AddWarnings(warnings.NToList())
    }
    
    UpdateInitial() : void
    {
      def warn = not_used_states_initial_tran |> FsmWarning.TransitionNotUsed(_);
      AddWarnings(warn)
    }

  }
}
