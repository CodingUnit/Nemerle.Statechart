using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using ListUtils;
  //using DecisionNode;  
  using GuardNode;
  using Opt;
/// <summary>
/// Description of AnalyseTransitions.
/// </summary>
  public partial class FsmAnalyser
  {

    CheckInitialTransitions() : void
    {
      def check_auto_initial(st)
      {
        | FsmState(type = StateType.Final)
        | FsmState(type = StateType.Region) => ()
        | FsmState(initial = None, sub_states = head :: _) when (!head.IsFinal) => st.DefineInitial(head);
        | _ => ()
      }

      def check_init_tran_correct(t)
      {
        match (t.pseudo_states.FilterType())
        {
          | []           => ()
          | t1 :: _ :: _ => AddError(FsmError.InitialPseudoStateAtMostOne(t1))
          | PseudoStateNode.Initial(tran = tran) as i :: [] => 
              if (tran.To is TransitionTarget.State) () else AddError(FsmError.InitialTransitionMustGoToState(i));
              when (tran.guard.NotEmpty) AddError(FsmError.InitialTransitionCannotHaveGuards(i));
        }
        
      }
      
      //States.Iter(x => check_duplicates(x.InitialTransitions().Select(_.Value)));  // check duplicates
      
      // check state attributes
      foreach (st in States)
      {
        check_init_tran_correct(st); // check for correct initial transitions
        when (st.Attributes.Exists(x => x is StateAttribute.Initial))
        {
          st.Super.DefineInitial(st)
        }
        when (FsmFlags.AutoInitial) check_auto_initial(st);
      }
      
      when (TopState.transitions.IsEmpty()) check_auto_initial(TopState);
    }

    is_crossed_orthogonal(tr : StateTransition, st : FsmState) : bool
    {
      | (StateTransition(To = TransitionTarget.State(state = st)), s2) 
            =>  match (st, s2)
          {
            | (FsmState(PartOfRegion = Some(r), PartOfSubRegion = Some(sr)), FsmState(PartOfRegion = Some(r2), PartOfSubRegion = Some(sr2))) => 
                r : object == r2 && sr : object != sr2
            | _ => false  
          }
      | _  => false
    }

    ResolveConflictTransitions(st : FsmState, trans : IEnumerable[StateTransition]) : void
    {
      def conflict = trans.OrderByDescending(x => x.From.hierarchy_pos).NToList();
      def by_hierarchy = conflict.GroupBy(x => x.From.hierarchy_pos);
      
      // check for duplicates
      foreach (tr in by_hierarchy)
      {
        def dups = tr.NToList().Duplicates(FsmState.Compare(StateTransition.GuardComparer)); // find duplicates with same guards and same triggers
        when (!dups.IsEmpty())
        {
          AddError(FsmError.DuplicateTransition(dups))
        }
      }
      
      def search_for_no_guard(g)
      {
        if (!g.IsMoreThanOne()) g else
          match (g.Find(x => x.guard.IsEmpty))
          {
            | Some(t) => def tr   = g.Except(t); // without guard already enabled and have more priority
                         def warn = tr.Map(FsmWarning.TransitionOverriden(_, t)); // signal this, not needed declaration, design error
                         AddWarnings(warn);
                         ListUtils.SingleElement(t)

            | _       => g
          }
      }


      def resolve_on_levels = by_hierarchy.SelectMany(search_for_no_guard).NToList();
      //def del = trans.Except(resolve_on_levels);
      def (left, _) = resolve_on_levels.SplitFind(x => x.guard.IsEmpty);
      def del = trans.Except(left);
      st.DeleteTransitions(del);// conflicted deleted from set of enabled without signal, normal situation
    }

    CreateAndCheckConflictTransitions() : void
    {
      def (simple, other) = States.NToList().Partition(_.IsSimple);

      // create super state transitions in simple states
      foreach (st when st.Super != null in States)
      {
        st.DefineTransitions(st.Super.transitions)
      }
       
      other.Iter(_.DeleteTransitions());  // delete other transitions from composite states
      foreach (st in simple)
      {
        foreach (group in st.ConflictTransitions)
        {
          ResolveConflictTransitions(st, group);
        }
      }
    }

    CheckDefferedEvents() : void
    {
      def check_override(tr, st, defer)
      {
        // transitions with trigger exists in defered list
        def tr = tr.Where(x => defer.Exists(y => if (x.trigger is Some(t)) t == y else false));
        // filter and partition transition with position in hierarchy lower or equal current state
        def (left_tr, removed) = tr.PartitionLazy(x => x.From.hierarchy_pos >= st.hierarchy_pos);
        // left_tr transitions that overrides defered events in current state
        def left_events = left_tr.FilterValues(_.trigger); // left events that override other defered
        def left_defer = defer.Except(left_events).NToList(); // remove from defer that events
        //def tr = tr.Except(removed); // remove from transition list removed events
        (removed, left_defer)
      }
      
      foreach (st in States)
      {
        when (st.Super != null) 
        {
          def evts = st.Super.deferred_events; // super state deffered events
          def (rem_tran_evts, evts) = check_override(st.transitions, st.Super, evts); // transition events in current state
          st.DeleteTransitions(rem_tran_evts); // removed transitions overriden by defered events
          st.deferred_events += evts;
        }
      }
    }
    
#if 0    
    create_join_transitions() : void
    {

      def check_join(j, tr : IEnumerable[_])
      {
        match (j)
        {
          | PseudoStateNode.Join(target = t) as jn =>

              if (tr.ElementsEqual((x, y) => x.Trigger == y.Trigger))
              {
                if (tr.All(x => x.Source.PartOfSubRegion.HasValue) &&
                    tr.ElementsEqual((x, y) => x.Source.PartOfRegion.Value == y.Source.PartOfRegion.Value : object))
                {
                  def tran = StateTransition(j.state, t, tr.First().Trigger);
                  def reg = tr.First().Source.PartOfRegion.Value;
                  def tr = tr.OrderBy(x => x.Source.PartOfSubRegion.Value.Index);
                  //j.joined_tran = tr;
                  //j.region = reg;

                  //j.transition = tran;
                  /// !!! mutable
                  //tr.Iter(x => x.ToPseudo.SetValue(x => (x :> PseudoStateNode.Join).ChangeRegionJoinedTranTransition(reg, tr, tran)));
                  jn.region = reg;
                  jn.joined_tran = tr.NToList();
                  jn.transition = tran;
                } else 
                {
                  AddError(FsmError.JoinTransitionMustLeaveRegion(j, tr.NToList()));
                }
              } else 
              {
                AddError(FsmError.JoinTransitionMustHaveSameTrigger(j, tr.NToList()))
              }
        }
      }

      def get_join(t, lst)
      {
        match (t)
        {
          | StateTransition(To = TransitionTarget.PseudoState(PseudoStateNode.Join as j)) => (j, t) :: lst
          | _                                                                             => lst
        }
      }

      def join_tran = StateTransitions.FoldLeft([], get_join);
      def jtrans = join_tran.GroupBy((x, _) => x);
      def jtrans = jtrans.Map(x => (x.Key, x.Values()));
      jtrans.Iter(check_join)
    }

    create_fork_transitions() : void
    {
      def check_fork(f)
      {
        | PseudoStateNode.Fork(target = t) =>

              def st = t.Select(x => x.ToState);
              def reg = st.Select(x => x.PartOfSubRegion);
              if (!reg.IsEmpty() && reg.All(x => x.HasValue))
              {
                //def sreg = reg |> Last();
                def dups = reg.DuplicatesGroup(x => x.Value.Index);
                def regs = st.Select(x => x.PartOfRegion.Value);
                if (dups.Count() != 0 || !regs.ElementsEqual((x, y) => x == y : object)) 
                {

                  AddError(FsmError.ForkMustGoToSeparateRegion(f))
                } else
                {
                  //def reg = regs.First();
                  def sub_trans = t.Map(x => StateTransition.Transition(f.state, x, null));
                  f.fork_tran = sub_trans;
                  //def sub_trans = sub_trans.Map(x => x.ChangeLocal(true));
                  //tr.ToPseudo.SetValue(x => (x :> PseudoStateNode.Fork).ChangeForkTran(sub_trans))
                }
              } else
              {
                AddError(FsmError.ForkMustGoToRegion(f))
              }

      }

      def tran = StateTransitions.GetPseudo();
      tran.Iter(check_fork)
      //statemap.Update();
    }
#endif
    CheckLocalTrans() : void
    {
      foreach (tr when tr.kind == TransitionKind.Local in StateTransitions)
      {
        def src = match (tr.FromPseudo)
        {
          | Some(PseudoStateNode.EntryPoint as p) => p.state
          | _                                     => tr.From
        }
        def dest = tr.AtLeastStaticTo;
        if (dest.IsSubstateOf(src) || src == dest : object) () else
        {
          AddError(FsmError.LocalTransitionTargetMustBeWithin(tr))
        }
      }
    }
    
    /// <summary>
    /// Creating Transitions
    /// </summary>
    CreateTransitions() : void
    {
      //States.Iter(check_tran);
      //create_join_transitions(); // creating join transitions
      //create_fork_transitions(); // creating fork transitions
      CheckLocalTrans();
      CheckDefferedEvents(); // check defered events
      CreateAndCheckConflictTransitions(); // create parent transitions
      CreateDecisionTree();
      //CheckDuplicates(); // check duplicates
      //CheckCrossTransitions(); // look for cross transitions
    }

    CheckTransitions() : void
    {
      foreach (tr in StateTransitions)
      {
        when (is_crossed_orthogonal(tr, tr.Source)) AddError(FsmError.TransitionCrossOrthogonalBoundaryOfSameRegion(tr));
      }
      
    }

    RenameTransition(tran : IEnumerable[StateTransition]) : void
    {
      def dups = tran.NToList().Duplicates((x, y) => x.Name.CompareTo(y.Name));
      dups.Iter(x => x.NeedGuardedName = true);
      def dups = tran.DuplicatesGroup(x => x.Name);
      dups.Iter(x => x.Iter(x => Used[x] = false));
      def err = dups.Map(x => FsmError.DuplicateTransition(x.NToList()));
      AddErrors(err);
    }

    CreateTransitionPaths() : void
    {
      def traverse()
      {
        traverser = TransitionTraverser(this);
        traverser.Add(TopState.initial_tran.Value);
        traverser.Traverse(); // model the fsm traversing states and transition from top recursively through initial transition and pseudo states
        traverser = null;
      }

      def obj = States.Select(_ : object).Concat(all_transitions_with_spec).Concat(PseudoStates);
      obj.Iter(Used.Add(_, false)); // init used properties

      traverse(); // traverse paths
      //update_states();
      CreateTransitionsWithPaths()
    }

    CreateTransitionsWithPaths() : void
    {
      def empty = empty_states.Select(FsmWarning.StateNotUsed); // warning about all without substates and not lived that is not used
      def not_used = not_used_transitions.Select(FsmWarning.TransitionNotUsed);
      AddWarnings(empty);
      AddWarnings(not_used); // determine used elements

      //def (used_hstates, not_used) = history_states.Partition(_.Used);
      //history_states = used_hstates;

      RenameTransition(used_transitions);
      //def int_tran =  States.SelectMany(_.internal_tran);
      //def int_tran =  RenameTransition(int_tran);
      //def int_tran = Map(int_tran);
      //def init = used_states_initial_tran;
      //def init = RenameTransition(init);
      //def init = Map(init);
      //internal_transitions = int_tran;
      //transitions = trans;
      //initial_transitions = init;
      def hist = not_used_history.Select(FsmWarning.HistoryNotUsed);
      AddWarnings(hist)
    }

    CreateHistoryPaths() : void
    {
      def create_hist_path(h, a)
      {
        def sub = h.SubStatesParticipateIn;
        def parent = h.state;
                                      //node.ParticipateInHistory().Select(x => (x.Parent, HistoryPath(x.state, this, x)).CreatePath()));
        sub.FoldLeft(a, (x, a) => HistoryPath(parent, x, h) :: a)

        //def shist = st.SuperStates().Where(x => x.ParticipateInHistory().Exists(x => x.Value is PseudoStateNode.History(type = HistoryType.Shallow)));
        //def spaths = shist.SelectMany(x => x.Value.HistoryPaths);
        //def paths = st.ParticipateInHistory.Select(x => (x.state.name, HistoryPath(x.state, st, x).CreatePath()));
        //def paths = paths.Concat(spaths).NToList();
        //st.ChangeHistoryPaths(paths)
      } 

      def paths = HistoryStates.FoldLeft([], create_hist_path);
      paths.Iter(_.CreatePath());
      def paths = paths.GroupBy(x => x.To).Select(x => (x.Key, x.NToList()));
      HistoryPaths = Hashtable(paths);
      //HistoryPaths = paths;
      //States.Iter(create_hist_path);
      //def top = TopState.ReduceSingle(create_hist_path);
      //UpdateStateMap(top)
    }

    UpdateInitial() : void
    {
      def warn = not_used_states_initial_tran.Select(FsmWarning.TransitionNotUsed);
      AddWarnings(warn)
    }

  }
}
