using Nitra;
using Nitra.Runtime;

namespace CPPParser
{

  syntax module Base
  {
    using Nitra.Core;
    using Nitra.CStyleComments;

	token String
	{
		Value() : string;

		| Single = '\'' Str=(!'\'' Any)* '\'' {override Value = GetText(Str); }
		| Double = '"' Str=(!'"' Any)* '"' {override Value = GetText(Str); }
	}

	regex Digits  = ['0'..'9']+;

  token Integer = Digits
  {
    Value() : int = int.Parse(GetText(Digits));
    missing Value = 0;
  }

	alias Numeric = Integer;

  [SpanClass(Number)]
  token FloatingNumber = "-"? Digits Fraction? Exponent?
  {
    regex Fraction = "." Digits;
    regex Exponent = ("E" | "e") ("-" | "+")? Digits;

    missing Value = 0;

    Value() : double = GetText() |> double.Parse;
  }

  regex KeywordToken =   "class";
  /*
  

  regex EventNotKeywords =   "(X)"       | "(x)"        | "entry:"   | "exit:" | "entry"
                          | "exit"       | "0"          | "initial"  | "do"    | "(H*)"
                          | "(H)"        | "deferred"   | "$>"       | "$<"
                          | "completion" | "_";

  regex PseudoKeywords = "exit:"  | "(X)" | "(x)" | "history";*/

  

  regex IdentifierBody = IdentifierStartCharacter IdentifierPartCharacters*;

  regex IdentifierStartCharacter  = LetterCharacter | "_";
  regex IdentifierPartCharacters  = LetterCharacter 
                                    | DecimalDigitCharacter
                                    | ConnectingCharacter 
                                    | CombiningCharacter
                                    | FormattingCharacter
                                    | '-';

  token Identifier = !Keyword !'=' IdentifierBody
  {
    token Keyword = KeywordToken !IdentifierPartCharacters;
  }
    
  token AnyIdentifier = IdentifierBody {Value() : string=GetText(IdentifierBody);}

  token NameIdentifier 
  {
    Value() : string;

	  | AnyIdentifier {override Value = AnyIdentifier.GetText();}
	  | String {override Value = String.Value();}
  }

  syntax FullyQualified = (QualifiedIdentifier; '.')+;
  syntax FullyQualifiedAny = (AnyIdentifier; '.')+;

  syntax Attributes = '[' (Identifier; ',')+ ']';

  }

}
