using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro Event(typeBuilder : TypeBuilder)
  {
    EventImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder)
  }
  
  module EventImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder) : void
    {
      Macros.DefineCTX(typer);
      typeBuilder.AddImplementedInterface(<[ HsmEvent ]>);
      def opt = typeBuilder.GetVariantOptions();
      
      foreach (ty in opt)
      {
        def name = ty.Name;
        ty.Define(<[decl: public override Name : string { get { $name }}]>);
        ty.Define(<[decl: public override FullName : string { get { Name }}]>);
        ty.Define(<[decl: static instance : HsmEvent = $(name : usesite)(); ]>);
        ty.Define(<[decl: public static Instance : HsmEvent
                  {
                    get
                    {
                      instance
                    }
                  }]>);
      }
      _ = typeBuilder;
    }
  }
}
