using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{
  public variant StateType
  {
    | State
    | SubMachine {type : string;}
    | InlinedSubMachine {type : string;}
    | SubRegion
    | Region
  }

  public variant TransitionType
  {
    | Internal
    | Default 
      { 
        [NeedChange] history : StateNode.History;
      }
    | Initial
    | Transition
  }

  [Traversable(State)]
  [Record]
  public variant StateNode
  {
    [Traverse]
    | StateMachine
      {
        flags : MachineFlags;
        state : State;

        this(fl : MachineFlags, st : State)
        {
          flags = fl;
          state = st;
          base(st.pos);
        }

        GetErrors() : IEnumerable[Error]
        {
          Fold(Enumerable.Empty(), (s, a) => a.Concat(s.errors))
        }
      }
    //| Initial
    //  {
    //    guard : option[GuardNode];
    //    action : option[Actions];
    //    [NeedChange] to : TargetType;

    //    this(pos : int, tran : Transition)
    //    {
    //      guard = tran.guard;
    //      action = tran.action;
    //      to = tran.to;
    //      base(pos)
    //    }

      //}
    //| Default
    //  {
    //    action : option[Actions];
    //    target : StateNode.State;
    //    [NeedChange(pos)] history : History;

    //    this(act : option[Actions], to : State)
    //    {
    //      action = act;
    //      target = to;
    //      base(0)
    //    }

    //  }
    [Traverse]
    | Final
      {
        state  : State;

        this(s : State)
        {
          state = s;
          base(0);
        }

      }
    [Traverse]
    [Traverse(region(type = StateType.Region))]
    | State
      {
        this (n : string) {name = n;reference = true;base(0);}
        this (n : string, pos : int, type : StateType)
        {
          base(pos);
          name = n;
          this.type = type;
        }
        this (n : string, pos : int, type : StateType, tran : list[Transition])
        {
          base(pos);
          name = n;
          transitions = tran;
          this.type = type;
        }
        this (pos : int, type : StateType)
        {
          base(pos);
          this.type = type;
        }
        name : string;
        initial : IEnumerable[Transition] = Enumerable.Empty();
        attributes : IEnumerable[StateAttribute] = Enumerable.Empty();
        entry : IEnumerable[Entry] = Enumerable.Empty();
        exit : IEnumerable[Exit] = Enumerable.Empty();
        internal_tran : IEnumerable[Transition] = Enumerable.Empty();
        transitions : IEnumerable[Transition] = Enumerable.Empty();
        do_activity : IEnumerable[DoActivity] = Enumerable.Empty();
        history : TwoOption[History] = TwoOption.None();
        sub_states : IEnumerable[State] = Enumerable.Empty();
        [RecordIgnore]
        reference : bool;
        pseudo_states : IEnumerable[PseudoState] = Enumerable.Empty();
        type : StateType;
        errors : IEnumerable[Error] = Enumerable.Empty();

      }

    | Entry
      {
        this(pos : int) {action = Actions([]);base(pos);}
        this(lst : list[string]) {action = Actions(lst);base(0);}

        attrib : ActionFlags;
        action : Actions;
      }
    | Exit
      {
        this(pos : int) {action = Actions([]);base(pos);}
        this(lst : list[string]) {action = Actions(lst);base(0);}

        attrib : ActionFlags;
        action : Actions;
      }
    | Error {node : StateNode;}
    | DoActivity {action : Actions;flags : ActivityFlag;}
    //| InternalTransition
    //  {
    //    evt : list[TransitionNode.Event];
    //    guard : option[GuardNode];
    //    action : Actions;

    //    Actions : IEnumerable[string]
    //    {
    //      get
    //      {
    //        action.ActionList
    //      }
    //    }

    //  }
    | Transition
      {
        evt : IEnumerable[TransitionNode.Event] = Enumerable.Empty();
        guard : option[GuardNode];
        action : option[Actions];
        [NeedChange] to : TargetType;

        [NeedChange(pos)]
        [NeedChange]
        type : TransitionType;

        ToState : StateNode.State
        {
          get
          {
            match (to)
            {
              | TargetType.State(st)  => st
              | _                     => null
            }
          }
        }

        this(guard : option[GuardNode], action : option[Actions], to : TargetType)
        {
          base(to.pos);
          this.guard = guard;
          this.action = action;
          this.to = to;
        }

        this(pos : int,  tran : Transition, type : TransitionType)
        {
          base(pos);
          guard = tran.guard;
          action = tran.action;
          to = tran.to;
          this.type = type
        }
        
        this(evt : List[TransitionNode.Event],  tran : Transition)
        {
          base(evt.First().pos);
          this.evt = evt.NToList();
          guard = tran.guard;
          action = tran.action;
          to = tran.to;
        }

      }

    | History
      {
        type : HistoryType;
        [NeedChange] default : option[Transition];
        [NeedChange] state : State;
        reference : bool;

        this(pos : int, state : State)
        {
          this.state = state;
          reference = true;
          default = option.None();
          base(pos);
        }

        this(pos : int, type : HistoryType, default : option[Transition])
        {
          this.type = type;
          this.default = default;
          base(pos)
        }

      }
    | PseudoState
      {
        [NeedChange] node : PseudoStateAstNode;
      }

    [NeedChange]
    public pos : int;

    //public GetCode() : int
    //{
    //  match (this)
    //  {
    //    | StateMachine            => 0
    //    | State(regions = Some()) => 1
    //    | State                   => 2
    //    | Final                   => 3
    //    | _                       => -1
    //  }
    //}

    public GetChild() : IEnumerable[StateNode.State]
    {
      match (this)
      {
        | State(sub_states = sub)           => sub
        | StateMachine(state = st)          => TraverseUtils.SingleElement(st)
        | Final(state = st)                 => TraverseUtils.SingleElement(st)
        | _                                 => Enumerable.Empty()
      }
    }

    public Rebuild(_ : IEnumerable[StateNode]) : StateNode
    {
      this
    }
  }

}
