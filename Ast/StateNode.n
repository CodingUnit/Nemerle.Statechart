// statenode.n
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{


  public variant StateType
  {
    | State
    | Final
    | SubMachine        { type : string; }
    | SubRegion
    | Region
  }

  public enum TransitionType
  {
    | Internal
    //| Default 
    //| Initial
    | Local
    | Transition
  }

  [Record]
  public variant StateNode
  {
    | Flags
      {
        flags : MachineFlags;
      }

    | Name { name   : string; }
    | StateMachine
      {
        flags : MachineFlags;
        name  : string;
        state : State;

        //this(fl : MachineFlags, st : State)
        //{
        //  flags = fl;
        //  state = st;
        //  base(st.pos);
        //}

        GetErrors() : IEnumerable[Error]
        {
          TreeUtils.Fold(state, [], _.sub_states, (x, a) => a.Concat(x.errors));
          //StateParts.SelectMany(_.errors)
        }
      }

    | State
      {
        name          : string;
        parent        : option[string];
        attributes    : list[StateAttribute] = [];
        entry         : list[Entry] = [];
        exit          : list[Exit] = [];
        transitions   : list[Transition] = [];
        do_activity   : list[DoActivity] = [];
        defer         : list[TransitionEvent];
        //history       : TwoOption[History] = TwoOption.None();
        sub_states    : list[State] = [];
        //[RecordIgnore]
        //reference     : bool;
        pseudo_states : list[PseudoState] = [];
        type          : StateType;
        errors        : list[Error] = [];

      }

    | Entry
      {
        attrib : ActionFlags;
        action : Actions;
      }
    | Exit
      {
        attrib : ActionFlags;
        action : Actions;
      }
    | Defer
      {
        evt : list[TransitionEvent];
      }
    | Error {node : StateNode;}
    | DoActivity {action : Actions;flags : ActivityFlag;}
    | Transition
      {
        evt    : list[TransitionEvent] = [];
        guard  : GuardNode;
        action : option[Actions];
        to     : TargetType;
        type   : TransitionType;
      }      
    | PseudoState
      {
        node : PseudoStateModelNode;
      }

    | Region 

    public pos : int;

  }

}
