using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{
  public variant StateType
  {
    | State
    | SubMachine {type : string;}
    | InlinedSubMachine {type : string;}
    | SubRegion
    | Region
  }

  [Traversable]
  [Record]
  public variant StateNode
  {
    | StateMachine 
      {
        flags : MachineFlags;
        state : State;

        this(fl : MachineFlags, st : State)
        {
          flags = fl;
          state = st;
          base(st.pos);
        }

        GetErrors() : IEnumerable[Error]
        {
          Fold(Enumerable.Empty(), null, null, (s, a) => a.Concat(s.errors), null)
        }
      }
    | Region 
      {
        regions : IEnumerable[State];
      }
    | Initial 
      {
        guard : option[GuardNode];
        action : option[Actions];
        [NeedChange] to : TargetType;

        this(pos : int, tran : Transition)
        {
          guard = tran.guard;
          action = tran.action;
          to = tran.to;
          base(pos);
        }

      }
    | Default
      {
        action : option[Actions];
        target : StateNode.State;
        [NeedChange(pos)] history : History;

        this(act : option[Actions], to : State)
        {
          action = act;
          target = to;
          base(0)
        }

      }
    | Final
      {
        state  : State;

        this(s : State) 
        {
          state = s;
          base(0);
        }
      }
    | State 
      {
        this (n : string) {name = n;reference = true;base(0);}
        this (n : string, pos : int, type : StateType) 
        {
          base(pos);
          name = n;
          this.type = type;
        }
        this (n : string, pos : int, type : StateType, tran : list[Transition]) 
        {
          base(pos);
          name = n;
          transitions = tran;
          this.type = type;
        }
        this (pos : int, type : StateType) 
        {
          base(pos);
          this.type = type;
        }
        name : string;
        initial : IEnumerable[Initial] = Enumerable.Empty();
        attributes : IEnumerable[StateAttribute] = Enumerable.Empty();
        entry : IEnumerable[Entry] = Enumerable.Empty();
        exit : IEnumerable[Exit] = Enumerable.Empty();
        internal_tran : IEnumerable[InternalTransition] = Enumerable.Empty();
        transitions : IEnumerable[Transition] = Enumerable.Empty();
        do_activity : IEnumerable[DoActivity] = Enumerable.Empty();
        history : TwoOption[History] = TwoOption.None();
        sub_states : IEnumerable[State] = Enumerable.Empty();
        regions : option[Region] = None();
        [RecordIgnore]
        reference : bool;
        pseudo_states : IEnumerable[PseudoState] = Enumerable.Empty();
        type : StateType;
        errors : IEnumerable[Error] = Enumerable.Empty();


      }
    | Entry 
      {
        this(pos : int) {action = Actions([]);base(pos);}
        this(lst : list[string]) {action = Actions(lst);base(0);}

        attrib : ActionFlags;
        action : Actions;
      }
    | Exit 
      {
        this(pos : int) {action = Actions([]);base(pos);}
        this(lst : list[string]) {action = Actions(lst);base(0);}

        attrib : ActionFlags;
        action : Actions;
      }
    | Error {node : StateNode;}
    | DoActivity {action : Actions;flags : ActivityFlag;}
    | InternalTransition
      {
        evt : list[TransitionNode.Event];
        guard : option[GuardNode];
        action : Actions;

        Actions : IEnumerable[string]
        {
          get
          {
            action.ActionList
          }
        }

      }
    | Transition 
      {
        evt : IEnumerable[TransitionNode.Event];
        guard : option[GuardNode];
        action : option[Actions];
        [NeedChange] to : TargetType;

        ToState : StateNode.State
        {
          get
          {
            match (to)
            {
              | TargetType.State(st)  => st
              | _  => null
            }
          }
        }

        this(guard : option[GuardNode], action : option[Actions], to : TargetType)
        {
          this.guard = guard;
          this.action = action;
          this.to = to;
          base(to.pos);
        }

        this(evt : List[TransitionNode.Event],  tran : Transition)
        {
          this.evt = evt.NToList();
          guard = tran.guard;
          action = tran.action;
          to = tran.to;
          base(evt.First().pos);
        }

      }

    | History
      { 
        type : HistoryType;
        [NeedChange] default : option[Default];
        [NeedChange] state : State;
        reference : bool;

        this(pos : int, state : State)
        {
          this.state = state;
          reference = true;
          default = option.None();
          base(pos);
        }

        this(pos : int, type : HistoryType, default : option[Default])
        {
          this.type = type;
          this.default = default;
          base(pos)
        }

      }
    | PseudoState
      {
        [NeedChange] node : PseudoStateAstNode;
      }

    public pos : int;

    public Fold[T](init          : T,
                  state_machine : T * StateMachine -> T,
                  region        : IEnumerable[T] * State -> T,
                  state         : IEnumerable[T] * State -> T,
                  final         : T * Final -> T) : T
    {
      def stack = SCG.Stack();

      def pop(sub)
      {
        stack.PopRev(sub)
      }

      def loop(n, acc)
      {
        match (n)
        {
          | State(regions = Some(Region(sr))) as t => def sub_acc = pop(sr); 
              def acc = if (region != null) region(sub_acc, t) else acc;
              stack.Push(acc);
              acc
          | State(sub_states = sub) as t           => def sub_acc = pop(sub); 
              def acc = if (state != null) state(sub_acc, t) else acc;
              stack.Push(acc);
              acc
          | StateMachine as t                      => def stacc = stack.Pop();
              def acc = if (state_machine != null) state_machine(stacc, t) else acc;
              stack.Push(acc);
              acc
          | Final as t                             => def stacc = stack.Pop();
              def acc = if (final != null) final(stacc, t) else acc;
              stack.Push(acc);
              acc    
          | _                                      => acc
        }
      }

      Iterator().FoldLeft(init, loop)
    }

    public Fold[T](init          : T,
                  state_machine : StateMachine * T -> T,
                  region        : State * T -> T,
                  state         : State * T -> T,
                  final         : Final * T -> T) : T
    {
      def stack = SCG.Stack();

      def loop(n, acc)
      {
        match (n)
        {
          | State(regions = Some()) as t           => def acc = if (region != null) region(t, acc) else acc;
              stack.Push(acc);
              acc
          | State as t                             => def acc = if (state != null) state(t, acc) else acc;
              stack.Push(acc);
              acc
          | StateMachine as t                      => def acc = if (state_machine != null) state_machine(t, acc) else acc;
              stack.Push(acc);
              acc
          | Final as t                             => def acc = if (final != null) final(t, acc) else acc;
              stack.Push(acc);
              acc
          | _                                      => acc
        }
      }

      Iterator().FoldLeft(init, loop)
    }

    public GetChild() : IEnumerable[StateNode.State]
    {
      match (this)
      {
        | State(regions = Some(Region(sr))) => sr
        | State(sub_states = sub)           => sub
        | StateMachine(state = st)          => TraverseUtils.SingleElement(st)
        | _                                 => Enumerable.Empty()
      }
    }

    //public Iterator : IEnumerable[StateNode]
    //{
    //  get
    //  {
    //    def child = SCG.Stack();
    //    def parent = SCG.Stack();

    //    def loop_init()
    //    {
    //      if (child.IsEmpty()) () else 
    //      {
    //        def curr = child.Pop();
    //        parent.Push(curr);
    //        match (curr)
    //        {
    //          | State(regions = Some(Region(sr))) => foreach (s in sr) child.Push(s);
    //          | State(sub_states = sub)           => foreach (s in sub) child.Push(s);
    //          | StateMachine(state = st)          => child.Push(st);
    //          | _                                 => ()
    //        }
    //        loop_init()
    //      }
    //    }

    //    child.Push(this);
    //    loop_init();
    //    parent
    //  }
    //}

  }

}
