using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  public variant StateBinaryOp
  {
    | Equal    { a : StateExpr; b : StateExpr;} // ==
    | NotEqual { a : StateExpr; b : StateExpr;} // !=
    | Above    { a : StateExpr; b : StateExpr;} // >
    | AboveEq  { a : StateExpr; b : StateExpr;} // >=
    | Below    { a : StateExpr; b : StateExpr;} // <
    | BelowEq  { a : StateExpr; b : StateExpr;} // <=
    | Or       { a : StateExpr; b : StateExpr;} // &&
    | And      { a : StateExpr; b : StateExpr;} // ||

    public override ToString() : string
    {
      match (this)
      {
        | Equal(a, b)    => $"$a == $b"  
        | NotEqual(a, b) => $"$a != $b" 
        | Above(a, b)    => $"$a > $b" 
        | AboveEq(a, b)  => $"$a >= $b"
        | Below(a, b)    => $"$a < $b" 
        | BelowEq(a, b)  => $"$a <= $b"
        | Or(a, b)       => $"$a || $b"
        | And(a, b)      => $"$a && $b"
      }
    }
  }

  public variant StateUnaryOp
  {
    | Not      { a : StateExpr; } // !

    public override ToString() : string
    {
      match (this)
      {
        | Not(a)         => $"!$a"
      }
    }
  }

  public variant StateLit
  { 
    | Integer { a : int    } // 1
    | Double  { a : double } // 1.0
    | String  { a : string } // "1"
    
    public override ToString() : string
    {
      match (this)
      {
        | Integer(a)         => $"$a"
        | Double(a)          => $"$a"
        | String(a)          => $<#"$a"#>
      }
    }
  }
  /// <summary>
  /// Description of Guards.
  /// </summary>
  [Record]
  public variant StateExpr
  {
    | Literal { lit : StateLit; }
    | Var     { v : string; } // abc
    | Method  { m : string; } // abc()
    | Braces  { a : StateExpr; }
    | TwoOp   { a : StateExpr; op : StateBinaryOp; b : StateExpr;} // ==
    | UnaryOp { op: StateUnaryOp; a : StateExpr; } 

    public pos : int;

    public override ToString() : string
    {
      match (this)
      {
        | Var(v)         => $"$v"
        | Method(m)      => $"$m"
        | Braces(a)      => $"($a)"
        | TwoOp(a, o, b) => $"$a $o $b"
        | UnaryOp(o, a)  => $"$o $a"
      }
    }
  }
}
