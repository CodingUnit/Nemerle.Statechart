using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of PathCoverFsmTest.
  /// </summary>
  partial class Test
  {
    DoThrow() : void
    {
      throw InvalidOperationException("test failed")
    }
    
    public PathCoverTest() : void
    {
      def fsm = PathCoverFsm();
      fsm.ActionExecuted += WriteLine;
      def tester = FsmTester(fsm);
      tester.Print += x => WriteLine($"\n$x");
      tester.Send += x => WriteLine($"Processing a '$x' ");
      tester.OkTest += _ => WriteLine("Ok");
      tester.Failed += _ => {WriteLine("Failed"); DoThrow()}
      WriteLine("Beginning Statechart test...");	

      tester.InitiateName("Starting state machine", ["A", "B", "C"]);

      tester.TestName("Testing Internal transition", "a", null);

      tester.Test("Testing simple-to-simple transition", "b", ["C"], ["E"]);

      tester.Test("Testing simple-to-composite transition", "j", ["E", "B", "A"], ["A", "B", "C"]);

      tester.Test("Testing simple-to-simple, via composite", "d", ["C", "B"], ["D"]);

      tester.TestName("Testing for no match", "a", null);

      tester.Test("Testing simple to (non-ancestor) composite", "e", ["D"], ["B", "C"]);

      tester.Test("Testing simple-to-simple transition again", "b", ["C"], ["E"]);

      tester.Test("Testing simple-to-simple, across ancestor", "i", ["E", "B"], ["D"]);

      tester.Test("Testing simple-to-composite with history", "g", ["D", "A"], ["A", "D"]);

      tester.Test("Get back to state C", "e", ["D"], ["B", "C"]);

      tester.Test("Testing composite-to-composite transition", "f", ["C", "B"], ["B", "C"]);

      tester.Test("Testing simple to sibling simple via composite transition", "c", ["C", "B"], ["B", "E"]);

      tester.Test("Testing composite-to-composite transition", "k", ["E", "B", "A"], ["A", "B", "C"]);

      tester.Test("Testing transition to self, but leaving the state", "m", ["C"], ["C"]);

      tester.Test("Get to state D", "d", ["C", "B"], ["D"]);

      tester.Test("Test going to non-ancestor composite with history (and returning to the same state)", "n", ["D"], ["B", "C"]);

      tester.Test("Get us to state E, then D", "b", ["C"], ["E"]);

      tester.Test("Go to state D", "i", ["E", "B"], ["D"]);

      tester.Test("Now, test returning with history to a non-default state", "n", ["D"], ["B", "E"]);

      WriteLine("Leaving test.");
      fsm.Terminate();  
    }

  }
}
