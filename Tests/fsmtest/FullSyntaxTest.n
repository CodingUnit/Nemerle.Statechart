using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace fsmtest
{
  /// <summary>
  /// Description of FullSyntaxTest.
  /// </summary>
  partial class Test
  {
    #if 0    
    CoverTest() : void
    {
      def fsm = FullSyntaxFsm();
        fsm.activity1+= tok => 
                            {
                          while (!tok.IsCancellationRequested)
                          {
                            Console.WriteLine("Do activity !!!");
                            Thread.Sleep(1000);
                          }
                           };
      fsm.AEntry+= () => WriteLine("A entry");
      fsm.AExit+= () => WriteLine("A exit");
      fsm.BEntry+= () => WriteLine("B entry");
      fsm.BExit+= () => WriteLine("B exit");
      fsm.CEntry+= () => WriteLine("C entry");
      fsm.CExit+= () => WriteLine("C exit");
      fsm.DEntry+= () => WriteLine("D entry");
      fsm.DExit+= () => WriteLine("D exit");
      fsm.EEntry+= () => WriteLine("E entry");
      fsm.EExit+= () => WriteLine("E exit");
      WriteLine("Beginning Statechart test...");	
      fsm.Initiate();
      
	// Internal transition.
      WriteLine("Processing an 'a'");	
      fsm.a();	

	// 
      WriteLine("Processing an 'g'");	
      fsm.g();	
      
	// Testing simple-to-simple transition.
      WriteLine("Processing a 'b'");	
      fsm.b();

	// Testing simple-to-composite transition
	// (transition to outermost state).
      WriteLine("Processing a 'j'");
      fsm.j();

	// Testing simple-to-simple, via composite.
      WriteLine("Processing a 'd'");
      fsm.d();

	// Testing for no match.
      WriteLine("Processing an 'a'");
      fsm.a();

	// Testing simple to (non-ancestor) composite.
      WriteLine("Processing an 'e'");
      fsm.e();

	// Testing simple-to-simple transition again.
      WriteLine("Processing a 'b'");
      fsm.b();

      // Testing concurrent transitions
      fsm.c();
      fsm.a();
      fsm.d();
      fsm.e();
      fsm.c();
      fsm.d();
      fsm.b();
      fsm.g();
	// Testing simple-to-simple, across ancestor.
      WriteLine("Processing an 'i'");
      fsm.i();

	// Testing simple-to-composite with history.
      WriteLine("Processing a 'g'");
      fsm.g();

	// Get back to state C.
      WriteLine("Processing an 'e'");
      fsm.e();

	// Testing composite-to-composite transition.
      WriteLine("Processing a 'f'");
      fsm.f();

	// Testing simple to sibling simple via composite transition.
      WriteLine("Processing a 'c'");
      fsm.c();

      WriteLine("Processing a 'g'");
      fsm.g();
      
	// Testing composite-to-composite transition.
      WriteLine("Processing a 'k'");
      fsm.k();
	
	// Testing transition to self, but leaving the state.
      WriteLine("Processing an 'm'");
      fsm.m();

	// Get to state D.
      WriteLine("Processing a 'd'");
      fsm.d();

	// Test going to non-ancestor composite with history (and
	// returning to the same state).
      WriteLine("Processing an 'n'");
      fsm.n();

	// Get us to state E, then D.
      WriteLine("Processing a 'b'");
      fsm.b();

      WriteLine("Processing a 'b'");
      fsm.b();
      
      WriteLine("Processing a 'i'");
      fsm.i();

	// Now, test returning with history to a non-default state.
      WriteLine("Processing an 'n'");
      fsm.n();

      WriteLine("Leaving test.");
      fsm.Terminate();  
    }
#endif

  }
}
