using System;
using System.Linq;
using System.Console;
using System.Collections.Generic;
using System.Threading;
using Nemerle.Collections;
using Nemerle.Utility;

using Nemerle.Statechart;
using System.Reflection;

namespace Nemerle.Statechart.Tests {

  module Program
  {
            
    public Run(machine : ITestStateMachine, name : string) : void
    {
      def tester = machine.GetTester();
      def interpreter = FsmInterpreter(tester);
      interpreter.StartConsole();
      def printer = FsmTestGen(machine.GetType().Name, interpreter.History);
      printer.GenerateTestMethods($"$name.n");
      printer.GenerateOutput($"$name.log", interpreter.TextOutput);
    }
    
    Start(name : string, fsm : string) : void
    {
      
      def assembly = Assembly.LoadFrom(name);
      def type = if (fsm == null) 
      {
        def types = assembly.GetTypes();
        types.FirstOrDefault(x => x.GetInterfaces().Exists(x => x == typeof(ITestStateMachine)));
      } else assembly.GetType(fsm);
      match (type)
      {
        | null when fsm == null => Console.WriteLine($<#Cannot find type implemented ITestStateMachine in assembly "$name", type must be public and testing flag must be set#>);
        | null => Console.WriteLine($<#Cannot find type "$fsm" in assembly "$name", type must be public and not have namespace#>);
        | type => 
            def obj = Activator.CreateInstance(type);
            match (obj)
            {
              | ITestStateMachine as m => Run(m, type.Name)
              | _                      => Console.WriteLine($<#Type $fsm must implement ITestStateMachine interface, use "testing" flag in statemachine#>);
            }      
      }
    }
    
    public Main(pars : array[string]) : void
    {
      match (pars.NToList())
      {
        | name :: tail => def (flags, other) = tail.Partition(x => x.StartsWith("-"));
                          when (flags.Contains("-debug")) assert2(false);
                          def fsm = match (other)
                          {
                            | []        => null
                            | head :: _ => head
                          }
                          Start(name, fsm)
                          //Start()
                            // when flags == "-debug"
                                         //
                                         //when ()
                                         //Start(name, fsm, test)
        | _                                                         => Console.WriteLine("Usage: fsmtest.exe [assembly] [fsm_type] [out_file_name] [flags]");
      }
    }
  }
}
