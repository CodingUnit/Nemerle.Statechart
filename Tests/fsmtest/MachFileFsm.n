using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Nemerle.Statechart;
using System.Threading;

namespace Nemerle.Statechart.Tests
{  

  [statechart(<#

  flags : auto_initial transition_completed_events debug;

  state FileWorking
  {
    close => Exiting;

    state Files
    {
      (H*)
      NewFile => Processing;
      Open    => Opening;

      state Waiting
      {
        entry / SaveAllDis CaptionProgName;
        exit  / SaveAsEna;
      }

      state Opened
      {
        save_as => Saving.SaveAs;

        state NotSaved
        {
          entry / SaveEna;

          state New
          {
            entry / CaptionFile LastFileEmpty SaveAsEna;
            Save => Saving.SaveAs;
          }

          state Changed
          {
            entry / CaptionChanged;
            Save => Saving.Overwrite;
          }
        }
        
        state Saved
        {
          entry / SaveDis CaptionFileName LastFileCur;
          Save   => @;
          Change => Changed;
        }
        
      }
    }

    state Processing
    {
      _      => Saved;
      Cancel => Files.H;

      state CreateNew
      {
        _ => Opened;

        statemachine CreateNewSave : FileDialogs
        {
          _ => NewDialog;
        }

        state NewDialog
        {
          do / ViewNewDialog;
          ok    / LoadData => $0;
        }

      }

      new statemachine Saving : FileDialogs
      {

        0 => {
               in_state(NotSaved) => WantSave;
               else               => $0;
             }

        state WantSave
        {
          do / ViewWantToSave;
          yes => {
                    in_state(New) => SaveAs;
                    else          => Overwrite;
                 }
          no  => $0;
        }

        state SaveAs
        {
          do / ViewSaveAsDialog;
          ok    => (save_junc);
        }

        state Overwrite
        {
          do / ViewOverwrite;
          no  => SaveAs;
          yes => (save_junc);
        }

        merge save_junc / save => $0;
      }

      state Opening
      {
        statemachine OpenSave : FileDialogs
        {
          _ => OpenDialog;
        }

        state OpenDialog
        {
          do / ViewOpenDialog;
          ok / LoadData => $0;
        }

      }

      state Exiting
      {
        statemachine ExitSave : FileDialogs
        {
          _ / Exit => X;
        }

      }
    }
  }
  #>
  )]
  public class MachFileFsm
  {


    LastFileCur() : void
    {
      LastSaved = CurFile;
    }

    LastFileEmpty() : void
    {
      LastSaved = "";
    }

    [Constructor]
    Init() : void
    {
      OpenDialog = OpenFileDialog();
      SaveDialog = SaveFileDialog();
      CurWantToSave = "Want to save file?";
      CurOverwrite = "Want to overwrite file?";
    }

    ViewOpenDialog(_ : CancellationToken) : void
    {
      when (!DisableDialogs)
      {
        def res = OpenDialog.ShowDialog();
        process_res(res)
      }
    }

    ViewSaveAsDialog(_ : CancellationToken) : void
    {
      when (!DisableDialogs)
      {
        def res = SaveDialog.ShowDialog();
        process_res(res)
      }
    }

    ViewNewDialog(_ : CancellationToken) : void
    {
      when (NewDialog != null) 
      {
        def res = NewDialog();
        process_res(if (res) DialogResult.OK else DialogResult.Cancel)
      }
    }

    process_res(res : DialogResult) : void
    {
      | Yes    => PostEvent(Event.yes)
      | Cancel => PostEvent(Event.Cancel)
      | No     => PostEvent(Event.no)
      | OK     => PostEvent(Event.ok)
      | _      => ()
    }

    ViewOverwrite(_ : CancellationToken) : void
    {
      when (!DisableDialogs)
      {
        def res = MessageBox.Show(CurOverwrite, "Warning", MessageBoxButtons.YesNoCancel);
        process_res(res)
      }
    }

    ViewWantToSave(_ : CancellationToken) : void
    {
      when (!DisableDialogs)
      {
        def res = MessageBox.Show(CurWantToSave, "Warning", MessageBoxButtons.YesNoCancel);
        process_res(res)
      }
    }

    public IsNewFile : bool
    {
      get
      {
        IsInState(State.New())
      }
    }

    public DisableDialogs : bool {get;set;}

    public OpenDialog : OpenFileDialog {get;set;}
    public SaveDialog : SaveFileDialog {get;set;}
    public NewDialog : void -> bool {get;set;}

    public LastSaved : string {get;private set;}
    public CurFile : string {get;private set;}
    public OpenFileAction : string -> bool {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    public CurWantToSave : string {get;set;}
    public CurOverwrite : string {get;set;}

  }

}
