using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart.Tests
{

  using FileFsm;
  using FileFsm.Event;
  using FileFsm.State;

  /// <summary>
  /// Description of FileFsmTest.
  /// </summary>
  partial class Test
  {

    DoThrow() : void
    {
      throw InvalidOperationException("test failed")
    }

    public FileFsmTest() : void
    {
      def fsm = FileFsm();
      //fsm.DisableDialogs = true;

      def is_in_state(st)
      {
        when (!fsm.IsInState(st)) DoThrow()
      }

      def not_in_state(st)
      {
        when (fsm.IsInState(st)) DoThrow()
      }

      fsm.Initiate();
      is_in_state(Waiting());
      is_in_state(FileWorking());
      fsm.NewFile();
      is_in_state(New());
      is_in_state(NeedSaving());
      fsm.Change();
      is_in_state(New());
      fsm.FileSaved();
      is_in_state(Saved());
      fsm.FileSaved();
      is_in_state(Saved());
      is_in_state(NotNeedSaving());
      fsm.Change();
      is_in_state(Changed());
      not_in_state(Waiting());
      fsm.FileSaved();
      is_in_state(Saved());
      fsm.Change();
      is_in_state(Changed());
      fsm.Exited();
      when (!fsm.IsTerminated) DoThrow()
    }

  }
}
