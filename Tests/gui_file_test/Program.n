using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Nemerle.Statechart.Tests;
using Nemerle.Statechart;

namespace fsm_test
{

  class Test
  {
    public Name : string {get;set;}
  }        
        
  class Test2
  {
    public Name : string {get;set;}
  }
          
  class FileFsmFormControl 
  {
    form : FileFsmForm;
    fsm_dialogs : FileFsmDialogs = FileFsmDialogs();
    fsm : FileFsm;
    
    public this()
    {
      form = FileFsmForm();
      fsm = fsm_dialogs.FileFsm;
      init();
      fsm.Initiate();
      fsm_dialogs.Initiate();
    }

    public Form : FileFsmForm
    {
      get
      {
        form
      }
    }

    [FormSync(form)]
    WaitingEntry() : void 
    {
      form.CaptionChange("program_name")
    }

    [FormSync(form)]
    NewEntry() : void 
    {
      form.CaptionChange("program_name - [new document]")
    }

    [FormSync(form)]
    ChangedEntry() : void 
    {
      form.CaptionChange("program_name - [document]*")
    }

    [FormSync(form)]
    SavedEntry() : void 
    {
      form.CaptionChange("program_name - [document]")
    }

    mutable exit : bool = false;
    
    [FormSync(form)]
    ForceClose() : void
    {
      exit = true;
      form.Close();
    }
    
    Closing(_ : object, evt : FormClosingEventArgs) : void
    {
      when (!exit)
      {
        fsm_dialogs.ExitButtonPressed();
        evt.Cancel = true;
      }
    }
    
    init() : void 
    {
      Form.NewHandler         += _ => fsm_dialogs.NewButtonPressed();
      Form.OpenHandler        += _ => fsm_dialogs.OpenButtonPressed();
      Form.SaveHandler        += _ => fsm_dialogs.SaveButtonPressed();
      Form.ChangeHandler      += _ => fsm.Change();
      Form.SaveAsHandler      += _ => fsm_dialogs.SaveAsButtonPressed();
      Form.FormClosing        += Closing;
      fsm_dialogs.Terminated += _ => ForceClose();
      fsm_dialogs.sync        = form;
      fsm.SaveEna             += form.SaveEna;
      fsm.SaveDis             += form.SaveDis;
      fsm.SaveAsEna           += form.SaveAsEna;
      fsm.SaveAllDis          += form.SaveAllDis;
      fsm.EntrySaved          += SavedEntry;
      fsm.EntryWaiting        += WaitingEntry;
      fsm.EntryNew            += NewEntry;
      fsm.EntryChanged        += ChangedEntry;
      fsm_dialogs.SaveDialog = Form.SaveDlg;
      fsm_dialogs.OpenDialog = Form.OpenDlg;
      fsm.Terminated          += _ => fsm_dialogs.Terminate();
      fsm.TransitionCompleted += fsm_TransitionCompleted;
      fsm_dialogs.NewDialog = _ => MessageBox.Show("New file", "New file", MessageBoxButtons.OKCancel) == DialogResult.OK;
      fsm_dialogs.OpenFileAction = file => MessageBox.Show($"Opening file $file", "Opening file", MessageBoxButtons.OKCancel) == DialogResult.OK;
      fsm_dialogs.SaveFileAction = file => MessageBox.Show($"File $file saved", "Saving file", MessageBoxButtons.OKCancel) == DialogResult.OK;
      
      UpdateState()
    }

    UpdateState() : void 
    {
      Form.SetState(if (fsm.IsTerminated) "Terminated" else fsm.ToString(), fsm_dialogs.CurFile)
    }

    fsm_TransitionCompleted(_ : object, _ : EventArgs) : void 
    {
      UpdateState()
    }
  }

  module Program 
  {
    public mutable form : FileFsmFormControl;

    /// <summary>
    /// The main entry point for the application.
    /// </summary
    [STAThread()]
    Main() : void 
    {
      Application.EnableVisualStyles();
      Application.SetCompatibleTextRenderingDefault(false);
      form = FileFsmFormControl();
      Application.Run(form.Form)
    }
  }


}
