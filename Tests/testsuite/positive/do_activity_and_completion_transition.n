using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Reactive.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing, auto_initial;

  //flags debug;

  name "do activity and completion transitions";

   state A
   {
     do / act1;
     _  / print_res => B;
   }

   state B
   {
     _ / print_res => C;

     state D
     {
       state E
       {
         do / act2;
         _ => $0;
       }
     }
   }

   state C
   {
     a => A;
   }
  #>)]
  public class example
  {
    mutable res : int;

    public override Initiate() : void
    {
      base.Initiate();
      Thread.Sleep(100);
    }

    print_res() : void
    {
      Console.WriteLine(res)
    }

    act1(_ : CancellationToken) : void
    {
      foreach (elem in NList.Range(10))
      {
        res += elem
      }

      //def res = Task.Delay(50).ContinueWith(_ => action());

    }

    act2(_ : CancellationToken) : void
    {
      foreach (elem in NList.Range(10))
      {
        res -= elem
      }

      //def res = Task.Delay(50).ContinueWith(_ => action());

    }
  }



module Test
{
  Main() : void
  {
   def fsm = example();
   def tester = fsm.GetTester();
   tester.ConsoleTestInit();
   tester.Initiate("C", 100, "EntryA", "ExitA", "EntryB", "EntryD", "EntryE", "ExitE", "EntryDFinal", "ExitDFinal", "ExitD", "EntryBFinal", "ExitBFinal", "ExitB", "EntryC");
   tester.TestWait("a", 100, "C", "EntryA", "ExitA", "EntryB", "EntryD", "EntryE", "ExitE", "EntryDFinal", "ExitDFinal", "ExitD", "EntryBFinal", "ExitBFinal", "ExitB", "EntryC", "ExitC", "EntryA", "ExitA", "EntryB", "EntryD", "EntryE", "ExitE", "EntryDFinal", "ExitDFinal", "ExitD", "EntryBFinal", "ExitBFinal", "ExitB", "EntryC");
   fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
ExitA
45
EntryB
EntryD
EntryE
ExitE
EntryDFinal
ExitDFinal
ExitD
EntryBFinal
ExitBFinal
ExitB
0
EntryC
[C]
Processing a 'a'
ExitC
EntryA
ExitA
45
EntryB
EntryD
[A]
EntryE
ExitE
EntryDFinal
ExitDFinal
ExitD
EntryBFinal
ExitBFinal
ExitB
0
EntryC
Ok
END-OUTPUT
*/

