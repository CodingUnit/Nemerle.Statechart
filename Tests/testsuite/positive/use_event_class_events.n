// REFERENCE: tests\both_histories_and_default_transition.exe
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

//using Nemerle.Statechart.Tests;
using System.Collections.Generic;
using System.Linq;


  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;
  name "event class with selecting events";
  //  flags debug;

  eventclass example.Event(a, b);

  state A
  {
    a => B;
    b => C;
    c => A;
  }

  state B
  {
    a => C;
    b => A;
  }

  state C
  {
    a => A;
    b => B;
  }
  #>)]
  public class example2
  {
  }

module Test
{
  Main() : void
  {
    def fsm = example2();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("A", "EntryA");
    tester.Test(example.Event.A.Instance, "B", "ExitA", "EntryB");
    tester.Test(example.Event.A.Instance, "C", "ExitB", "EntryC");
    tester.Test(example.Event.A.Instance, "A", "ExitC", "EntryA");
    tester.Test(example.Event.B.Instance, "C", "ExitA", "EntryC");
    tester.Test(example.Event.B.Instance, "B", "ExitC", "EntryB");
    tester.Test(example.Event.B.Instance, "A", "ExitB", "EntryA");
    tester.Test("c", "A", "ExitA", "EntryA");
    fsm.Terminate();
  }
}


/*
BEGIN-OUTPUT
EntryA
[A]
Ok
Processing a 'a'
ExitA
EntryB
[B]
Ok
Processing a 'a'
ExitB
EntryC
[C]
Ok
Processing a 'a'
ExitC
EntryA
[A]
Ok
Processing a 'b'
ExitA
EntryC
[C]
Ok
Processing a 'b'
ExitC
EntryB
[B]
Ok
Processing a 'b'
ExitB
EntryA
[A]
Ok
Processing a 'c'
ExitA
EntryA
[A]
Ok
END-OUTPUT
*/
