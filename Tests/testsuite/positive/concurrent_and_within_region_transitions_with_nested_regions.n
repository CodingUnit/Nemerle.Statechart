using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;

  name "concurrent and withing transitions";
  //flags debug;

   region J
   {

     region A
     {
       state B
       {
         a => C;
         b => C;
       }

       state C
       {
         a => B;
         b => B;
       }

     } and
     {
       state D
       {
         a => F;
         c => F;
       }

       state F
       {
         a => D;
         c => D;
       }
     }

   } and
   {

     state K
     {
       a => L;
     }

     state L
     {
       a => K;
     }
   }
  #>)]
  public class example
  {
  }



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit(true);
    tester.Initiate("K|B|D", ["J", "A", "K", "B", "D"]);
    tester.Test("b", "K|C|D", ["B"], ["C"]);
    tester.Test("b", "K|B|D", ["C"], ["B"]);
    tester.Test("c", "K|B|F", ["D"], ["F"]);
    tester.Test("c", "K|B|D", ["F"], ["D"]);
    tester.Test("a", "L|C|F", ["B", "D", "K"], ["L", "C", "F"]);
    tester.Test("c", "L|C|D", ["F"], ["D"]);
    tester.Test("a", "K|B|F", ["C", "D", "L"], ["K", "B", "F"]);
    tester.Test("b", "K|C|F", ["B"], ["C"]);
    tester.Test("a", "L|B|D", ["C", "F", "K"], ["L", "B", "D"]);
    tester.Test("c", "L|B|F", ["D"], ["F"]);
    tester.Test("a", "K|C|D", ["B", "F", "L"], ["K", "C", "D"]);
    tester.Test("c", "K|C|F", ["D"], ["F"]);
    tester.Test("a", "L|B|D", ["C", "F", "K"], ["L", "B", "D"]);
    tester.Test("b", "L|C|D", ["B"], ["C"]);
    tester.Test("a", "K|B|F", ["C", "D", "L"], ["K", "B", "F"]);
    tester.Test("b", "K|C|F", ["B"], ["C"]);
    tester.Test("c", "K|C|D", ["F"], ["D"]);
    tester.Test("a", "L|B|F", ["C", "D", "K"], ["L", "B", "F"]);
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryJ
EntryA
EntryK
EntryB
EntryD
[K|B|D]
Ok
Processing a 'b'
ExitB
EntryC
[K|C|D]
Ok
Processing a 'b'
ExitC
EntryB
[K|B|D]
Ok
Processing a 'c'
ExitD
EntryF
[K|B|F]
Ok
Processing a 'c'
ExitF
EntryD
[K|B|D]
Ok
Processing a 'a'
ExitB
ExitD
ExitK
EntryL
EntryC
EntryF
[L|C|F]
Ok
Processing a 'c'
ExitF
EntryD
[L|C|D]
Ok
Processing a 'a'
ExitC
ExitD
ExitL
EntryK
EntryB
EntryF
[K|B|F]
Ok
Processing a 'b'
ExitB
EntryC
[K|C|F]
Ok
Processing a 'a'
ExitC
ExitF
ExitK
EntryL
EntryB
EntryD
[L|B|D]
Ok
Processing a 'c'
ExitD
EntryF
[L|B|F]
Ok
Processing a 'a'
ExitB
ExitF
ExitL
EntryK
EntryC
EntryD
[K|C|D]
Ok
Processing a 'c'
ExitD
EntryF
[K|C|F]
Ok
Processing a 'a'
ExitC
ExitF
ExitK
EntryL
EntryB
EntryD
[L|B|D]
Ok
Processing a 'b'
ExitB
EntryC
[L|C|D]
Ok
Processing a 'a'
ExitC
ExitD
ExitL
EntryK
EntryB
EntryF
[K|B|F]
Ok
Processing a 'b'
ExitB
EntryC
[K|C|F]
Ok
Processing a 'c'
ExitF
EntryD
[K|C|D]
Ok
Processing a 'a'
ExitC
ExitD
ExitK
EntryL
EntryB
EntryF
[L|B|F]
Ok
END-OUTPUT
*/
