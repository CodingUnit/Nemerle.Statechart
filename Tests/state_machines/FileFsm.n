using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.ComponentModel;
using System.Windows.Forms;
using System.Threading;

namespace Nemerle.Statechart.Tests
{  

  [statechart(<#

  flags : auto_initial transition_completed_events;
  flags : debug;// all_sync;

  //sync form;
  
  entry / SaveDis;
  
  save_as_pressed / last_event = Event.save_pressed => SaveChecking.SaveAs;
  
  0 => Waiting;
  
  state Interface
  {
    (H*)
  }
  
  state NotNeedSaving : Interface
  {
    open_pressed => OpenDialog;
    new_pressed  => NewDialog;
    exit_pressed => X;
    entry / SaveDis;
    
    state Saved
    {
        
        entry / CaptionFileName SaveAsEna;
        entry / LastSaved = CurFile;
        Change => Changed;
    }
    
    state Waiting
    {
      entry / SaveAllDis CaptionProgName;
    }
  
  }
  
  state NotSaved : Interface
  {
      entry / SaveEna;

      new_pressed, open_pressed, save_pressed, exit_pressed / last_event = Evt.evt => FileDialogs;
      
      state New
      {
          entry / CaptionFile SaveAsEna;
          entry / LastSaved = "";
          save_pressed / last_event = Evt.evt => SaveChecking.SaveAs;
      }

      state Changed
      {
          entry / CaptionChanged;
          save_pressed / last_event = Evt.evt => SaveChecking.Overwrite;
      }

  }

  [Initial]
  state SaveChecking : FileDialogs
  {
    _ / send(last_event) => NotNeedSaving;
    
    state WantToSave
    {
      do / ViewDialog(ViewWantToSave);
      Yes => { 
               LastSaved.IsEmpty() => SaveAs;
               else                => Overwrite;
             }
             
      No  => $0;
    }
    
    state Overwrite
    {
      do / ViewDialog(ViewOverwrite);
      Yes => SaveCurrentFile;
      No  => SaveAs;
    }
    
    state SaveCurrentFile
    {
      do / DoActionComplete(SaveCurrentFile);
      OK => $0;
    }
    
    state SaveAs
    {
      OK => $0;
      do / DoActionComplete(SaveAsDialog);
    }
  }
  
  state FileDialogs
  {
    OK     => Interface;
    cancel => Interface.H;
    
    state OpenDialog
    {
      state ViewOpenDialog
      {
        do / DoActionComplete(ViewOpenDialog);
        OK / CurFile = OpenDialog.FileName => OpenFile;
      }
      
      state OpenFile
      {
        do / DoActionComplete(OnOpenFileAction);
      }
    }
    
    state NewDialog
    {
      
      state ViewNewDialog
      {
        do / DoActionComplete(ViewNewDialog);
        OK => NewDialogAction;
      }
      
      state NewDialogAction
      {
        do / DoActionComplete(OnNewFileAction);
        OK => NotSaved;
      }
    }
    
  }
  #>
  )]
  public class FileFsm
  {
    
    mutable last_event : Event;
    
    public sync : ISynchronizeInvoke {get;set;}
    
    //DoSaveFile() : bool
    //{
    //  if (LastSaved.IsEmpty())
    //  {
    //    SaveAsDialog()
    //  }
    //  else
    //  {
    //    match (ViewOverwrite())
    //    {
    //      | Yes => SaveCurrentFile()
    //      | No  => SaveAsDialog()
    //      | _   => false
    //    }
    //  }
    //}

    //save_checking(_tok : CancellationToken) : void
    //{
    //  def res = //if (last_event == Event.save_pressed) DoSaveFile() else
    //            match (ViewWantToSave())
    //            {
    //              | Yes    => DoSaveFile()
    //              | No     => true
    //              | _      => false
    //            }

    //  if (res) OK() else cancel()
    //}

    ViewOverwrite() : DialogResult
    {
      MessageBox.Show("Want to overwrite file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewWantToSave() : DialogResult
    {
      MessageBox.Show("Want to save file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewDialog(dlg : void -> DialogResult) : void
    {
      match (dlg())
      {
        | DialogResult.Yes    => Yes()
        | DialogResult.No     => No()
        | DialogResult.Cancel => cancel()
        | _                   => ()
      }
    }
    
    DoActionComplete(act : void -> bool) : void
    {
      if (act()) OK() else cancel()
    }
    
    SaveAsDialog() : bool
    {
      SaveDialog.FileName = CurFile;
      def res = ViewSaveAsDialog();
      if (res == DialogResult.OK)
      {
        CurFile = SaveDialog.FileName;
        SaveCurrentFile()
      }
      else false
    }

    ViewOpenDialog() : bool
    {
      //OpenDialog.ShowDialog() 
      sync.Sync(OpenDialog.ShowDialog) == DialogResult.OK
    }

    ViewSaveAsDialog() : DialogResult
    {
      sync.Sync(SaveDialog.ShowDialog)
    }

    ViewNewDialog() : bool
    {
      NewDialog == null || NewDialog()
    }

    OnOpenFileAction() : bool
    {
      OpenFileAction == null || OpenFileAction(CurFile)
    }

    OnNewFileAction() : bool
    {
      NewFileAction == null || NewFileAction()
    }

    public OpenDialog : OpenFileDialog {get;set;}
    public SaveDialog : SaveFileDialog {get;set;}
    
    SaveCurrentFile() : bool
    {
      SaveFileAction == null || SaveFileAction(CurFile)
    }

    public LastSaved : string {get;private set;}
    public CurFile   : string {get;private set;}
    public NewFileAction  : void -> bool {get;set;}
    public OpenFileAction : string -> bool {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    public NewDialog  : void -> bool {get;set;}
    
  }

}
