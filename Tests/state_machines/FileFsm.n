using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.ComponentModel;
using System.Windows.Forms;
using System.Threading;

namespace Nemerle.Statechart.Tests
{  

  [statechart(<#

  flags : auto_initial transition_completed_events;
  flags : debug;
  flags testing;

  //sync form;
  
  entry / SaveDis;
  
  save_as_pressed (=> FileDialogs.SaveChecking.save_as;
  exit_pressed     => Exiting;
  
  using SaveChecking SaveCheckingMachine; // include statemachine SaveChecking from SaveCheckingMachine class
  //using SaveCheckingSave SaveCheckingMachine;
  
  0 => Waiting;
  
  state Interface
  {
    new_pressed => NewDialog;
    open_pressed => OpenDialog;
    (H*)
  }
  
  merge merge_cancel => Interface.H;
  
  state NotNeedSaving : Interface
  {
    exit_pressed => X;
    entry / SaveDis;
    
    state Saved
    {
      entry / CaptionFileName SaveAsEna;
      Change => Changed;
    }
    
    state Waiting
    {
      entry / SaveAllDis CaptionProgName;
    }
  
  }
  
  state NotSaved : Interface
  {
    entry / SaveEna;

    save_pressed => FileDialogs.SaveChecking.save;
    open_pressed => FileDialogs;
    new_pressed  => NewCreating;
    
    state New
    {
      entry / CaptionFile SaveAsEna;
      save_pressed / send(save_as_pressed);
    }

    state Changed
    {
      entry / CaptionChanged;
    }

  }

  submachine SaveChecking : FileDialogs
  {
    _ => $0;
  }
  
  state FileDialogs
  {
    _      => Interface;
    cancel => Interface.H;
    
    state Opening
    {
      _ => final;
      
      submachine SaveChecking
      {
        _ => OpenDialog;
      }
    }
    
    state OpenDialog : Opening
    {
      _ => $0;
      
      state ViewOpenDialog
      {
        do / ViewDialog(ViewOpenDialog);
        OK / CurFile = OpenDialog.FileName => OpenFile;
      }
      
      state OpenFile
      {
        do / DoActionComplete(OnOpenFileAction);
        OK => $0;
      }
    }
    
    state NewCreating
    {
      _ => NotSaved;
      initial => SaveChecking.new;
      
      submachine SaveChecking
      {
        _ => NewDialog;
      }
    }
    
    state NewDialog : NewCreating
    {
      _ => $0;
      
      state ViewNewDialog
      {
        do / DoActionComplete(ViewNewDialog);
        OK => NewDialogAction;
      }
      
      state NewDialogAction
      {
        do / DoActionComplete(OnNewFileAction);
        OK => $0;
      }
    }
    
    state Exiting
    {
      _ => X;
    }
    
    submachine SaveChecking : Exiting
    {
      _ => $0;
    }
  }
  #>
  )]
  public class FileFsm
  {
    
    mutable last_event : Event;
    
    public sync : ISynchronizeInvoke {get;set;}
    

    ViewDialog(dlg : void -> DialogResult) : void
    {
      def res = dlg();
      match (res)
      {
        | DialogResult.OK     => OK()
        | DialogResult.Yes    => Yes()
        | DialogResult.No     => No()
        | DialogResult.Cancel => cancel()
        | _                   => ()
      }
    }
    
    DoActionComplete(act : void -> bool) : void
    {
      if (act()) OK() else cancel()
    }
    
    ViewOpenDialog() : DialogResult
    {
      sync.Sync(OpenDialog.ShowDialog)
    }

    ViewNewDialog() : bool
    {
      NewDialog == null || NewDialog()
    }

    OnOpenFileAction() : bool
    {
      OpenFileAction == null || OpenFileAction(CurFile)
    }

    OnNewFileAction() : bool
    {
      NewFileAction == null || NewFileAction()
    }

    public OpenDialog : OpenFileDialog {get;set;}
    
    CurFile   : string {get;private set;}
    public NewFileAction  : void -> bool {get;set;}
    public OpenFileAction : string -> bool {get;set;}
    
    public NewDialog  : void -> bool {get;set;}
    
  }

}
