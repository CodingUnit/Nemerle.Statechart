using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.ComponentModel;
using System.Windows.Forms;
using System.Threading;

namespace Nemerle.Statechart.Tests
{  

  [statechart(<#

  flags : auto_initial transition_completed_events;
  flags : debug;// all_sync;

  //sync form;
  
  entry / SaveDis;
  
  SaveAsButton => SaveFileAs;
  
  0 => Waiting;
  
  state NotNeedSaving
  {
    Open => OpenDialog;
    New  => NewDialog;
    Exit => X;
    
    state Saved
    {
        
        entry / CaptionFileName SaveAsEna;
        Change => Changed;
    }
    
    state Waiting
    {
      entry / SaveAllDis CaptionProgName;
    }
  
  }
  
  state NotSaved
  {
      entry / SaveEna;

      New, Open, Save, Exit / last_event = Evt.evt => SaveChecking;
      
      state New
      {
          entry / CaptionFile SaveAsEna;
          Save => SaveFileAs;
      }

      state Changed
      {
          entry / CaptionChanged;
      }

      (H)
  }

  state SaveChecking
  {
    Cancel => H;
    OK / send(last_event) => NotNeedSaving;
    
    do / save_checking;
  }
  
  state FileDialogs
  {
    _, Cancel => NotNeedSaving;
    OK => $0;
    
    state OpenDialog
    {
      do / open_dialog;
    }
    
    state NewDialog
    {
      OK => NotSaved;
      do / new_dialog;
    }
    
    state SaveFileAs
    {
      do / saving_file_as;
    }
    
  }
  #>
  )]
  public class FileFsm
  {
    
    last_event : Event;
    
    public sync : ISynchronizeInvoke {get;set;}
    
    DoSaveFile() : bool
    {
      if (InState(State.New()))
      {
        SaveAsDialog()
      }
      else
      {
        match (ViewOverwrite())
        {
          | Yes => SaveCurrentFile()
          | No  => SaveAsDialog()
          | _   => false
        }
      }
    }

    save_checking(_tok : CancellationToken) : void
    {
      def res = match (ViewWantToSave())
                {
                  | Yes    => DoSaveFile()
                  | No     => true
                  | _      => false
                }

      if (res) OK() else Cancel()
    }

    new_dialog(_tok : CancellationToken) : void
    {
      def res = if (ViewNewDialog()) OnNewFileAction() else false;
      if (res) OK() else Cancel()
    }

    open_dialog(_tok : CancellationToken) : void
    {
      def res = if (ViewOpenDialog())
                 {
                   CurFile = OpenDialog.FileName;
                   OnOpenFileAction()
                 } else false;
      if (res) OK() else Cancel()
    }

    //saving_file(_tok : CancellationToken) : void
    //{
    //  when (!DoSaveFile()) Cancel()
    //}
    
    saving_file_as(_tok : CancellationToken) : void
    {
      def res = SaveAsDialog();
      if (res) OK() else Cancel()
    }
    
    ViewOverwrite() : DialogResult
    {
      MessageBox.Show("Want to overwrite file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewWantToSave() : DialogResult
    {
      MessageBox.Show("Want to save file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    SaveAsDialog() : bool
    {
      SaveDialog.FileName = CurFile;
      def res = ViewSaveAsDialog();
      if (res == DialogResult.OK)
      {
        CurFile = SaveDialog.FileName;
        SaveCurrentFile()
      }
      else false
    }

    ViewOpenDialog() : bool
    {
      //OpenDialog.ShowDialog() 
      sync.Sync(OpenDialog.ShowDialog) == DialogResult.OK
    }

    ViewSaveAsDialog() : DialogResult
    {
      sync.Sync(SaveDialog.ShowDialog)
    }

    ViewNewDialog() : bool
    {
      NewDialog == null || NewDialog()
    }

    OnOpenFileAction() : bool
    {
      OpenFileAction == null || OpenFileAction(CurFile)
    }

    OnNewFileAction() : bool
    {
      NewFileAction == null || NewFileAction()
    }

    public OpenDialog : OpenFileDialog {get;set;}
    public SaveDialog : SaveFileDialog {get;set;}
    
    SaveCurrentFile() : bool
    {
      SaveFileAction == null || SaveFileAction(CurFile)
    }

    public CurFile   : string {get;private set;}
    public NewFileAction  : void -> bool {get;set;}
    public OpenFileAction : string -> bool {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    public NewDialog  : void -> bool {get;set;}
    
  }

}
