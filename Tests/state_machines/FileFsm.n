using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.ComponentModel;
using System.Windows.Forms;
using System.Threading;

namespace Nemerle.Statechart.Tests
{  

  [statechart(<#

  flags : auto_initial transition_completed_events;
  flags : debug testing;

  //sync form;
  
  entry / SaveDis;
  
  save_as_pressed (=> SaveChecking.save_as;
  
  using SaveChecking SaveCheckingMachine; // include statemachine SaveChecking from SaveCheckingMachine class
  
  0 => Waiting;
  
  state Interface
  {
    (H*)
  }
  
  merge merge_cancel => Interface.H;
  
  state NotNeedSaving : Interface
  {
    open_pressed => OpenDialog;
    new_pressed  => NewDialog;
    exit_pressed => X;
    entry / SaveDis;
    
    state Saved
    {
      entry / CaptionFileName SaveAsEna;
      entry / LastSaved = CurFile;
      Change => Changed;
    }
    
    state Waiting
    {
      entry / SaveAllDis CaptionProgName;
    }
  
  }
  
  state NotSaved : Interface
  {
    entry / SaveEna;

    new_pressed, open_pressed, exit_pressed => FileDialogs;
      
    state New
    {
        entry / CaptionFile SaveAsEna;
        entry / LastSaved = "";
        save_pressed => SaveChecking.save_as;
    }

    state Changed
    {
        entry / CaptionChanged;
        save_pressed => SaveChecking.save;
    }

  }

  submachine SaveChecking : FileDialogs
  {
    exit: cancel => merge_cancel;
    _ => {
          last_event == Event.new_pressed  => NewDialog;
          last_event == Event.open_pressed => OpenDialog;
          last_event == Event.exit_pressed => X;
          else                             => NotNeedSaving;
         }
  }
  
  state FileDialogs
  {
    OK     => Interface;
    cancel => merge_cancel;
    
    state OpenDialog
    {
      state ViewOpenDialog
      {
        do / ViewDialog(ViewOpenDialog);
        OK / CurFile = OpenDialog.FileName => OpenFile;
      }
      
      state OpenFile
      {
        do / DoActionComplete(OnOpenFileAction);
      }
    }
    
    state NewDialog
    {
      
      state ViewNewDialog
      {
        do / DoActionComplete(ViewNewDialog);
        OK => NewDialogAction;
      }
      
      state NewDialogAction
      {
        do / DoActionComplete(OnNewFileAction);
        OK => NotSaved;
      }
    }
    
  }
  #>
  )]
  public class FileFsm
  {
    
    mutable last_event : Event;
    
    public sync : ISynchronizeInvoke {get;set;}
    
    ViewOverwrite() : DialogResult
    {
      MessageBox.Show("Want to overwrite file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewWantToSave() : DialogResult
    {
      MessageBox.Show("Want to save file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewDialog(dlg : void -> DialogResult) : void
    {
      def res = dlg();
      match (res)
      {
        | DialogResult.OK     => OK()
        | DialogResult.Yes    => Yes()
        | DialogResult.No     => No()
        | DialogResult.Cancel => cancel()
        | _                   => ()
      }
    }
    
    DoActionComplete(act : void -> bool) : void
    {
      if (act()) OK() else cancel()
    }
    
    ViewOpenDialog() : DialogResult
    {
      sync.Sync(OpenDialog.ShowDialog)
    }

    ViewSaveAsDialog() : DialogResult
    {
      sync.Sync(SaveDialog.ShowDialog)
    }

    ViewNewDialog() : bool
    {
      NewDialog == null || NewDialog()
    }

    OnOpenFileAction() : bool
    {
      OpenFileAction == null || OpenFileAction(CurFile)
    }

    OnNewFileAction() : bool
    {
      NewFileAction == null || NewFileAction()
    }

    public OpenDialog : OpenFileDialog {get;set;}
    public SaveDialog : SaveFileDialog {get;set;}
    
    SaveCurrentFile() : bool
    {
      SaveFileAction == null || SaveFileAction(CurFile)
    }

    public LastSaved : string {get;private set;}
    public CurFile   : string {get;private set;}
    public NewFileAction  : void -> bool {get;set;}
    public OpenFileAction : string -> bool {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    public NewDialog  : void -> bool {get;set;}
    
  }

}
