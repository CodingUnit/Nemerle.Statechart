using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.Windows.Forms;
using System.Threading;
using System.ComponentModel;

namespace Nemerle.Statechart.Tests
{
  using FileFsm.Event;
  using FileFsm;

  /// <summary>
  /// Description of FileFsmDialogs.
  /// </summary>
  [statechart(<#

  flags : transition_completed_events;
  //flags : debug;

  //flags : all_sync_invoke;
  
  name : FileDialogs;

  //sync_invoke form;
  
  [Initial]
  state Working
  {
    NewButtonPressed  => NewSaveChecking;
    OpenButtonPressed => OpenSaveChecking;
    ExitButtonPressed   => ExitSaveChecking;
    SaveButtonPressed => SaveFile;
    SaveAsButtonPressed => SaveFileAs;
  }

  state Dialogs
  {
    Cancel => Working;
    _      => Working;

    state NewSaveChecking
    {
      do / save_checking;

      _ => NewDialog;
    }

    state OpenSaveChecking
    {
      do / save_checking;
      _ => OpenDialog;
    }

    state ExitSaveChecking
    {
      do / save_checking;
      _ / send_event(Exiting) => $0;
    }

    state SaveFile
    {
      do / saving_file;
      _ / send_event(FileSaved) => $0;
    }
    
    state SaveFileAs
    {
      do / saving_file_as;
      _ / send_event(FileSaved) => $0;
    }
    
    state NewDialog
    {
      do / new_dialog;
      OK / send_event(NewFileCreated) => $0;
    }

    state OpenDialog
    {
      do / open_dialog;
      OK / send_event(FileSaved) => $0;
    }
  }

  #>
  )]
  public class FileFsmDialogs
  {
    [Accessor]
    file_fsm : FileFsm = FileFsm();
    public sync : ISynchronizeInvoke {get;set;}
    
    send_event(evt : FileFsm.Event) : void // 
    {
      file_fsm.PostEvent(evt)
    }

    public IsNewFile : bool
    {
      get
      {
        file_fsm.IsInState(State.New());
      }
    }

    public IsNeedSave : bool
    {
      get
      {
        file_fsm.IsInState(State.NotSaved());
      }
    }

    DoSaveFile() : bool
    {
      if (IsNewFile)
      {
        SaveAsDialog()
      }
      else
      {
        match (ViewOverwrite())
        {
          | Yes => SaveCurrentFile()
          | No  => SaveAsDialog()
          | _   => false
        }
      }
    }

    save_checking(_tok : CancellationToken) : void
    {
      def ready = if (IsNeedSave)
                   {
                     match (ViewWantToSave())
                     {
                       | Yes    => DoSaveFile()
                       | No     => true
                       | _      => false
                     }
                   } else true;

      when (!ready) Cancel()
    }

    new_dialog(_tok : CancellationToken) : void
    {
      def res = if (ViewNewDialog()) OnNewFileAction() else false;
      if (res) OK() else Cancel()
    }

    open_dialog(_tok : CancellationToken) : void
    {
      def res = if (ViewOpenDialog())
                 {
                   CurFile = OpenDialog.FileName;
                   OnOpenFileAction()
                 } else false;
      if (res) OK() else Cancel()
    }

    saving_file(_tok : CancellationToken) : void
    {
      when (!DoSaveFile()) Cancel()
    }
    
    saving_file_as(_tok : CancellationToken) : void
    {
      when (!SaveAsDialog()) Cancel()
    }
    
    ViewOverwrite() : DialogResult
    {
      MessageBox.Show("Want to overwrite file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewWantToSave() : DialogResult
    {
      MessageBox.Show("Want to save file?", "Warning", MessageBoxButtons.YesNoCancel);
    }

    SaveAsDialog() : bool
    {
      SaveDialog.FileName = CurFile;
      def res = ViewSaveAsDialog();
      if (res == DialogResult.OK)
      {
        CurFile = SaveDialog.FileName;
        SaveCurrentFile()
      }
      else false
    }

    ViewOpenDialog() : bool
    {
      //OpenDialog.ShowDialog() 
      sync.Sync(OpenDialog.ShowDialog) == DialogResult.OK
    }

    ViewSaveAsDialog() : DialogResult
    {
      sync.Sync(SaveDialog.ShowDialog)
    }

    ViewNewDialog() : bool
    {
      NewDialog == null || NewDialog()
    }

    OnOpenFileAction() : bool
    {
      OpenFileAction == null || OpenFileAction(CurFile)
    }

    OnNewFileAction() : bool
    {
      NewFileAction == null || NewFileAction()
    }

    public OpenDialog : OpenFileDialog {get;set;}
    public SaveDialog : SaveFileDialog {get;set;}
    
    SaveCurrentFile() : bool
    {
      SaveFileAction == null || SaveFileAction(CurFile)
    }

    public CurFile   : string {get;private set;}
    public NewFileAction  : void -> bool {get;set;}
    public OpenFileAction : string -> bool {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    public NewDialog  : void -> bool {get;set;}
  }
}
