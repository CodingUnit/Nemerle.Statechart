using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of AlarmClock.
  /// </summary>
  [statechart(
  <#
  flags auto_initial testing;
  // flags debug;
  
  state Powered
  {
    no_battery => NotPowered;
    
    state KeepTime
    {
      state PMIconOff
      {
        after_12_hours => PMIconOn;
      }
      
      state PMIconOn
      {
        pass_12_hours => PMIconOff;
      }
    }
    
    [---]
    
    state Run
    {
      
      state DisplayCurrentTime
      {
        push_hour, push_min              => DisplayAlarmTime;
        push_hour_and_min [is_alarm_on]  => Beep;
      }
      
      state DisplayAlarmTime
      {
        hour_min_release => DisplayCurrentTime;
      }
      
      state Beep
      {
        hour_min_release => DisplayCurrentTime;
      }
      
      time_set  => TimeSet;
      alarm_set => AlarmSet;
    }
    
    state AlarmSet
    {
      entry / al_icon_on;
      exit  / al_icon_off;
      
      run => Run;
      
      state DisplayAlarmTime
      {
        push_hour / UpdateHours;
        push_min  / UpdateMins;
      }
      
    }
    
    state TimeSet
    {
      run => Run;
      
      state DisplayCurrentTime
      {
        push_hour / UpdateHours;
        push_min  / UpdateMins;
      }
      
    }
    
    [---]
    
    state AlarmOff
    {
      alarm_on => AlarmOn;
    }
    
    state AlarmOn
    {
      entry / alarm_icon_on;
      exit  / alarm_icon_off;
      alarm_off => AlarmOff;
      
      state Idle
      {
        current_time_is_alarm [light_pressed] => @;
        current_time_is_alarm [else]          => Ringing;
      }
      
      state Ringing
      {
        drowse_light / alarm += TimeSpan.FromSeconds(4) => Idle;
        after (1 min) => Idle;
      }
    }
    
    [---]
    
    state BacklightOff
    {
      drowse_light => BacklightOn;
    }
    
    state BacklightOn
    {
      drowse_light_release => BacklightOff;
    }
  }
  
  state NotPowered
  {
    battery => Powered;
  }
  
  #>)]
  public class AlarmClock
  {
    mutable alarm : DateTime;
    
    light_pressed : bool 
    {
      get
      {
        true
      }
    }
    
    is_alarm_on : bool
    {
      get
      {
        true
      }
    }
  }
}

