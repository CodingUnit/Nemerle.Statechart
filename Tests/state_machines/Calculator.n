using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Calculator.
  /// </summary>
  [statechart(
  <#
  flags auto_initial log;
  //flags debug;
  
  event oper(char);
  event digit(int);
  
  state on
  {
    off => off;
    C => @;
    
    state ready
    {
      digit(n) [n == 0] => zero1;
      digit    [else]   => int1; // digit [else]
      point => frac1;
      oper  => opEntered; // oper

      state begin
      {
        oper(o) [o == '-'] => negated1;
      }
      
      state result
      {

      }
      
      state negated1
      {
        $> / negate();
        oper(o) [o == '-'] / ();
        CE => begin;
      }
      
    }
    
    
    state operand1
    {
      CE => ready;
      oper => opEntered;
      
      state zero1
      {
        digit(i) [i == 0] / ();
        digit    [else] => int1;
        point => frac1;
        
      }
      
      state int1
      {
        digit(n) / insert(n);
        point => frac1;
      }
      
      state frac1
      {
        digit(n) / insert(n);
        point / ();
      }
    }
    
    state opEntered
    {
      digit(n) [n == 0] => zero2;
      digit    [else]   => int2;
      point => frac2;
      
      state entered
      {
        oper(o) [o == '-'] => negated2;
      }
      
      state negated2
      {
        entry / negate2();
        oper(o) [o == '-'] / ();
      }
      
    }
    
    state operand2
    {
      CE   => opEntered;
      oper => {
                error => error;
                else  => opEntered;
              }
      equal / calculate() => {
                               error => error;
                               else  => result;
                             }
                
      state zero2
      {
        digit(n) [n == 0] / ();
        point => frac2;
      }
      
      state int2
      {
        digit(n) / insert2(n);
        point => frac2;
      }
      
      state frac2
      {
        digit(n) / insert2(n);
      }
    }
    
    state error
    {
      
    }
    
  }

  state off
  {
    
  }
  
  #>
  )]
  public class Calculator
  {
    error : bool {get;set;default false}
    
    negate() : void
    {
    }
    
    insert(_n : int) : void
    {
    }
    
    insert2(_n : int) : void
    {
    }
    
    calculate() : void
    {
    }
  }
}
