using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of AlarmClockInternals.
  /// </summary>
  [statechart(<#
  
  state Powered
  {
    no_battery => NotPowered;
    
    state KeepTime
    {
      entry / set_am_pm;
      
      state PMIconOff
      {
        entry / set_am;
        after_12_hours => PMIconOn;
      }
      
      state PMIconOn
      {
        entry / set_pm;
        pass_12_hours => PMIconOff;
      }
    }
    
    [---]
    
    state AlarmOff
    {
      alarm_on => AlarmOn;
    }
    
    state AlarmOn
    {
      entry / alarm_icon_on;
      exit  / alarm_icon_off;
      alarm_off => AlarmOff;
      
      state Idle
      {
        current_time_is_alarm [light_pressed] => @;
        current_time_is_alarm [else]          => Ringing;
      }
      
      state Ringing
      {
        drowse_light / alarm += TimeSpan.FromSeconds(4) => Idle;
        after (1 min) => Idle;
      }
    }
   
   [---]
   
    state BacklightOff
    {
      drowse_light => BacklightOn;
    }
    
    state BacklightOn
    {
      drowse_light_release => BacklightOff;
    }

  }
    
  state NotPowered
  {
    battery => Powered;
  }
  
  #>)]
  partial class AlarmClock
  {
    mutable alarm : DateTime;
    
    mutable Now : DateTime;
    
    mutable blink_flag : bool;
    
    mutable diff : TimeSpan;
    
    blink : bool
    {
      get
      {
        if (blink_flag)
        {
          blink_flag = false;
          true
        } else
        {
          blink_flag = true;
          false
        }
      }
    }
    
    EntryPowered() : void
    {
      Now = DateTime.Now;
      diff = TimeSpan.Zero;
    }
    
    set_am_pm() : void
    {
      if (Now.Hour > 12) Onset_pm(); else Onset_am();
    }
    
  }
}
