using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of SaveCheckingMachine.
  /// </summary>
  [statechart(<#
  
  name SaveChecking;
  
  $> / last_event = Evt.evt;
  cancel => (X) cancel; // exit point cancel
    
  entry: save => Overwrite; // entry point syntax 1
  save_as:    => SaveAs;    // entry point syntax 2
  
  state WantToSave
  {
    do / ViewDialog(ViewWantToSave);
    Yes => {
             LastSaved.IsEmpty() => SaveAs;
             else                => Overwrite;
           }
             
    No  => $0;
  }
    
  state Overwrite
  {
    do / ViewDialog(ViewOverwrite);
    Yes => SaveCurrentFile;
    No  => SaveAs;
  }
    
  state SaveCurrentFile
  {
    do / DoActionComplete(SaveCurrentFile);
    OK => $0;
  }
    
  state SaveAs
  {
    entry / SaveDialog.FileName = CurFile;
      
    do / ViewDialog(ViewSaveAsDialog);
    OK / CurFile = SaveDialog.FileName => SaveCurrentFile;
  }
  #>)]
  class SaveCheckingMachine
  {
  }
}
