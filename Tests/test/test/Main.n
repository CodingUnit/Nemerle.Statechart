using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Console;
using Nemerle.Statechart;

  /// <summary>
  /// Description of PathCover.
  /// </summary>
  [statechart(<#

  flags : auto_initial
          transition_completed
          auto_entry_exit
          testing;

  state Main
  {
    a => A.H;
  }

  state A : Main
  {
    0 => H;
    e => @;
    (H*) => F;
    b    => B;
  }

  state B : Main
  {
    c => A;
  }

  state C : A
  {
    state E
    {
      d => F;
    }
    
    state F
    {
      d => E;
    }
  }

  #>
  )]
  public class HistoryTestFsm
  {

  }

  /// <summary>
  /// Description of PathCoverFsmTest.
  /// </summary>
  module Test
  {

    public Main() : void
    {
      def fsm = HistoryTestFsm();
      def tester = fsm.GetTester();
      tester.ConsoleTestInit();

      tester.StartConsole();
      fsm.Terminate();
      tester.GenerateTest("tester", "code.n", "out.txt")
    }

  }

/*
BEGIN-OUTPUT
EntryA
EntryB
EntryC
Ok
Processing a 'A' 
Ok
Processing a 'B' 
ExitC
EntryE
Ok
Processing a 'J' 
ExitE
ExitB
ExitA
EntryA
EntryB
EntryC
Ok
Processing a 'D' 
ExitC
ExitB
EntryD
Ok
Processing a 'A' 
Ok
Processing a 'E' 
ExitD
EntryB
EntryC
Ok
Processing a 'B' 
ExitC
EntryE
Ok
Processing a 'I' 
ExitE
ExitB
EntryD
Ok
Processing a 'G' 
ExitD
ExitA
EntryA
EntryD
Ok
Processing a 'E' 
ExitD
EntryB
EntryC
Ok
Processing a 'F' 
ExitC
ExitB
EntryB
EntryC
Ok
Processing a 'C' 
ExitC
ExitB
EntryB
EntryE
Ok
Processing a 'K' 
ExitE
ExitB
ExitA
EntryA
EntryB
EntryC
Ok
Processing a 'M' 
ExitC
EntryC
Ok
Processing a 'D' 
ExitC
ExitB
EntryD
Ok
Processing a 'N' 
ExitD
EntryB
EntryC
Ok
Processing a 'B' 
ExitC
EntryE
Ok
Processing a 'I' 
ExitE
ExitB
EntryD
Ok
Processing a 'N' 
ExitD
EntryB
EntryE
Ok
END-OUTPUT
*/
