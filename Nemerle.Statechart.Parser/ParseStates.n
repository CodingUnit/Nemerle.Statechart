using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateNode;
  
  /// <summary>
  /// Description of ParseStates.
  /// </summary>
  public partial class FsmParser
  {
    name(s : NToken, name : NToken, _ : NToken) : StateNode
    {
      def name = GetText(name);
      StateNode.Name(s.StartPos, name)
    }
    
    parent(_ : NToken, name : NameIdentifier) : NameIdentifier
    {
      name
    }
    
    stateMachine(nodes : List[StateNode]) : StateNode.StateMachine
    {
      def merge_flags(x : StateNode.Flags, a : MachineFlags)
      {
        match (x)
        {
          | StateNode.Flags(MachineFlags(f, e)) => def flags = (a.flags | f);
                                                   def err = a.errors.Concat(e).NToList();
                                                   MachineFlags(flags, err)
        }
        
      }
      
      def (flags, nodes) = nodes.PartitionType();
      def (name, nodes) = nodes.PartitionType();
      
      def pos = if (nodes.IsEmpty()) 0 else nodes.First().pos;
      def state = CreateState(pos, null, [], nodes, StateType.State(), None());
      
      
      def flags = flags.FoldLeft(MachineFlags(MachineFlag.None, []), merge_flags);
      def name = match (name.NToList())
                 {
                   | StateNode.Name as n :: _ => n.name
                   | _                        => null
                 }
      StateNode.StateMachine(pos, flags, name, state)
    }

    state(attr : option[List[StateAttribute]], _ : NToken, name : NToken, parent : option[NameIdentifier], _ : NToken, nodes : List[StateNode], _ : NToken) : StateNode.State
    {
      def name_text = GetText(name);
      def attr = attr.WithDefault(Enumerable.Empty());
      CreateState(name.StartPos, name_text, attr, nodes, StateType.State(), parent)
    }
    
    CreateState(pos : int, name : string, attr : IEnumerable[StateAttribute], decls : IEnumerable[StateNode], type : StateType, parent : option[NameIdentifier]) : StateNode.State
    {
      def get_decls(decls) 
      {
        def (en, decls)       = decls.PartitionType();
        def (ex, decls)       = decls.PartitionType();
        def (states, decls)   = decls.PartitionType();
        def (trans, decls)    = decls.PartitionType();
        def (defer, decls)    = decls.PartitionType();
        def defer = defer.SelectMany(x : Defer => x.evt).NToList();
        //def (trans, other)    = trans.Partition(x => x.type == TransitionType.Transition);
        //def (in_trans, other) = other.Partition(x => x.type == TransitionType.Internal);
        //def (init, _)         = other.Partition(x => x.type == TransitionType.Initial);
        def (do_act, decls)   = decls.PartitionType();
        
        def (pseudo, decls) = decls.PartitionType();
        
        (en, ex, states, trans, do_act, pseudo, defer, decls)
      } 
      
      def create_sub_regions(reg)
      {
        def (en, ex, states, trans, do_act, pseudo, defer, _) = get_decls(reg);
        State(0, null, None(), [], en, ex, trans, do_act, defer, states, pseudo, StateType.SubRegion(), [])
      }
      
      def decls = decls.OrderBy(_.pos).NToList();
      def (reg_trans, reg) = decls.Partition(_ is StateNode.Transition);
      def regions = reg.FindDelimited(_ is State(type = StateType.SubRegion)); // split list by regions
      def (regions, decls) = if (regions.IsEmpty()) ([], decls) else (regions.Map(create_sub_regions), reg_trans); // create regions
      def (en, ex, states, trans, do_act, pseudo, defer, decls) = get_decls(decls);
      def (states, type) = if (regions.IsEmpty()) (states, type) else (regions, StateType.Region());
      def parent = parent.Map(_.FullName);
      State(pos, name, parent, attr.NToList(), en, ex, trans, do_act, defer, states, pseudo, type, decls.Map(x => Error(x.pos, x)))
     }
  }
}
