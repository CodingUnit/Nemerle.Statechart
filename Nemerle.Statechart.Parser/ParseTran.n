using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Peg;
using Nemerle;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  using StateNode;  
  //using TransitionNode;
  using PseudoStateModelNode;
  using GuardNode;
  using ListUtils;

  public partial class FsmParser
  {

    simple_target(name : NameIdentifier, _ : NToken) : TargetType
    {
      def pos = name.pos;

      def get_target(n)
      {
        | "history"  with hist = HistoryType.None
        | "H"  with hist = HistoryType.Shallow
        | "h"  with hist = HistoryType.Shallow
        | "h*" with hist = HistoryType.Deep
        | "H*" with hist = HistoryType.Deep => TargetType.PseudoState(pos, PseudoStateModelNode.History(pos, hist, None()))
        | "final"
        | "$0"       => TargetType.Final(pos)
        | "self"
        | "@"        => TargetType.Self(pos)
        | "terminate"
        | "x"
        | "X"        => TargetType.PseudoState(name.pos, PseudoStateModelNode.Terminate(0))
        | x when (x.IndexOf('(') != -1 ) => 
              def n = string(n.Explode().Except(['(', ')']).ToArray());
              TargetType.Named(name.pos, n)
          //| _ => TargetType.Named(name.pos, name.TargetName.Trim('(',')'))
        | _                      => TargetType.Named(name.pos, n)
      }

      match (name)
      {
        | Name(name = n) => get_target(n)
        | QualifiedName(parts = n) => def (tar, lst) = n.SplitLast();
            def st = $<#..$(lst;".")#>;
            TargetType.Qualified(name.pos, st, get_target(tar))//State(st, StateType.State()), 
      }
    }

    default_transition(act : Actions, target : TargetType, _ : NToken) : StateNode.Transition
    {
      def act = if (act.Empty) None() else Some(act);
      StateNode.Transition(target.pos, [], None(), act, target, TransitionType.Local)
    }

    events(id : NToken, evt : List[NToken * NToken]) : List[TransitionEvent]
    {
      def evt = evt.Select((_, x : NToken) => x);
      def lst = evt.AddBefore(id);
      lst.Select(create_event).ToList()
    }

    simple_transition(evt : List[TransitionEvent], guard : option[GuardNode], act : Actions, to : TargetType) : StateNode.Transition
    {
      def pos = evt.First().pos;
      def act = if (act.Empty) None() else Some(act);
      Transition(pos, evt.NToList(), guard, act, to, TransitionType.Transition)
    }

    local_trans(evt : List[TransitionEvent], guard : option[GuardNode], act : Actions, to : TargetType) : StateNode.Transition
    {
      def pos = evt.First().pos;
      def act = if (act.Empty) None() else Some(act);
      Transition(pos, evt.NToList(), guard, act, to, TransitionType.Local)
    }

    internal_trans(evt : NToken, guard : option[GuardNode], acts : Actions) : StateNode.Transition
    {
      Transition(evt.StartPos, create_event(evt) :: [], guard, Some(acts), TargetType.NoTarget(evt.StartPos), TransitionType.Internal)
    }

  }
}
