using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Peg;
using Nemerle;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

    using StateNode;
    using PseudoStateModelNode;
    //using TransitionNode;
    /*

<#
  flags : no_auto_initial,  local_default,  auto_initial

  state NManager
  {
      $> Action // entry alternative
      $< Action2 // exit alternative

    initial  => Working
    0  => Working // another initial

    event => terminate; // terminate pseudo state

    event => X;

    [local]
    state NotConnected
    {
        (H)  => Working
    [local]
    Connect  => Working
    Connect2 / Action
    Connect4 ( => Working // local transition syntax
    Connect5 ) => Working // external transition syntax
    Connect3
     {
         Action
         Action2
     }
    }

    [Initial]
    state ClosingPort
    {
        (H*)
        entry / action

        event1  => final
        completion  => State2
        _  => State2 // another completion syntax

        SelfEvent  =>@ // self transition
        SelfEvent2  => self // self transition

        Event1,  Event2  => Working  // many events for one transition
    }

    state Working
    {

     history : Deep  => ABC
     entry
     exit
     {
     Something2
     Something3
     }
        (H*)

      junction j1
      {
      guard1 => a;
      guard2 => b;
      }

     // junction syntax
      a => {guard1 / A1 => b;
             guard2 / A2 => c;
             guard3 / A3 => {
                             guard4 / A4 => e;
                             guard5 / A5=> (j1);
                             else => f;
                             }
             else => d;
            }
            
      merge m1 => A; // merge syntax
      // choice syntax
      a => ${guard1 / A1 => b;
             guard2 / A2 => c;
             guard3 / A3 => {
                             guard4 / A4 => e;
                             guard5 / A5=> (j1);
                             else => f;
                             }
             else => d;
            }
       
            state AnotherSyntax : A
            {
              a => B; //
            }
   }
 }
   #>
    */

  [PegGrammar(Options  =  EmitDebugSources, stateMachine,
  grammar
  {
      any                                             =  ['\u0000'..'\uFFFF'];
      newLine                                         =  "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
      singleLineComment                               =  "//" (!('\n' / '\r') [Any])* newLine?;
      delimitedComment                                =  "/*" (!"*/" [Any])* "*/";
      comment                                         =  singleLineComment / delimitedComment;
      spaces_def                                      =  (' ' / '\t' / '\u000B' / '\u000C' / newLine / comment)*;
      spaces : void                                   =  spaces_def;
      letter                                          =  [Lu,  Ll,  Lt,  Lm,  Lo,  Nl,  Nd] / '_' / '-' / '@' / '*' / '$';
      //target_letter                                   =  letter / '(' / ')' / '[' / ']';
      end_symb  : void                                =  ';'s;
      delimiter : void                                =  ',' / spaces_def;
      s : void                                        =  spaces;
      identifier                                      =  letter+;
      qualified_id                                    =  (letter / '.')+;
      target_id                                       =  identifier;//target_letter+;
      open_brace  : void                              =  "{"s;
      close_brace : void                              =  "}"s;
      slash       : void                              =  '/'s;
      dollar                                          = '$'s;
      numeric                                         = [Nl,  Nd]+;
      
      goto        : void                              =   "=>"s;
      entry_key                                       =  ("entry" / "$>")s;
      exit_key                                        =  ("exit" / "$<")s;
      state_key   : void                              =  "state"s;
      initial_key                                     =  ("initial" / "0")s;
      //flags_key   : void                              =  "flags"s;
      history_key : void                              =  "history"s;
      attr_begin  : void                              =  '['s;
      attr_end    : void                              =  ']'s;
      colon       : void                              =  ':'s;
      point       : void                              =  '.'s;
      comma       : void                              =  ','s;
      equal      : void                               =  '='s;
      open_round_brace : void                         =  '('s;
      close_round_brace : void                        =  ')'s;
      terminate_key                                   = ("terminate" / "X" / "x") s;
      // terminal rules
      // guards
      
      else_guard         : GuardNode                  =  "else"s;
      guard_type         : GuardNode                  =  else_guard / expr_guard;
      syntax_delim       : void                       =  colon / equal;
      
      lit_string         : StateLit                   =  <#"#>s identifier s<#"#>s;
      lit_double         : StateLit                   =  numeric s point numeric? s;
      lit_num            : StateLit                   =  numeric s;
      lit_bool           : StateLit                   =  "true"s / "false"s;
      braces_guard       : StateExpr                  =  '('s guard_expr ')'s;
      var_guard          : StateExpr                  =  identifier s;
      is_in_state        : StateExpr                  =  "in_state"s open_round_brace fully_qualified close_round_brace;
      meth_guard         : StateExpr                  =  method_action;
      lit_guard          : StateExpr                  =  lit_bool / lit_string / lit_double / lit_num;
      
      two_op_expr        : StateBinaryOp              =  "==" / "!=" / ">=" / ">" / "<=" / "<"  / "||" / "&&";
      
      one_op_expr        : StateUnaryOp               =  "!";
      one_op_guard       : StateExpr                  =  one_op_expr s guard_expr;
      simple_guard_expr  : StateExpr                  =  one_op_guard / braces_guard / lit_guard / is_in_state / meth_guard / var_guard;
      guard_expr         : StateExpr                  =  simple_guard_expr (two_op_expr s simple_guard_expr)*;
      
      guard              : GuardNode                  =  attr_begin guard_type attr_end;
      expr_guard         : GuardNode                  =  guard_expr;
      
      fully_qualified    : NameIdentifier             =  target_id (point target_id)* s;
      simple_attrs       : List[NToken]               =  (attr_begin (identifier s comma?)+ attr_end s)+;

      attributes         : List[StateAttribute]       =  simple_attrs;
      delim_action_list  : Actions                    =  '/'s (!end_symb action delimiter?)+ s end_symb;
      block_action_list  : Actions                    =  '/'s "{"s (!close_brace action delimiter?)+ "}"s;
      
      action_list        : Actions                    =  delim_action_list / block_action_list;
      parameters         : List[string]               =  (!close_round_brace identifier s comma?)*;
      empty_action       : FsmAction                  =  '('s ')'s;
      method_action      : FsmAction                  =  identifier s (open_round_brace parameters close_round_brace);
      tran_action        : FsmAction                  =  identifier s (open_round_brace parameters close_round_brace)?;
      action             : FsmAction                  =  empty_action / tran_action;
      
      entry              : StateNode                  =  simple_attrs? entry_key action_list? end_symb?;
      exit               : StateNode                  =  simple_attrs? exit_key action_list? end_symb?;
      do_activity        : StateNode                  =  simple_attrs? "do"s action_list end_symb?;
      
      terminate_node     : StateNode                  =  terminate_key end_symb;
      pseudo_state       : StateNode                  =  initial / history / terminate_node / join; // / junction / choice / merge;
      join               : StateNode                  =  "join"s identifier s goto transition_target;
      //junction           : StateNode                  =  "junction"s identifier s junction_body;
      //junction_body      : List[TargetType]           =  open_brace (!close_brace transition_mark)+ close_brace;
      //junction_target    : TargetType                 =  junction_body;
      //choice             : StateNode                  =  "choice"s identifier s dollar? junction_body;
      //choice_target      : TargetType                 =  dollar junction_body;
      //merge              : StateNode                  =  "merge"s identifier transition_mark;
      simple_target      : TargetType                 =  fully_qualified end_symb;
      //fork_trans_target  : TargetType                 =  simple_target s simple_target s (!end_symb simple_target s delimiter)* end_symb;
      transition_target  : TargetType                 =  /*choice_target / junction_target /*/ simple_target;
      
      trans_act_list     : Actions                    =  '/'s (!goto action s delimiter)*;
      //transition_mark    : StateNode.Transition       =  s guard? trans_act_list? goto transition_target;
      default_transition : StateNode.Transition       =  s trans_act_list? goto transition_target;// s end_symb?;
      internal_trans     : StateNode                  =  identifier s guard? action_list;
      initial            : StateNode                  =  initial_key s guard? trans_act_list? goto transition_target;
      events             : List[TransitionEvent]      =  identifier s (!('[' / '=' / '/') comma identifier s)* s;
      transitions        : List[StateNode]            =  simple_transition*;
      local_goto         : void                       =  "(=>"s;
      ext_goto           : void                       =  ")=>"s / "=>"s;
      
      simple_transition  : StateNode                  =  events guard? trans_act_list? ext_goto transition_target;
      local_trans        : StateNode                  =  events guard? trans_act_list? local_goto  transition_target;
      transition         : StateNode                  =  local_trans / simple_transition / internal_trans;
       
      history_deep       : StateNode                  =  "(H*)"s default_transition?;
      history_shallow    : StateNode                  =  "(H)"s default_transition?;
      history_short      : StateNode                  =  history_deep / history_shallow;
      history_long       : StateNode                  =  history_key colon identifier s default_transition?;
      history            : StateNode                  =  (history_long / history_short) end_symb?;

      machine_decls      : StateNode                  =  simple_transition;
      machine_body       : List[StateNode]            =  open_brace machine_decls* close_brace;
      statemachine       : StateNode                  =  "statemachine"s identifier s parent? machine_body;
      //inlined_fsm        : StateNode                  =  "new"s fsm_key identifier s ':'s identifier s stateBody;
      stateDecl          : StateNode                  =  flags / name / region / pseudo_state / entry / exit / do_activity / transition / state / statemachine;// / inlined_fsm / statemachine;
      stateBody          : List[StateNode]            =  open_brace stateDecl* close_brace;
      parent             : NameIdentifier             =  colon fully_qualified;
      state              : StateNode                  =  attributes? state_key identifier s parent? stateBody;

      region             : StateNode                  =  attr_begin "---" '-'* attr_end;
      flags              : StateNode                  =  "flags"s syntax_delim (identifier s comma?)+ end_symb;
      name               : StateNode                  =  "name"s syntax_delim? identifier s end_symb;
      stateMachine       : StateMachine               =  spaces_def stateDecl+ s;

  })]
  public partial class FsmParser
  {

  }

}


