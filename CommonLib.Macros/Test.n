using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;  

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Test.
  /// </summary>
    [TestClass] 
    public class TreeTest
    {
      [Record]
      class Node[T]
      {
        public node : T;
        public childs : list[Node[T]];
        
        public override ToString() : string
        {
          $"$node, [..$childs]"
        }
      }
      
      [TestMethod]  
      public ReduceTest() : void
      {
        def h = Node('h', [Node('i', [])]);
        def f = Node('f', [h, Node('g', [])]);
        def c = Node('c', [f]);
        def b = Node('b', [Node('d', []), Node('e', [])]);
        def tree = Node('a', [b, c, Node('j', [Node('k', [])])]);
        
        
        
        //def it = TreePostOrderEnumerable('a', x => if (map.ContainsKey(x)) map[x] else Enumerable.Empty());
        //def res = it.NToList();
        def modify_node(tree, childs)
        {
          Node((tree.node :> int + 1) :> char, childs.NToList())
        }
        
        def res = TreeUtils.Reduce(tree, _.childs, modify_node);
        Assert.AreEqual(res.ToString(), "b, [c, [e, [], f, []], d, [g, [i, [j, []], h, []]], k, [l, []]]");
        //ListUtils.EqualsValue(res, ['d', 'e', 'b', 'i', 'h', 'g', 'f', 'c', 'k', 'j', 'a']);
        
    } 
  }
}
