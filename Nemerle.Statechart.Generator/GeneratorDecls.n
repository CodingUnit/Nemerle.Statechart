using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using System.IO;

namespace Nemerle.Statechart
{
  
  using PathNode;
  
  /// <summary>
  /// Description of GeneratorDecls.
  /// </summary>
  public partial class StaticGenerator
  {
    analyser : FsmAnalyser;
    [Accessor]
    ty : TypeBuilder;
    mutable events : list[string];
   
    
    HasDeferedEvents : bool
    {
      get
      {
        !analyser.DeferedEvents.IsEmpty()
      }
    }
    
    [Memoized]
    actions      : list[GenAction]
    {
      get
      {
        analyser.actions.Map(x => GenAction(x, action_for, util))
      }
    }
    
    
    [Memoized]
    path_state_actions : list[TranPath]
    {
      get
      {
        analyser.tran_path_nodes.Filter(x => x.kind == PathKind.Entry || x.kind == PathKind.Exit);
      }
    }
    
    [Memoized]
    transitions : list[StateTransition]
    {
      get
      {
        analyser.all_used_transitions.NToList()
      }
    }
    
    mutable decls : Map[string, ClassMember];
    mutable action_for : Map[string, string]; // source_name * dest_name
    mutable event_for : Map[string, string];
    mutable macro_actions : Map[string, list[PExpr]];
    mutable constructor : option[string];
    mutable guard_for : Map[string, string]; // сторожевые условия объявленные в классе

    ChartName : string;
    
    public init_exprs : list[PExpr] {get;set;default []}
    mutable gen_members : list[ClassMember] = [];
    mutable compile_list : list[TypeBuilder] = [];
    mutable method_decls : list[string];

    [Memoized]
    have_completion : bool
    {
      get
      {
        analyser.DoActivities.Exists(_.need_completion)
      }
    }
     
    FinalizeGen() : void
    {
      Define(gen_members);
      compile_list.Iter(_.Compile());
      when (WithSources) 
      {
      }
    }
    
    public WithSources : bool {get;set;}

    public this(analyser : FsmAnalyser, ty : TypeBuilder)
    {
      this.analyser = analyser;
      this.ty = ty;
      ChartName = ty.Name;
      WithSources = true;
      util = GenUtil(ty, WithSources);
    }

    public Generate() : void
    {
      Init();
      DefineEvents();
      DefineActions();
      DefineGuards();
      DefineTransitionActions();
      DefineDeferedEvents();
      DefineDoActivity();
      DefineInit();
      DefineHistory();
      DefinePseudo();
      FinalizeGen();
    }

  }
}
