using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  using StateTransition;
  using ListUtils;
  /// <summary>
  /// Description of GenerateTransitions.
  /// </summary>
  public partial class StaticGenerator
  {

    GetTransitionFunction(tran : list[StateTransition]) : list[ClassMember]
    {
      tran.Map(x => <[ decl: $(x.Name : usesite)() : State {$(GetTransitionBody(x, GenCtx.Normal()))} ]>);
    }

    GetTransitionFunction(tran : list[string * StateTransition]) : list[ClassMember]
    {
      tran.Map((x, y) => <[ decl: $(x : usesite)() : State {$(GetTransitionBody(y, GenCtx.Normal()))} ]>);
    }

    //GetActions(act : PathNode, inline_suppress : bool = true) : PExpr
    //{
    //  GetActions(act, action_for, inline_suppress)
    //}

    //GetActions(act : IEnumerable[PathNode], inline_suppress : bool = true) : PExpr
    //{
    //  GetActions(act, action_for, inline_suppress)
    //}

    public GetDestination(tran : TransitionDestination, ctx : GenCtx = null) : PExpr
    {
      def ctx = ctx ?? GenCtx.Normal();
      match (tran)
      {
        | TransitionDestination.State(st) => 
            def body = GetExecStateName(st, ctx);
            if (ctx.IsInEventHandler) 
            {
                <[
              _ = fsm;
                  $body;
                ]>
            } else body

        | NoStateChange => if (ctx.IsInEventHandler) <[ fsm.cur_state ]> else <[ cur_state ]>
        | Choice(_, tran, Some(st)) => def target = GetExecStateName(st, ctx);
            DefineTransBody(tran, ctx, target)

        | Choice(_, tran, _) => DefineTransBody(tran, ctx)

        | Terminate => 
            def after = if (ctx.HaveActionsAfter) <[ () ]> else <[ null ]>;
            if (ctx.IsInEventHandler) <[ fsm.Terminate();$after ]> else <[ Terminate();$after ]>

        | History(PseudoStateNode.History(default = Some()) as h) => def name = $"$(h.Name)Run";
            if (ctx.IsInEventHandler) <[ fsm.$(name : usesite)();]> else <[ $(name : usesite)();]>

        | History(PseudoStateNode.History(type = t) as h) =>
            //Name = n, state = p
            def p = h.state;
            def n = h.Name;
            def t = if (p.BothHistories) $"$t" else "";
            def name = $"$(t)HistoryFrom$(p.Name)"; // call function of run history
            if (ctx.IsInEventHandler) <[ fsm.$(n : usesite).$(name : usesite)(fsm) ]> else <[ $(n : usesite).$(name : usesite)(this) ]>;

        | SubRegion(reg, st, from) =>
            def regs = reg.PartOfRegionsOf(from).NToList().Rev();
            // TODO: вынести логику генерации, ctx и переходов в отдельный класс

            def enter_region(r)
            {
              | head :: tail => 

                  def other = head.RegionsExcept(st.ToState);
                  def pat = FsmState.get_pattern(other);
                  def reg = GetExecStateName(head, ctx);
                  def name = $"Initial$pat";
                  def refsm = if (ctx.IsInEventHandler) <[fsm]> else <[ this ]>;
                  <[
                    $reg.$(name : usesite)($refsm, $(enter_region(tail)));
                    $reg
                  ]>

              | _ => def body = GetDestination(st, ctx);
                  if (ctx.IsInEventHandler && regs.Length <= 1) 
                    <[ 
                        _ = fsm;
                        $body
                    ]> else body
            }

            // entering in region
            enter_region(regs);

        | Region(reg) => def target = GetExecStateName(reg, ctx);
              <[
                $target.Initial(this);
                $target
              ]>

        | HistoryRestore(h) => <[ $(h.Name : usesite).GetCopy(0) ]>
        | Fork(reg, tran) => def target = GetExecStateName(reg, ctx);
            def sub_region(t)
            {
              match (t.AtLeastTo)
              {
                | FsmState(type = StateType.SubRegion) as st => st
                | x                                          => x.PartOfSubRegion.Value
              }
            }

            def find(trans, x)
            {
              match (trans.Find((y, _) => x : object == y)) 
              {
                | Some((_, t)) => t
                | _ => <[ null ]>
              }
            }

            def trans = tran.Map(x => (sub_region(x), if (ctx.IsInEventHandler) <[ fsm.$(x.Name : usesite)(); ]> else <[ $(x.Name : usesite)(); ]>));
            def def_this = if (ctx.IsInEventHandler) <[ fsm ]> else <[this]>;
            def parms = def_this :: reg.sub_states.Map(find(trans, _));
            <[
              $(target).Initial(..$parms);
              $target
            ]>

        | Join(join = Join(name = n)) => 
            def fname = $"join$n";
            if (ctx.IsInEventHandler) <[ fsm.$(fname : usesite)++;null ]> else <[ $(fname : usesite)++;null ]>

        //| Final(st, sr, reg, tran) => 
        //    def regname = GetExecStateName(reg, ctx);
        //    def target = GetExecStateName(st, ctx);
        //    def trans = DefineTransBody(tran, ctx);
        //    if (reg.HaveFinal)
        //    {
        //      def hist = reg.ParticipateInHistory;
        //      def hist = GetHistoryClear(hist);
        //    <[
        //      $regname.$(get_sub_region_name(sr) : usesite) = $target;
        //      if ($regname.IsFinal) 
        //      {
        //        $hist;
        //        $trans
        //      } else null
        //    ]>
        //    }
        //    else <[ $target ]>

        | ForceStateChange(nest) => GetForceStateChange(nest, ctx);

        | CheckAfter(check, before, after) =>
            def check = GetCheck(check, ctx);
            def before = GetDestination(before, ctx);
            def nest = GetDestination(after, ctx);
            <[ def st = $before; if ($check) $nest else st ]>
        | JoinedTransition(Join(name = n), tran) => def fname = $"join$n";
            def body = DefineTransBody([tran], ctx);
            <[ $(fname : usesite) = 0;$body ]>
        | EventSend(st, evt)    => 
            if (st.PartOfRegion is Some(r))
            {
              def name = GetExecStateName(r, ctx);
              <[ $name.$(evt.Name : usesite)(this) ]>
            } else
              <[ cur_state.$(evt.Name : usesite)(this) ]>


        | Junction(j)           => get_junction_body(j, ctx)
        //| ChoiceNode(j)         => get_choice_body(j, ctx)
        | TransitionExecute(tr) => if (ctx.IsInEventHandler) <[ fsm.$(tr.Name : usesite)() ]> else <[ $(tr.Name : usesite)() ]>
        | ExitPoint(_)          => <[ null ]>
        | SubMachine            => throw NotImplementedException();
        | _                     => throw InvalidOperationException("unknown destination")
      }
    }

    EvalGuardExpr(expr : PExpr, ctx : GenCtx) : PExpr
    {
      def check_eval(_, after, e)
      {
        if (after)
        match (e)
        {
          | <[ in_state($st) ]>
          | <[ InState($st) ]>   => def st = st.ToString();
                                    def st = GetExecStateName(st, ctx);
                                    if (ctx.IsInEventHandler) <[ fsm.IsInState($st) ]> else <[ IsInState($st) ]>
          | t => t
        } else e
      }

      Macros.TraverseExpr(None(), expr, false, check_eval)
    }

    GetGuardCondExpr(g : GuardNode, ctx : GenCtx) : PExpr
    {
      match (g)
      {
        | GuardNode.Expr(cond) => EvalGuardExpr(cond, ctx)
        //| InState(st) => 
        | _                    => <[ true ]>
      }
    }

    GetCheck(node : CheckNode, ctx : GenCtx) : PExpr
    {
      match (node)
      {
        | Empty         => <[ () ]>
        | Sequence(lst) => def check = lst.Map(x => GetCheck(x, ctx));
                          MergeExprAnd(check)
        | RegionStates(st) => 

            def get_check(reg, st)
            {

              def check_st = reg.sub_states.Map(x => {
                                                  match (st.Find(y => y.PartOfSubRegion.Value : object == x)) 
                                                  {
                                                    | Some(st) => GetExecStateName(st, ctx) 
                                                    | _        => <[ null ]>
                                                  }});

              def reg_state = GetExecStateName(reg, ctx);
              if (st.All(x => x.Lived && x.LivedSubStatesNested.IsEmpty()))
                <[ $reg_state.IsInStateConcrete(..$check_st) ]>
              else 
                <[ $reg_state.IsInState(..$check_st) ]>
            }

            def reg = st.Map(x => x.PartOfRegion.Value);
            if (reg.ElementsEqual((x, y) => x : object == y))
            {
              get_check(reg.Head, st)
            } else
            {
              def group = st.GroupBy(x => x.PartOfRegion.Value.Name);
              def check = group.Select(x => get_check(x.First().PartOfRegion.Value, x));
              MergeExprAnd(check);
            }

        | Join(Join(name = n, joined_tran = jtran), tran) => 
            def reg = jtran.Map(x => x.FromRegion);
            def idx = reg.FindIndex(tran.FromRegion : object == _);
            def fname = $"join$n";
          <[ $(fname : usesite) == $idx ]>

        | Guard(g) => GetGuards(g, ctx)
        | _        => throw InvalidOperationException("unknown check")
      }
    }

    GetGuards(g : GuardNode, ctx : GenCtx) : PExpr
    {
      GetGuardCondExpr(g, ctx);//(_, ctx));
    }

    //GetGuardedBody(tran : StateTransition, body : PExpr, ctx : GenCtx) : PExpr
    //{
    //  match (tran)
    //  {
    //    | StateTransition(executeCheck = check, guard = g) =>

    //        def check = GetCheck(check, ctx);
    //        def check = match (g)
    //                    {
    //                      | Empty => [check]
    //                      | _     => [GetGuardCondExpr(g, ctx), check]
    //                    }
    //        match (check)
    //        {
    //          | [<[ () ]>] => body
    //          | _ => 
    //              def check = MergeExprAnd(check);
    //              <[
    //              {
    //                res:
    //                {
    //                  unless ($check) res(null);
    //                  $body
    //                }
    //              }
    //              ]>
    //        }
    //  }
    //}

    GetPostConditions(body : PExpr, post : TransitionPostConditions, ctx : GenCtx = null) : PExpr
    {
      def ctx = ctx ?? GenCtx.Normal();
      //def pre = <[ def st = $body; ]>;
      match (post)
      {
        | RegionCompletion(reg, tr) => 
          def check_reg = CheckNode.RegionStates(tr.Map(x => x.From));
          def guard = tr.FoldLeft(GuardNode.Empty(), (x, a) => a + x.guard);
          def check_guard = if (tr.Exists(x => x.guard.NotEmpty)) CheckNode.Guard(guard) else CheckNode.Empty();
          def check = check_reg + check_guard;
          def check = GetCheck(check, ctx);
          def name = GetExecStateName(reg, ctx);
          def send_evt = <[ $name.Completion(this) ]>;
          <[
          def st = $body;
          if ($check) $send_evt else st;
          ]>

        | _ => body
      }
    }

    GetPath(path : PathSequence) : PExpr
    {
      def path = GenTranPath(path, action_for, util, analyser.FsmFlags);
      path.TranBody
    }
    
    GetBody(acts : PathSequence, dest : TransitionDestination, post : TransitionPostConditions = null, ctx : GenCtx) : PExpr
    {
      def target = GetDestination(dest, ctx);
      
      def body = GetPath(acts);
      def body = <[
                    $body;
                    $target
                  ]>;

      if (post != null) 
      {
        GetPostConditions(body, post, ctx)
      } else body
    }

    GetTransitionBody(tran : StateTransition, ctx : GenCtx) : PExpr
    {
      get_junction_body(tran.DecisionTree, ctx)
    }

    DefineTransBody(tr : StateTransition, ctx : GenCtx) : PExpr
    {
      def name = tr.Name;
      if (ctx.IsInEventHandler) <[ fsm.$(name : usesite)(); ]> else <[ $(name : usesite)();]>
    }
    
    DefineTransBody(tr : list[StateTransition], ctx : GenCtx, els : PExpr = null) : PExpr
    {
      def get_body(x, a)
      {
          def body = DefineTransBody(x, ctx);
          <[
            def res = $body;
            if (res != null) res else $a
          ]>
      }
      
      match (tr)
      {
        | [tr] => DefineTransBody(tr, ctx)
        | _    => tr.FoldBack(if (els == null) <[ null ]> else els, get_body)
      }
    }

    DefineDeferedEvents() : void
    {
      when (HasDeferedEvents)
      {
        ty.Define(<[decl: mutable defered : List[Event] = List();]>);
        ty.Define(<[decl: CheckDefered() : void
                   {
                     for (mutable i = 0; i < defered.Count; ++i)
                     {
                       def e = defered[i];
                       unless (cur_state.IsDefer(e)) 
                       {
                         Dispatch(e);
                         defered.RemoveAt(i);
                         i--;
                       }
                     }
                   }]>);
        ty.Define(<[decl: Defer(evt : Event) : void
                    {
                      defered.Add(evt)
                    }]>)
      }
    }
    
    DefineDeferedEvents(ty : TypeBuilder, st : FsmState) : void
    {
      def evt = st.deferred_events;
      when (!evt.IsEmpty()) 
      {
        def cases = evt.FoldBack([<[case: _ => false ]>], (x, a) => <[case: | Event.$(x.Name : usesite) => true ]> :: a);
        def is_defer = <[decl: public override IsDefer(evt : Event) : bool { match (evt) { ..$cases } } ]>;
        Define(ty, is_defer);
        def decls = evt.Map(x => <[ decl: public override $(x.Name : usesite)(fsm : $(ChartName : usesite)) : State { fsm.Defer(Event.$(x.Name : usesite)); null }]>);
        Define(ty, decls)
      }
    }
    
    DefineTransitions(ty : TypeBuilder, st : FsmState) : void
    {
      def defs =  if (st.IsTopState) 
                  {
                    Define(ty, <[decl: public virtual IsDefer(_ : Event) : bool { false } ]>);
                    analyser.Events.Map(x => <[decl: public virtual $(x : usesite)(_ : $(ChartName : usesite)) : State {null}]>);
                  } else
                    if (st.Lived)
                    {
                      def group = st.WorkTransitions.GroupBy(x => x.FriendlyTriggerName).Select(x => (x.Key, x.NToList()));
                      DefineDeferedEvents(ty, st);
                      group.MapToList((x, y) => <[decl: 
                            public override $(x : usesite)(fsm : $(ChartName : usesite)) : State {$(DefineTransBody(y, GenCtx.InEventHandler()))}]>)
                    } else 
                    {
                      []
                    }
      Define(ty, defs)
    }

    DefineTransitionActions() : void
    {
      //def trans = analyser.all_transitions.NToList();
      //def trans = trans.RemoveDuplicatesSort((x, y) => StateTransition.Comparer(x, y));
      //def (init : list[StateTransition.Initial], trans) = trans.PartitionType();
      //def trans = init &+ trans;
      def body = GetTransitionFunction(transitions);
      // history paths
      def body_name = analyser.HistoryPaths.FoldLeft([], (x, a) => x.Value.FoldLeft(a, (x, a) => (x.Name, x.transition) :: a));//.Map((x, y) => (x.Name(), y.Map(x => x.transition.Value)));
      //def body = body_name.Map((x, y) => );
      def hist = GetTransitionFunction(body_name);
      Define(hist + body);
    }

  }
}
