using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  using StateTransition;
  using ListUtils;
  /// <summary>
  /// Description of GenerateTransitions.
  /// </summary>
  public partial class StaticGenerator
  {

    GetGroupTransitionName(from : ActiveStateConfig, trigger : StateEvent) : string
    {
      $"Transition$(from)By$trigger"
    }
    
    GetTransitionFunction(tran : Transition) : ClassMember
    {
      <[ decl: $(tran.Name : usesite)() : State { $(GetTransitionBody(tran)) } ]>
    }
    
    GetTransitionFunction(tran : list[string * Transition]) : list[ClassMember]
    {
      def get_body(n, x)
      {
        def name = n;
        <[ decl: $(name : usesite)() : State { $(GetTransitionBody(x)) } ]>
      }
      
      tran.Map(get_body)
    }
    
    GetTransitionName(tran : Transition) : string
    {
      if (tran.Grouped > 1)
      {
        GetGroupTransitionName(tran.Source, tran.Trigger);
      } else tran.Name
    }
    
    GetTransitionFunction(st : ActiveStateConfig) : list[ClassMember]
    {
      def tran = st.transitions;
      //def group = tran.GroupBy(_.Trigger);
      //def group = by_states.GroupBy(x => x.Trigger);
      def get_body(x)
      {
        def name = GetTransitionName(x);
        <[ decl: $(name : usesite)() : State { $(GetTransitionBody(x)) } ]>
      }
      
      tran.Map(get_body);
    }

    //GetTransitionFunction(tran : list[string * Transition]) : list[ClassMember]
    //{
    //  tran.Map((x, y) => <[ decl: $(x : usesite)() : State {$(GetTransitionBody(y))} ]>);
    //}

    //GetActions(act : PathNode, inline_suppress : bool = true) : PExpr
    //{
    //  GetActions(act, action_for, inline_suppress)
    //}

    //GetActions(act : IEnumerable[PathNode], inline_suppress : bool = true) : PExpr
    //{
    //  GetActions(act, action_for, inline_suppress)
    //}

    public GetDestination(tran : TargetDeterminator) : PExpr
    {
      //def ctx = ctx ?? GenCtx.Normal();
      | State(st) =>
            def body = GetExecStateName(st);
            body

        | NoStateChange => <[ cur_state ]>

        | Terminate => <[ Terminate();null ]>

        | History(HPseudoState.History(default = Some()) as h) => def name = $"$(h.Name)Run";
            <[ $(name : usesite)();]>

        | History(HPseudoState.History(type = t) as h) =>
            //Name = n, state = p
            def p = h.state;
            def n = h.Name;
            def t = if (p.history.IsTwo) $"$t" else "";
            def name = $"$(t)HistoryFrom$(p)"; // call function of run history
            //if (ctx.IsInEventHandler) <[ fsm.$(n : usesite).$(name : usesite)(fsm) ]> else 
            <[ $(n : usesite).$(name : usesite)(this) ]>;
        | Completion(st) => match (st.transitions.Find(x => x.Trigger.IsCompletion))
                            {
                              | Some(tran) => <[ $(tran.Name : usesite)() ]>
                              | _          => <[ Terminate();null ]>
                            }
        | _                     => throw InvalidOperationException("unknown destination")
    }

    EvalGuardExpr(expr : PExpr) : PExpr
    {
      def check_eval(_, after, e)
      {
        if (after)
        match (e)
        {
          | <[ in_state($st) ]>
          | <[ InState($st) ]>   => def st = st.ToString();
                                    def st = GetExecStateName(st);
                                    <[ fsm.IsInState($st) ]>
          | t => t
        } else e
      }

      Macros.TraverseExpr(None(), expr, false, check_eval)
    }

    GetGuardCondExpr(g : GuardNode) : PExpr
    {
      match (g)
      {
        | GuardNode.Expr(cond) => EvalGuardExpr(cond)
        //| InState(st) => 
        | _                    => <[ true ]>
      }
    }

    GetGuards(g : GuardNode) : PExpr
    {
      GetGuardCondExpr(g);//(_, ctx));
    }

    //GetGuardedBody(tran : StateTransition, body : PExpr, ctx : GenCtx) : PExpr
    //{
    //  match (tran)
    //  {
    //    | StateTransition(executeCheck = check, guard = g) =>

    //        def check = GetCheck(check, ctx);
    //        def check = match (g)
    //                    {
    //                      | Empty => [check]
    //                      | _     => [GetGuardCondExpr(g, ctx), check]
    //                    }
    //        match (check)
    //        {
    //          | [<[ () ]>] => body
    //          | _ => 
    //              def check = MergeExprAnd(check);
    //              <[
    //              {
    //                res:
    //                {
    //                  unless ($check) res(null);
    //                  $body
    //                }
    //              }
    //              ]>
    //        }
    //  }
    //}

    GetPath(path : PathSequence) : PExpr
    {
      def path = GenTranPath(path, action_for, util, analyser.FsmFlags);
      path.TranBody
    }
    
    GetTransitionBody(tran : Transition) : PExpr
    {
      //def tran = tran.OrderBy(_.Priority); // order transitions by priority
      
      get_junction_body(tran.DecisionTree);//GetBody(t.Path, t.Target);
      
      //tran.FoldBack(<[ null ]>, def_tran)
    }

    DefineTransBody(tr : Transition) : PExpr
    {
      def name = tr.Name;
      <[ $(name : usesite)();]>
    }
    
    DefineHandlerTransBody(tr : Transition) : PExpr
    {
      def name = GetTransitionName(tr);
      <[ fsm.$(name : usesite)();]>
    }
    
    //DefineHandlerTransBody(tr : list[Transition]) : PExpr
    //{
    //  | []          => <[ null ]>
    //  | [tran]      => DefineHandlerTransBody(tran)
    //  | (head :: _) => def from = head.Source;
    //                   def trigger = head.Trigger;
    //                   def name = GetGroupTransitionName(from, trigger);
    //                   <[ fsm.$(name : usesite)();]>
    //}

    DefineDeferedEvents() : void
    {
      when (HasDeferedEvents)
      {
        ty.Define(<[decl: mutable defered : List[Event] = List();]>);
        ty.Define(<[decl: CheckDefered() : void
                   {
                     for (mutable i = 0; i < defered.Count; ++i)
                     {
                       def e = defered[i];
                       unless (cur_state.IsDefer(e)) 
                       {
                         Dispatch(e);
                         defered.RemoveAt(i);
                         i--;
                       }
                     }
                   }]>);
        ty.Define(<[decl: Defer(evt : Event) : void
                    {
                      defered.Add(evt)
                    }]>)
      }
    }
    
    DefineDeferedEvents(ty : TypeBuilder, st : ActiveStateConfig) : void
    {
      def evt = st.deffered_events;
      when (!evt.IsEmpty()) 
      {
        def cases = evt.FoldBack([<[case: _ => false ]>], (x, a) => <[case: | Event.$(x.Name : usesite) => true ]> :: a);
        when (HasDeferedEvents)
        {
          def is_defer = <[decl: public override IsDefer(evt : Event) : bool { match (evt) { ..$cases } } ]>;
          Define(ty, is_defer);
        }
        def decls = evt.Map(x => <[ decl: public override $(x.Name : usesite)(fsm : $(ChartName : usesite)) : State { fsm.Defer(Event.$(x.Name : usesite)); null }]>);
        Define(ty, decls)
      }
    }
    
    DefineTransitions(ty : TypeBuilder, st : ActiveStateConfig) : void
    {
      def defs =  {
                      def group = st.transitions;//.GroupBy(_.Trigger).Select(x => (x.Key, x.NToList()));
                      DefineDeferedEvents(ty, st);
                      group.MapToList(x => <[decl: 
                            public override $(x.Trigger.Name : usesite)(fsm : $(ChartName : usesite)) : State { $(DefineHandlerTransBody(x)) }]>)
                    }
      Define(ty, defs)
    }

    DefineTransitionActions() : void
    {
      //def by_states = transitions.GroupBy(x => x.Source);
      Define(GetTransitionFunction(analyser.InitialTransition));
      foreach (st in ActiveStates)
      {
        def body = GetTransitionFunction(st);
      // history paths
        
        Define(body);
      }
    }

  }
}
