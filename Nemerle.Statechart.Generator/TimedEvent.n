using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System.Timers;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of TimedEvent.
  /// </summary>
  [Record]
  class GenTimedEvent
  {
    public tran : Transition;
    public evt  : StateEvent.Timed;
    public name : string;
    gen : StaticGenerator;
    
    timer_name : string
    {
      [Memoize]
      get
      {
        $"$(name)_timer"
      }
    }
    
    timer : ClassMember
    {
      [Memoize]
      get
      {
        <[decl: $(timer_name : usesite) : Timer = Timer(); ]>
      }
    }
    
    init_expr : PExpr
    {
      [Memoize]
      get
      {
        match (evt.time_expr)
        {
          | TimedExprType.After(t) => def val = t.TotalMilliseconds;
                                      <[
                                         $(timer_name : usesite).AutoReset = false;
                                         $(timer_name : usesite).Interval = $val;
                                         $(timer_name : usesite).Elapsed += $(name : usesite);
                                      ]>;
          | _                      => <[]>
        }
      }
    }
    
    SendEventDecl : ClassMember
    {
      get
      {
        <[decl: $(name : usesite)(_ : object, _ : ElapsedEventArgs) : void
                {
                  PostEvent(TimEvent.$(name : usesite).New)
                }]>
      }
    }
    
    
    public StartCode : PExpr
    {
      [Memoize]
      get
      {
        <[ $(timer_name : usesite).Start() ]>
      }
    }
    
    public DispatchCode : MatchCase
    {
      [Memoize]
      get
      {
        <[case: | TimEvent.$(name : usesite) => cur_state.$(name : usesite)(this) ]>
      }
    }
    
    public StopCode : PExpr
    {
      [Memoize]
      get
      {
        <[ $(timer_name : usesite).Stop() ]>
      }
    }
    
    public DeclInTopState : ClassMember
    {
      [Memoize]
      get
      {
        <[ decl: public virtual $(name : usesite)(_ : $(gen.ChartName : usesite)) : State { null } ]>
      }
    }
    
    public DeclInState(body : PExpr) : ClassMember
    {
      <[ decl: public override $(name : usesite)(fsm : $(gen.ChartName : usesite)) : State { $body } ]>
    }
    
    event_decl : ClassMember.TypeDeclaration
    {
      [Memoize]
      get
      {
        <[ variant_option: | $(name : usesite)
         {
           
          public override ToString() : string
          {
            Name
          }

          public override FullName : string
          {
            get
            {
              $(evt.TargetName)
            }
          }

          public override Name : string 
          {
            get
            {
              $(evt.Name)
            }
          }

          public override GetHashCode() : int
          {
            $(evt.TargetName.GetHashCode())
          }
           
         } ]>
      }
    }
    
    InstanceWoParms : ClassMember
    {
      [Memoize]
      get
      {
        <[decl:
                  public static New : HsmEvent
                  {
                    get
                    {
                      when (instance == null) 
                      {
                        instance = $(name : usesite)()
                      }
                      instance
                    }
                  } ]>
      }
    }

    InstanceField : ClassMember
    {
      [Memoize]
      get
      {
        <[decl: mutable static instance : HsmEvent; ]>;
      }
    }
    
    public Emit() : void
    {
      gen.Define(timer);
      gen.Define(SendEventDecl);
      gen.init_exprs ::= init_expr;
    }
    
    public EventDecl(ty : TypeBuilder) : void
    {
      def ty = ty.DefineNestedTypeWithSource(event_decl);
      ty.Define(InstanceWoParms);
      ty.Define(InstanceField);
      ty.Compile();
    }
  }
}
