using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of DeferredEvents.
  /// </summary>
  [Record]
  class DeferredEvents
  {
    gen : StaticGenerator;
    
    public Emit(ty : TypeBuilder, st : ActiveStateConfig) : void
    {
      def evt = st.deffered_events;
        //def cases = evt.FoldBack([<[case: _ => false ]>], (x, a) => <[case: | Event.$(x.Name : usesite) => true ]> :: a);
        //when (HasDeferedEvents)
        //{
          //def is_defer = <[decl: public override IsDefer(evt : Event) : bool { match (evt) { ..$cases } } ]>;
          //Define(ty, is_defer);
        //}
      def decls = evt.Map(x => <[ decl: public override $(x.Name : usesite)(fsm : $(gen.ChartName : usesite)) : State { fsm.Defer(); null }]>);
      gen.Define(ty, decls)
    }
    
    public Emit() : void
    {
      when (gen.HasDeferedEvents)
      gen.ty.Define(<[decl: Defer() : void
                    {
                      def evt = Evt.evt;
                      PostEventMostPriority(evt)
                    }]>)
    }
  }
}
