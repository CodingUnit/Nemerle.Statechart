using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{
/// <summary>
/// Description of GeneratorImpl.
/// </summary>
  public partial class StaticGenerator
  {
    Define(f : ClassMember) : void
    {
      Define(ty, f);
    }

    Define(ty : TypeBuilder, f : ClassMember) : void
    {
      if (WithSources) _  =  ty.DefineWithSource(f); else ty.Define(f);
    }

    Define(ty : TypeBuilder, lst : IEnumerable[ClassMember]) : void
    {
      foreach (l in lst) Define(ty, l);
    }

    Define(lst : IEnumerable[ClassMember]) : void
    {
      Define(ty, lst);
    }

    DefineNested(ty : TypeBuilder, f : ClassMember.TypeDeclaration) : TypeBuilder
    {
      when (WithSources)
      {
        def man = ty.TyManager;
        man.GenerateFakeSourceCode(ty, f);
      }
      ty.DefineNestedType(f);
    }

    DefineNested(f : ClassMember.TypeDeclaration) : TypeBuilder
    {
      DefineNested(ty, f);
    }

    DefineEvent(name : string) : void
    {
      def evt = <[decl: public event $(name : usesite) : EventHandler;]>;
      def method = <[decl: $($"On$name" : usesite)() : void {$(get_event_call(name))}]>;
      Define([method, evt]);
    }

    DefineEvent(name : string, type : PExpr, pars : list[PParameter], body : PExpr) : void
    {
      def evt = <[decl: public event $(name : usesite) : $type;]>;
      def method = <[decl: $($"On$name" : usesite)(..$pars) : void 
                    {
                    def temp = $(name : usesite);
                    when (temp != null) temp($body);
                    }]>;
      Define([method, evt]);
    }

    static merge_and : PExpr * PExpr -> PExpr = (x, y) => <[ $x && $y ]>;

    DefineActionEvent(name : IEnumerable[GenAction]) : void
    {
      def get_body(n)
      {
        def act_call = get_action_call(n.exec_name);
        def inline = match (n)
                      {
                        | GenAction(Node = PathNode.Entry(inline = lst), InlinedActions = i) 
                        | GenAction(Node = PathNode.Exit(inline = lst), InlinedActions = i) => 
                            def i = i.Select(x => (x.ExecExpr, false));
                            def lst = lst.Select((x, y) => (GetActions(x, action_for, false), y));
                            i.Concat(lst).NToList()

                        | _ => [(<[ () ]>, false)]
                      }

        def (after, before) = inline.Partition((_, x) => x);
        def after  = after.Split()[0];
        def before = before.Split()[0];
        <[
        {..$before}
            $act_call;
            {..$after}
        ]>
      }

      def events = name.Map(x => <[decl: public event $(x.exec_name : usesite) : Action;]>);
      def methods = name.Map(x => <[decl: $(x.end_name : usesite)() : void 
                            {
                                $(get_body(x))
                            }]>);
      Define(events + methods);
    }

    DefineMethod(name : string, body : PExpr) : void
    {
      Define(<[decl: $(name : usesite)() : void {$body}]>)
    }

    DefineMethods(lst : list[string * PExpr]) : void
    {
      def defs = lst.Map((x, y) => <[decl: $(x : usesite)() : void {$y}]>);
      Define(defs)
    }

    get_history_run_name(h : PseudoStateNode.History, x : string) : string
    {
      match (h)
      {
        | PseudoStateNode.History(type = t) when (h.state.BothHistories) => $"$(t)HistoryFrom$x"
        | _                                                                 => $"HistoryFrom$x"
      }
    }

    get_action_call(act : string) : PExpr
    {
    <[
      def temp =  $(act : usesite);
        when (temp != null) temp();
    ]>;
    }

    get_guard_call(act : string) : PExpr
    {
    <[
      def temp =  $(act : usesite);
        if (temp != null) temp(); else false
    ]>;
    }

    get_event_call(act : string) : PExpr
    {
    <[
      def temp =  $(act : usesite);
        when (temp != null) temp(this, null);
    ]>;
    }

    static MergeExprAnd(expr : IEnumerable[PExpr]) : PExpr
    {
      MergeExpr(expr, merge_and)
    }

    static MergeExpr(expr : IEnumerable[PExpr], merge_func : PExpr * PExpr -> PExpr) : PExpr
    {
      def merge_expr(item, res)
      {
        | (<[ () ]>, r) => r
        | (e, <[ () ]>) => e
        | (e, expr)     => merge_func(expr, e)
      }

      expr.Reduce(merge_expr)
    }

    StatesId : StateId
    {
      get
      {
        analyser.StatesId
      }
    }

    StateIdDefaultValue : PExpr
    {
      get
      {
        match (StatesId.Length)
        {
          | 1
          | 2               => <[ 0 ]>
          | x when (x <= 4) => <[ LongId() ]>
          | _               => <[ null ]>
        }
      }
    }

    StateIdType : PExpr
    {
      get
      {
        match (StatesId.Length)
        {
          | 1               => <[ uint ]>
          | 2               => <[ ulong ]>
          | x when (x <= 4) => <[ LongId ]>
          | _               => <[ LongId ]>
        }
      }
    }

    GetId(id : IdType) : PExpr * PExpr
    {
      def get_long_id() : PExpr
      {
        def res = id.Result.NToList();
        def pars =  res.Map(x => <[ $x ]>);
        <[ LongId(..$pars) ]>
      }

      def get_class_long_id() : PExpr
      {
        def res = id.Result.NToList();
        def res = res.FirstElems(_ == 0);
        def pars = res.Select(x => <[ $x ]>);
        def pars = pars.MapIndex((x, i) => <[ id.$($"id$i" : usesite) = $x ]>).NToList();
        <[ 
        def id = LongId();
        {..$pars}
        id
        ]>
      }

      match (analyser.StatesId.Length)
      {
        | 1               => def id = id.UInt; (<[ $(id : uint) ]>, <[ 0 ]>)
        | 2               => def id = id.ULong;(<[ $(id : ulong) ]>, <[ 0 ]>)
        | x when (x <= 4) => (<[ $(get_long_id()) ]>, <[ LongId() ]>)
        | _               => (<[ $(get_class_long_id()) ]>, <[ null ]>)
      }
    }
  }
}
