using System.Windows.Forms.UnsafeNativeMethods;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using System.Threading;


namespace Nemerle.Statechart
{
  public interface ITestStateMachine : INotifyPropertyChanged
  {
    Initiate()                : void;
    PostEvent(evt : string)   : void;
    PostEvent(evt : HsmEvent) : void;
    IsInState(st : string)    : bool;
    event ActionExecuted      : Action[string];
    event TransitionCompleted : EventHandler;
    Terminate()               : void;
    Events                    : IEnumerable[HsmEvent] {get;}
  }

  public partial class FsmTester
  {
    fsm : ITestStateMachine;
    queue : List[string] = List();

    public event OkTest : Action;
    public event Failed : Action;
    public event Print  : Action[string];
    public event Send   : Action[string];

    public static GetTester(this fsm : ITestStateMachine) : FsmTester
    {
      FsmTester(fsm)
    }

    // TODO: сделать без ActionExecuted и TransitionCompleted 
    // пристыковывая ко всем действиям используя внутренний установщик в каждом автомате
    public ConsoleTestInit() : void
    {
      Print  += x => Console.WriteLine($"\n$x");
      Send   += x => Console.WriteLine($"Processing a '$x' ");
      OkTest += _ => Console.WriteLine("Ok");
      Failed += _ => Console.WriteLine("Failed");
      fsm.ActionExecuted += Console.WriteLine;
      fsm.TransitionCompleted += _ => CompleteResult();
    }

    wait_signal : ManualResetEvent = ManualResetEvent(false);

    CompleteResult() : void
    {
      _ = wait_signal.Set();
    }

    OnOkTest() : void
    {
      OkTest?.Invoke()
    }

    OnPrint(str : string) : void
    {
      when (str != null) Print?.Invoke(str)
    }

    OnFailed() : void
    {
      Failed?.Invoke();
    }

    public this(fsm : ITestStateMachine)
    {
      this.fsm = fsm;
      fsm.ActionExecuted += queue.Add;
    }

    static EntryImpl(en : IEnumerable[string]) : IEnumerable[string]
    {
      en.Select(x => $"Entry$(x)")
    }

    static ExitImpl(ex : IEnumerable[string]) : IEnumerable[string]
    {
      ex.Select(x => $"Exit$(x)")
    }

    static ActionsImpl(act : IEnumerable[string]) : IEnumerable[string]
    {
      act
    }

    public static Entry(params en : array[string]) : array[string]
    {
      EntryImpl(en).ToArray()
    }

    public static Exit(params ex : array[string]) : array[string]
    {
      ExitImpl(ex).ToArray()
    }

    public static Actions(params act : array[string]) : array[string]
    {
      ActionsImpl(act).ToArray()
    }

    prepare() : void
    {
      queue.Clear()
    }

    Test(func : void -> void, res : string, params acts : array[string]) : bool
    {
      prepare();
      func();
      def acts = if (res != null) acts.Append(Entry(res)) else Actions(acts);
      def acts = if (acts.Length == queue.Count()) acts.ZipLazy(queue).All(_ == _) else false;
      def state = res == null || fsm.IsInState(res);
      state && acts
    }

    SendEvent(evt : HsmEvent) : void
    {
      Send?.Invoke(evt.Name);
      _ = wait_signal.Reset();
      fsm.PostEvent(evt);
      _ = wait_signal.WaitOne()
    }

    SendEvent(evt : string) : void
    {
      Send?.Invoke(evt);
      _ = wait_signal.Reset();
      fsm.PostEvent(evt);
      _ = wait_signal.WaitOne()
    }
    
    public TestCond(evt : string, res : string, params acts : array[string]) : bool
    {
      Test(_ => SendEvent(evt), res, acts)
    }
    
    public TestCond(evt : HsmEvent, res : string, params acts : array[string]) : bool
    {
      Test(_ => SendEvent(evt), res, acts)
    }

    public TestStateCond(evt : HsmEvent, res : string) : bool
    {
      Test(_ => SendEvent(evt), res)
    }

    public TestCond(evt : string, res : string, ex : list[string], act : list[string], en : list[string]) : bool
    {
      def acts = ExitImpl(ex).Concat(ActionsImpl(act)).Concat(EntryImpl(en)).ToArray();
      Test(_ => SendEvent(evt), res, acts)
    }
    
    public TestCond(evt : HsmEvent, res : string, ex : list[string], act : list[string], en : list[string]) : bool
    {
      def acts = ExitImpl(ex).Concat(ActionsImpl(act)).Concat(EntryImpl(en)).ToArray();
      Test(_ => SendEvent(evt), res, acts)
    }

    public InitiateName(name : string, res : string, params acts : array[string]) : void
    {
      OnPrint(name);
      if (InitiateCond(res, acts)) OnOkTest() else OnFailed()
    }

    public Test(evt : HsmEvent, res : string) : void
    {
      if (TestCond(evt, res)) OnOkTest() else OnFailed()
    }

    public Test(evt : string, res : string, params acts : array[string]) : void
    {
      if (TestCond(evt, res, acts)) OnOkTest() else OnFailed()
    }
    
    public TestName(name : string, evt : HsmEvent, res : string, params acts : array[string]) : void
    {
      OnPrint(name);
      if (TestCond(evt, res, acts)) OnOkTest() else OnFailed()
    }

    public Test(evt : HsmEvent, res : string, params acts : array[string]) : void
    {
      TestName(null, evt, res, acts)
    }

    public TestName(name : string, evt : HsmEvent, res : string) : void
    {
      OnPrint(name);
      if (TestCond(evt, res)) OnOkTest() else OnFailed()
    }

    public TestName(name : string, evt : HsmEvent, res : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      OnPrint(name);
      if (TestCond(evt, res, ex, act, en)) OnOkTest() else OnFailed()
    }

    public Test(evt : string, res : string, ex : list[string], en : list[string]) : void
    {
      if (TestCond(evt, res, ex, [], en)) OnOkTest() else OnFailed()
    }
    
    public Test(evt : string, res : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      if (TestCond(evt, res, ex, act, en)) OnOkTest() else OnFailed()
    }
    
    public Test(evt : HsmEvent, res : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      TestName(null, evt, res, ex, act, en)
    }

    public Test(evt : HsmEvent, ex : list[string], act : list[string], en : list[string]) : void
    {
      TestName(null, evt, ex, act, en)
    }

    public Test(name : string, evt : HsmEvent, ex : list[string], en : list[string]) : void
    {
      TestName(name, evt, ex, [], en)
    }

    public Test(evt : HsmEvent, ex : list[string], en : list[string]) : void
    {
      TestName(null, evt, ex, [], en)
    }

    public TestName(name : string, evt : HsmEvent, ex : list[string], act : list[string], en : list[string]) : void
    {
      def res = en.Last();
      TestName(name, evt, res, ex, act, en.ChopLast().NToList());
    }

    InitiateCond(res : string, acts : array[string]) : bool
    {
      Test(fsm.Initiate, res, acts)
    }

    public InitiateName(name : string, en : list[string]) : void
    {
      def res = en.Last();
      InitiateName(name, res, EntryImpl(en.ChopLast()).ToArray())
    }

    public Initiate(en : list[string]) : void
    {
      def res = en.Last();
      InitiateName(null, res, EntryImpl(en.ChopLast()).ToArray())
    }

    public Initiate(res : string, params acts : array[string]) : void
    {
      InitiateName(null, res, acts.ToArray())
    }


  }

}
