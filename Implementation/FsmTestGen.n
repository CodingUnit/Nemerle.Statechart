using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Nemerle.Statechart
{

  using System.Console;
  
  variant ActionType
  {
    | Initiate
    | SendEvent {evt : string;}
    | SetProperty { prop : string; value : string; }
    | Terminate
    | UnknownEvent { text : string }
    | Error {text : string;}
  }

  [Record]
  class Result
  {
    public state : string;
    public act   : list[string];
  }
  
  /// <summary>
  /// Description of FsmTestGen.
  /// </summary>
  public partial class FsmTester
  {
    public GenConsoleTest(data : string) : void
    {
      def lines = data.SplitToList('\n');
      def _lines = lines.Filter(x => x != "Ok");

    }

    public exit_string : string {get;set;default "exit"}

    mutable canceled : bool;

    mutable history : list[ActionType * Result];

    public GenerateTest(code_file : string, out_file : string) : void
    {
      def create_param(st, act)
      {
        def (entry : list[string], other) = act.Partition(x => x.StartsWith("Entry"));
        def (exit : list[string], other)  = other.Partition(x : string => x.StartsWith("Exit"));
        def act : list[string] = other;
        def entry = entry.Map(x => x.TrimStart("Entry"));
        def exit  = exit.Map(x => x.TrimStart("Exit"));
        def st_equal = st == entry.Last();
        def entry = entry.Map(x => $<#"$x"#>);
        def act   = act.Map(x => $<#"$x"#>);
        def exit  = exit.Map(x => $<#"$x"#>);
        def ex_act_empty = exit.IsEmpty() && act.IsEmpty();
        def act = if (act.IsEmpty()) "" else $<#, ..$(act;", ")#>;
        if (st_equal) 
        {
          def entry = $<#[..$(entry;", ")]#>;
          if (ex_act_empty) $<#[..$(entry;", ")]#> else $<#[..$(exit;", ")]$act, $entry#>
        } else 
        {
          def exit = $<#, [..$(exit;", ")]#>;
          def entry = $<#, [..$(entry;", ")]#>;
          if (ex_act_empty) $<#"$st"$entry#> else $<#"$st"$exit$entry#>
        }
      }
      
      def get_event_variant2(e, st, act)
      {
        match (e)
        {
          | ActionType.Initiate => def str = create_param(st, act);
                                   $<#tester.Initiate($str);#>
                                   
          | SendEvent(e)        => def str = create_param(st, act);
                                   $<#tester.Test("$e", $str);#>
          | _                   => ""
        }
      }
      
      def gen_test(e, act)
      {
        def state = act.state;
        def act = act.act;
        match (e)
        {
          | ActionType.Initiate => def gen2 = get_event_variant2(e, state, act);
                                   def gen1 = {
                                                def act = act.Map(x => $<#"$x"#>);
                                                $<#tester.Initiate("$state", ..$(act;", "));#>
                                              };
                                   if (gen2.Length <= gen1.Length) gen2 else gen1
                                   
          | SendEvent(ev)       => def gen2 = get_event_variant2(e, state, act);
                                   def gen1 = {
                                               def act = act.Map(x => $<#"$x"#>);
                                               $<#tester.Test("$ev", "$state", ..$(act;", "));#>
                                              };
                                   if (gen2.Length <= gen1.Length) gen2 else gen1;
          | SetProperty(n, v)   => $"fsm.$n = $v;"
          | Terminate           => "fsm.Terminate();"
          | _                   => ""
        }
      }

      def gen_out(e, res : Result, a)
      {
        def act = res.act;
        def st = res.state;
        def res = $"[$st]" :: "Ok" :: a;
        match (e)
        {
          | ActionType.Initiate  => def res = act + res;
                                    //"Initiate state machine" :: 
                                    res
          | SendEvent(e)         => def res = act + res;
                                    $"Processing a '$e' " :: res
          | _                    => a
        }
      }

      def history = history.Reverse();
      def str = history.Map(gen_test);
      def out_str = history.FoldBack([], ((act, r), a) => gen_out(act, r, a));
      def str =  $"def fsm = $type_name();" :: "def tester = fsm.GetTester();" :: "tester.ConsoleTestInit();" :: str;
      File.WriteAllLines(code_file, str);
      def out_str = "/*" :: "BEGIN-OUTPUT" :: out_str + ["END-OUTPUT"] + ["*/"];
      File.WriteAllLines(out_file, out_str);
    }

    type_name : string
    {
      get
      {
        fsm.GetType().ToString()
      }
    }
    
    SetProperty(name : string, val : object) : void
    {
      def type = fsm.GetType();
      def prop = type.GetProperty(name);
      prop.SetValue(fsm, val, null);
    }

    GetPropertyValue(name : string) : object
    {
      def type = fsm.GetType();
      def prop = type.GetProperty(name);
      prop.GetValue(fsm, null)
    }
    
    AddHistory(act : ActionType) : void
    {
      def state = fsm.ToString();
      def result = Result(state, queue.NToList());
      history = (act, result) :: history;
    }

    PrintStatus() : void
    {
      WriteLine();
      WriteLine($"[$fsm]");
    }
    
    public StartConsole() : void
    {
      canceled = false;
      Console.WriteLine($"Initiate state machine $type_name");
      prepare();
      history = [];
      ConsoleTestInit();
      fsm.Initiate();
      PrintStatus();
      AddHistory(ActionType.Initiate());

      def loop()
      {
        def text = Console.ReadLine();
        prepare();
        def action = regexp match (text)
                        {
                          | @"terminate"                                => canceled = true;
                                                                           fsm.Terminate();
                                                                           ActionType.Terminate()
                                                                           
                          | @"(?<param>\w+)\s*=\s*(?<value : int>-?\d+)"  => def name = param;
                                                                           def val = value;
                                                                           SetProperty(name, val);
                                                                           ActionType.SetProperty(name, val.ToString())
                                                                           
                          | @"(?<param>\w+)\s*=\s*(?<value>\w+)"        => def name = param;
                                                                           def val = value;
                                                                           SetProperty(name, val);
                                                                           ActionType.SetProperty(name, val.ToString())
                                                                           
                          | @"\s*(?<name>\w+)\s*"                       => if (fsm.Events.Exists(x => x.Name == name))
                                                                           { 
                                                                            SendEvent(name);
                                                                            ActionType.SendEvent(name)
                                                                           } else ActionType.UnknownEvent(name);
                                                                          
                          | _                                           => ActionType.Error(text)
                        }
        match (action)
        {
          | ActionType.Error(str) => WriteLine($"Invalid action $str")
          | SendEvent             => PrintStatus();
                                     AddHistory(action);
          | SetProperty(n, v)     => WriteLine($"Property '$n' setted to '$v'");
                                     WriteLine($"[$n = $(GetPropertyValue(n))]");
                                     AddHistory(action);
          | UnknownEvent(name)    => WriteLine($"Unknown event for this machine $name")
          | _                     => AddHistory(action);
        }
        if (canceled) () else loop()
      }

      loop();
      
    }
  }
}
