using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace Nemerle.Statechart
{
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Field)]
  macro NeedChange(typeBuilder : TypeBuilder, field : FieldBuilder, params pars : list[PExpr])
  {
    NeedChangeImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, field, pars)
  }
  
  module NeedChangeImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, field : FieldBuilder, aliases : list[PExpr]) : void
    {
      Macros.DefineCTX(typer);
      //assert2(false);
      def fields = typeBuilder.GetFields(BindingFlags.Public | BindingFlags.Instance).Rev();
      def constr = typeBuilder.GetConstructors();
      
      def get_short_name(name)
      {
        def len = name.Length;
        def end = match (len)
        {
          | 1 => 1
          | 2 => 1
          | x when x > 4 => 4
          | _ => 2
        }
        name.Substring(0, end)
      }
      
      def to_camel(s)
      {
        def str = Char.ToUpper(s[0]).ToString() + s.Substring(1);
        def idx = str.IndexOf('_');
        if (idx != -1)
        {
          def rem = str.Substring(idx, 2);
          def rep = Char.ToUpper(rem[1]).ToString();
          str.Replace(rem, rep)
        } else str
      }
      
      match (constr.Find(x => x.GetParameters().Map(x => x.Name).Equals(fields, (x, y) => string.Compare(x, y.Name, StringComparison.CurrentCultureIgnoreCase) == 0)))
      {
        | Some(c) => 
                  def fields = field :: fields.Filter(x => aliases.Exists(y => y.ToString() == x.Name));
                  def names = fields.Map(x => x.Name);
                  def cnames = names.Map(to_camel);
                  def fname = string.Join("", cnames);
                  def name = $"Change$fname";
                  def pars = c.GetParameters().Map(x => x.Name);
                  def sname = fields.Map(x => (get_short_name(x.Name), x.GetMemType()));
                  def sname = sname.Map((x, t) => <[ parameter: $(x : usesite) : $(t : typed) ]>);
                  def type = typeBuilder.GetMemType();
                  def clist = names.Map(x => (x, get_short_name(x)));
                  def body = Utils.CreateConstrBody(<[ $(typeBuilder.Name : usesite) ]>, pars, clist);
                  typeBuilder.Define(<[ decl: public $(name : usesite)(..$sname) : $(type : typed)
                      {
                        $body
                      }]>);
        | _ => Message.Error("Cannot find right constructor for NeedChange");               
      }
      
      // TODO: Add implementation here.
      _ = typeBuilder; _ = field;
    }
  }
}
