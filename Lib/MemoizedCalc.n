using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Property)]
  macro MemoizedCalc(typeBuilder : TypeBuilder, prop : ClassMember.Property, params pars : list[PExpr])
  {
      //assert2(false);
    MemoizedCalcImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, prop, pars)
  }

  //[MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Property)]
  //macro NotifyPropertyChange(typeBuilder : TypeBuilder, prop : ClassMember.Property, params pars : list[PExpr])
  //{
  //  assert2(false);
  //  NotifyPropertyChangeImpl.DoTransform1(Macros.ImplicitCTX(), typeBuilder, prop, pars)
  //  //NeedChangeImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, prop, pars)
  //}
  /// <summary>
  /// Description of NotifyPropertyChange.
  /// </summary>
  module MemoizedCalcImpl
  {
    
    public DoTransform(_ : Typer, typeBuilder : TypeBuilder, prop : ClassMember.Property, aliases : list[PExpr]) : void
    {
      def setter = prop.setter;
      //def is_auto = is_auto(getter, setter); 
      match (prop.getter)
      {
        | Some(getter) => 

            //when (is_auto)
            //{
              //def name = Macros.NewSymbol(prop.Name);
              //getter.Body = <[ $(name : name) ]>;

              //def type = prop.returnType;
              //def field = <[ decl: mutable $(name : name) : $type ]>;
              //typeBuilder.Define(field);
            //}
        
            def type = prop.returnType;
            def name = prop.Name;
            def name = $"$(name)_memoized_calc";
            match (getter.body)
            {
              | FunBody.Parsed(p) => 
                 //def calc = Macros.NewSymbol($"$(name)calc");
                 def bind_init = aliases.Map(x => <[ $(name : usesite).Bind(this, $(x.ToString())) ]>);
                 def init = <[ $(name : usesite).CalcFunc = _ => $p ]>;
                 
                 def cons = Utils.GetCtors(typeBuilder);
                 cons.Iter(x => x.Body = <[ $(x.Body); $init; ..$bind_init ]>);
                 //def member = <[ decl: public $(name : usesite) : MemoizeCalc[$type] = MemoizeCalc($(calc : name)); ]>;
                 //typeBuilder.Define(<[decl: $(calc : name)() : $type { $p }]>);
                 
              | _                 => ()
            }
            def member = <[ decl: public $(name : usesite) : MemoizeCalc[$type] = MemoizeCalc($(prop.Name : string)); ]>;
            typeBuilder.Define(member);

            getter.Body = <[ $(name : usesite).Value ]>;
            match (setter)
            {
              | Some(setter) => setter.Body = <[ $(name : usesite).Value = $("value" : usesite) ]>
              | _            => ()
            }
        | _ => ()      
      }
    }
  }

}
