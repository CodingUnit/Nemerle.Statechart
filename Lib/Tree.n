using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NGenerics.DataStructures.Trees;

using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{
  public enum TreeTraversalType
  {
    | PreOrder
    | PostOrder
    | BreadthFirst
  }
  
  
  /// <summary>
  /// Description of Tree.
  /// </summary>
  public module TreeUtils
  {
    
    public AddRange[T](this tree : GeneralTree[T], lst : IEnumerable[T]) : void
    {
      lst.Iter(x => _ = tree.Add(x))
    }
    
    public AddRange[T](this tree : GeneralTree[T], lst : IEnumerable[GeneralTree[T]]) : void
    {
      lst.Iter(x => _ = tree.Add(x))
    }
    
    public GetEnumerable[T](this tree : GeneralTree[T], TraversalType : TreeTraversalType) : IEnumerable[GeneralTree[T]]
    {
      match (TraversalType)
      {
        | TreeTraversalType.PreOrder     => tree.GetPreOrderEnumerable();
        | TreeTraversalType.BreadthFirst => tree.GetBreadthFirstEnumerable();
        | TreeTraversalType.PostOrder    => tree.GetPostOrderEnumerable();
      }
    }

    public Clone[T](this tree : BinaryTree[T]) : BinaryTree[T]
    {
      def t = tree.Reduce((x, y) => x);
    }
    
    public GetPreOrderEnumerable[T](this tree : GeneralTree[T]) : IEnumerable[GeneralTree[T]]
    {
      def stack = SCG.Stack();
      stack.Push(tree);

      def loop()
      {
        if (stack.Count != 0)
        {
          def current = stack.Pop();
          foreach (c in current.ChildNodes)
          {
            stack.Push(c);
          }
          yield current;
        } else ()
      }

      loop()
    }

    public GetPostOrderEnumerable[T](this tree : GeneralTree[T]) : IEnumerable[GeneralTree[T]]
    {
      def child = SCG.Stack();
      def parent = SCG.Stack();

      child.Push(tree);

      while (child.Count != 0)
      {
        def curr = child.Pop();
        parent.Push(curr);
        foreach (s in curr.ChildNodes) child.Push(s);
      }
      parent
    }

    public  GetBreadthFirstEnumerable[T](this tree : GeneralTree[T]) : IEnumerable[GeneralTree[T]]
    {
      def queue = SCG.Queue();
      queue.Enqueue(tree);

      while (queue.Count != 0)
      {
        def node = queue.Dequeue();
        yield node;
        foreach (s in node.ChildNodes) queue.Enqueue(s)
      }
    }

    public GetEnumerable[T](this tree : BinaryTree[T], TraversalType : TreeTraversalType) : IEnumerable[BinaryTree[T]]
    {
      match (TraversalType)
      {
        | TreeTraversalType.PreOrder     => tree.GetPreOrderEnumerable();
        | TreeTraversalType.BreadthFirst => tree.GetBreadthFirstEnumerable();
        | TreeTraversalType.PostOrder    => tree.GetPostOrderEnumerable();
      }
    }

    public GetPreOrderEnumerable[T](this tree : BinaryTree[T]) : IEnumerable[BinaryTree[T]]
    {
      def stack = SCG.Stack();
      stack.Push(tree);

      def loop()
      {
        if (stack.Count != 0)
        {
          def current = stack.Pop();
          when (current.Left !=  null) stack.Push(current.Left);
          when (current.Right !=  null) stack.Push(current.Right);
          yield current;
        } else ()
      }

      loop()
    }

    public GetPostOrderEnumerable[T](this tree : BinaryTree[T]) : IEnumerable[BinaryTree[T]]
    {
      def child = SCG.Stack();
      def parent = SCG.Stack();

      child.Push(tree);

      while (child.Count != 0)
      {
        def current = child.Pop();
        parent.Push(current);
        when (current.Left !=  null) child.Push(current.Left);
        when (current.Left !=  null) child.Push(current.Right);
      }
      parent
    }

    public  GetBreadthFirstEnumerable[T](this tree : BinaryTree[T]) : IEnumerable[BinaryTree[T]]
    {
      def queue = SCG.Queue();
      queue.Enqueue(tree);

      while (queue.Count != 0)
      {
        def current = queue.Dequeue();
        yield current;
        when (current.Left !=  null) queue.Enqueue(current.Left);
        when (current.Right !=  null) queue.Enqueue(current.Right);
      }
    }

  }
}
