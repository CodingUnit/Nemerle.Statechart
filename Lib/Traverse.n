using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using SCG = System.Collections.Generic;
using System.Diagnostics;
using Wintellect.PowerCollections;

namespace Nemerle.Statechart
{

  public interface ITree[T]
  {
    Current : T { get; }

    MakeIter(iter_childs : IEnumerable[T], child_count : int) : T;
    ChildCount : int {get;}

    SetTreePos(pos : int) : ITraversable[T];
    TreePos : int {get;}
  }

  public interface ITraversable[T] : ITree[T]
  {
    Rebuild(child : IEnumerable[T]) : T;
    GetCode() : int;
    GetChild() :  IEnumerable[ITraversable[T]];
    GetTreePos()    : int;
  }

  public class IIteratorContextBase[T]
  {
    setted : BitArray;
    public manual_rebuild : bool;

    public this() {}

    public this(manual : bool, params lst : array[object]) 
    {
      this(lst);
      manual_rebuild = manual;
    }

    public this(params lst : array[object])
    {
      setted = if (lst.IsMoreThanOne()) BitArray(lst.MapToArray(_ != null)) else null;
    }

    public IsSet(node : ITraversable[T]) : bool
    {
      def code = node.GetCode();
      if (setted != null) setted[code] else true
    }
  }

  public abstract class IIteratorContext[T, TAcc] : IIteratorContextBase[T]
  {
    public this() {}
    public this(params lst : array[object])
    {
      base(lst)
    }

    public abstract Visit(obj : T, acc : IEnumerable[TAcc]) : TAcc;
  }

  public abstract class IReduceIteratorContext[T] : IIteratorContextBase[T]
  {
    public this() {}
    public this(params lst : array[object])
    {
      base(lst)
    }

    public abstract Visit(obj : T, acc : IEnumerable[T]) : T;
  }

  public abstract class IAccIteratorContext[T, TAcc] : IIteratorContextBase[T]
  {
    public this() {}

    public this(params lst : array[object])
    {
      base(lst)
    }

    public abstract Visit(obj : T, acc : TAcc) : TAcc;
  }

  public abstract class ITwoAccIteratorContext[T, TAcc, TAcc2] : IIteratorContextBase[T]
  {
    public this(params lst : array[object])
    {
      base(lst)
    }

    public abstract Visit(obj : T, acc : IEnumerable[TAcc], acc2 : TAcc2) : TAcc * TAcc2;
  }

  public abstract class IReduceTwoAccIteratorContext[T, TAcc] : IIteratorContextBase[T]
  {
    public this() {}

    public this(params lst : array[object])
    {
      base(lst)
    }

    public abstract Visit(obj : T, acc : IEnumerable[T], acc2 : TAcc) : T * TAcc;
  }

  public interface ICachedTraversable[T] : ITraversable[T]
  {
    CachedIterator      : IEnumerable[T] { get; }
    CachedLevelIterator : IEnumerable[T] { get; }
  }

  /// <summary>
  /// Description of Traverse.
  /// </summary>
  public module TraverseUtils
  {

    public Iterator[T](this obj : ICachedTraversable[T]) : IEnumerable[T]
    {
      obj.CachedIterator ?? Iterator(obj : ITraversable[T])
    }

    //public Iterator[T](this obj : ICachedTraversable[T]) : IEnumerable[T]
    //{
    //  def iter = obj.CachedIterator;
    //  if (iter == null) 
    //  {
    //    Iterator(obj : ITraversable[T])
    //  } else iter.Select(x => x.Current)
    //}

    //public FoldDo[T, TAcc](this obj : ICachedTraversable[T], init : TAcc, fold : T * IEnumerable[TAcc] * TAcc -> TAcc) : TAcc
    //{
    //  def fold_func(x, itacc)
    //  {
    //    def a = itacc.Head;
    //    def child = itacc.Tail.PopRev(x.ChildCount);
    //    def acc = fold(x.Current, child, a) :: itacc;
    //    (acc, 
    //  }

    //  def lst= obj.Iterator(); 
    //  lst.FoldLeft([init], fold_func).Head
    //}

    public FoldDo[T, TAcc](this obj : ICachedTraversable[T], init : TAcc, ctx : IIteratorContext[T, TAcc]) : TAcc  where T : class, ITraversable[T]
    {
      def fold_func(x, itacc)
      {
        def len = x.ChildCount;
        def child = itacc.PopRev(len);
        if (ctx.IsSet(x)) 
        {
          ctx.Visit(x.Current, child) :: itacc
        } else itacc
      }

      def lst = obj.Iterator(); 
      lst.FoldLeft([init], fold_func).Head
    }

    public FoldDo[T, TAcc](this obj : ICachedTraversable[T], init : TAcc, ctx : IAccIteratorContext[T, TAcc]) : TAcc  where T : class, ITraversable[T]
    {
      def fold_func(x, a)
      {
        if (ctx.IsSet(x)) ctx.Visit(x.Current, a) else a
      }

      def lst = obj.Iterator();
      lst.FoldLeft(init, fold_func)
    }

    public ReduceDo[T, TAcc](this obj : ICachedTraversable[T], init : TAcc, ctx : IReduceTwoAccIteratorContext[T, TAcc]) : T * TAcc where T : class, ITraversable[T]
    {
      def deque = Deque();

      def make_iter(elem : ITraversable[_], len)
      {
        deque.AddToBack(elem.Current);
        elem.MakeIter(deque, len)
      }

      def fold_func(x : ITraversable[_], _, acc2)
      {
        def len = x.ChildCount;
        def child = deque.PopBackRev(len);
        def (acc, acc2) = if (ctx.IsSet(x)) 
                           {
                             ctx.Visit(x.Current, child, acc2)
                           } else (null, acc2);
        def acc = if (acc != null && ctx.manual_rebuild) make_iter(acc, acc.GetChild().Count()) 
                   else make_iter((acc : ITraversable[T] ?? x).Rebuild(child) : ITraversable[T], len);
        (acc, acc2)
      }

      def lst = obj.Iterator();
      def (res, acc) = lst.Reduce(init, fold_func);
      (res.Current, acc)
    }

    public ReduceDo[T](this obj : ICachedTraversable[T], ctx : IReduceIteratorContext[T]) : T where T : class, ITraversable[T]
    {
      //def stack = SCG.Stack();
      def deque = Deque();

      def make_iter(elem, len)
      {
        deque.AddToBack(elem.Current);
        elem.MakeIter(deque, len)
      }
      
      def lst = obj.Iterator();
      //def height = if (lst.Count() != 0) lst.First().TreePos + 1 else 0;
      //def levels = Nemerle.Collections.LinkedList();
      
      def fold_func(x, _)
      {
        def len = x.ChildCount;
        def child = deque.PopBackRev(len);
        def acc = if (ctx.IsSet(x))
                   {
                     ctx.Visit(x.Current, child) : ITraversable[_]
                   } else null;
        def acc = if (acc != null && ctx.manual_rebuild) 
                   {
                     make_iter(acc, acc.GetChild().Count());
                   } else make_iter((acc ?? x).Rebuild(child) : ITraversable[T], len);
        acc
      }
      
      lst.Reduce(fold_func).Current
    }

    public Iterator[T](this obj : ITraversable[T]) : IEnumerable[T]
    {
      def child = SCG.Stack();
      def parent = SCG.Stack();

      def loop_init()
      {
        if (child.IsEmpty()) () else 
        {
          def curr = child.Pop();
          parent.Push(curr.Current);
          foreach (s in curr.GetChild()) child.Push(s);
          loop_init()
        }
      }

      def loop_init_pos(pos)
      {
        if (child.IsEmpty()) () else 
        {
          def curr = child.Pop();
          parent.Push(curr.Current);
          foreach (s in curr.GetChild()) 
          {
            def s = s.SetTreePos(curr.TreePos + 1);
            child.Push(s);
          }
          loop_init_pos(pos)
        }
      }

      if (obj.TreePos == -1) 
      {
        def pos = obj.GetTreePos();
        def obj = obj.SetTreePos(pos);
        child.Push(obj);
        loop_init_pos(pos)
      } else
      {
        child.Push(obj);
        loop_init();
      }
      parent
    }

    public static LevelOrderIterator[T](this obj : ICachedTraversable[T]) : IEnumerable[T]
    {
      def iter = obj.CachedLevelIterator;
      if (iter == null) 
      {
        LevelOrderIterator(obj)
      } else iter
    }

    public static LevelOrderIterator[T](this obj : ITraversable[T]) : IEnumerable[T]
    {
      def queue = SCG.Queue();
      queue.Enqueue(obj);

      def loop()
      {
        if (queue.IsEmpty()) () else
        {
          def node = queue.Dequeue();
          yield node.Current;
          foreach (s in node.GetChild()) queue.Enqueue(s);
          loop()
        }
      }

      loop()
    }

    public SingleElement[T](elem : T) : IEnumerable[T]
    {
      yield elem
    }

    public DoubleElement[T](elem1 : T, elem2 : T) : IEnumerable[T]
    {
      yield elem1;
      yield elem2;
    }

  }


}
