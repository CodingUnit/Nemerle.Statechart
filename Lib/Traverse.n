using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Statechart
{

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro Traversable(typeBuilder : TypeBuilder)
  {
    TraversableImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder)
  }

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro CachedTraversable(typeBuilder : TypeBuilder)
  {
    TraversableImpl.DoTransformCached(Macros.ImplicitCTX(), typeBuilder)
  }  

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro CachedTraversable(typeBuilder : TypeBuilder)
  {
    TraversableImpl.DoTransformCached2(Macros.ImplicitCTX(), typeBuilder)
  }  

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro CachedTraversable(typeBuilder : TypeBuilder)
  {
    TraversableImpl.DoTransformCached3(Macros.ImplicitCTX(), typeBuilder)
  }  

  module TraversableImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder) : void
    {
      Macros.DefineCTX(typer);
      def name = typeBuilder.Name;
      typeBuilder.AddImplementedInterface(<[ ITraversable[$(name : usesite)] ]>);
      typeBuilder.Define(<[decl: public Current : $(name : usesite) { get { this } }]>);
      //def fields = typeBuilder.GetParsedMembers(false);
      //def fields = fields.OfType.[ClassMember.Field]();
      //def parms = fields.Map(x => <[parameter: $(x.Name : usesite) : $(x.ty) ]>);
      //def body = fields.Map(x => <[ this.$(x.Name : usesite) = $(x.Name : usesite) ]>);
      //typeBuilder.Define(<[decl: public this(..$parms) { ..$body } ]>);
      _ = typeBuilder;
    }

    public DoTransformCached(typer : Typer, typeBuilder : TypeBuilder) : void
    {
      Macros.DefineCTX(typer);
      def name = typeBuilder.Name;
      //def cached = Macros.UseSiteSymbol("cached_iter");
      //def change = "Change$(cached.Id)";
      //assert2(false);
      typeBuilder.AddImplementedInterface(<[ ICachedTraversable[$(name : usesite)] ]>);
      typeBuilder.Define(<[decl: public cached_iter : IEnumerable[$(name : usesite)] * IEnumerable[int]; ]>);
      typeBuilder.Define(<[decl: public cached_level_iter : IEnumerable[$(name : usesite)]; ]>);
      _ = typeBuilder;
    }

    public DoTransformCached2(typer : Typer, typeBuilder : TypeBuilder) : void
    {
      Macros.DefineCTX(typer);
      def name = typeBuilder.Name;
      //def cached = Macros.UseSiteSymbol("cached_iter");
      //def change = "Change$(cached.Id)";
      //assert2(false);
      typeBuilder.Define(<[decl: public Current : $(name : usesite) { get { this } }]>);
      typeBuilder.Define(<[decl: public CachedIterator : IEnumerable[$(name : usesite)] * IEnumerable[int] { get { cached_iter } } ]>);
      typeBuilder.Define(<[decl: public CachedLevelIterator : IEnumerable[$(name : usesite)] { get { cached_level_iter } } ]>);

      typeBuilder.Define(<[decl: public CreateIterator() : $(name : usesite)
                          {
                              def iter = LengthIterator();
                              $(name : usesite) ^& (cached_iter = iter);
                          } ]>);

      typeBuilder.Define(<[decl: public CreateLevelIterator() : $(name : usesite)
                          {
                              def iter = LevelOrderIterator();
                              $(name : usesite) ^& (cached_level_iter = iter);
                          } ]>);
      typeBuilder.Define(<[decl: public this(c : IEnumerable[$(name : usesite)], cl : IEnumerable[$(name : usesite)]) {cached_iter = c; cached_level_iter = cl } ]>);

    }

    public DoTransformCached3(typer : Typer, _typeBuilder : TypeBuilder) : void
    {
      Macros.DefineCTX(typer);
      //def name = typeBuilder.Name;
      //def cached = Macros.UseSiteSymbol("cached_iter");
      //def change = "Change$(cached.Id)";
      //assert2(false);

    }
  }

  public interface ITraversable[T]
  {
    Current : T { get; }
    GetChild() : IEnumerable[ITraversable[T]];
  }

  public interface ICachedTraversable[T] : ITraversable[T]
  {
    CachedIterator : IEnumerable[T] * IEnumerable[int] { get; }
    CachedLevelIterator : IEnumerable[T] { get; }
  }

  /// <summary>
  /// Description of Traverse.
  /// </summary>
  public module TraverseUtils
  {

    //public CachedIterator[T](this obj : ITraversable[T]) : IEnumerable[T] where T : class
    //{
    //  if (obj.Cached == obj.Current : object)
    //  {
    //    obj.CachedIt
    //  } else
    //  {
    //    def iter = Iterator(obj);
    //    obj.CachedIt = iter;
    //    obj.Cached = obj.Current;
    //    iter
    //  }
    //}

    public Iterator[T](this obj : ICachedTraversable[T]) : IEnumerable[T]
    {
      def iter = obj.CachedIterator[0];
      if (iter == null) 
      {
        Iterator(obj : ITraversable[T])
      } else iter
    }

    public Fold[T, TAcc](this obj : ICachedTraversable[T], init : TAcc, fold : T * IEnumerable[TAcc] * TAcc -> TAcc) : TAcc
    {
      def stack = SCG.Stack();
      
      def fold_func(x, l, a)
      {
        def child = stack.PopRev(l);
        def acc = fold(x, child, a);
        stack.Push(acc);
        acc
      }
      
      def (lst, len) = obj.LengthIterator(); 
      lst.Fold2(len, init, fold_func)
    }

    public LengthIterator[T](this obj : ICachedTraversable[T]) : IEnumerable[T] * IEnumerable[int]
    {
      def (iter, len) = obj.CachedIterator;
      if (iter == null) 
      {
        LengthIterator(obj : ITraversable[T])
      } else (iter, len)
    }
    
    public LengthIterator[T](this obj : ITraversable[T]) : IEnumerable[T] * IEnumerable[int]
    {
      def child = SCG.Stack();
      def parent = SCG.Stack();
      def length = SCG.Stack();
      
      def loop_init()
      {
        if (child.IsEmpty()) () else 
        {
          def curr = child.Pop();
          parent.Push(curr.Current);
          def len = child.PushLength(curr.GetChild());
          length.Push(len);
          //foreach (c in curr.GetChild()) child.Push(c);
          loop_init()
        }
      }

      child.Push(obj);
      loop_init();
      (parent, length)
    }
    
    public Iterator[T](this obj : ITraversable[T]) : IEnumerable[T]
    {
      def child = SCG.Stack();
      def parent = SCG.Stack();
      
      def loop_init()
      {
        if (child.IsEmpty()) () else 
        {
          def curr = child.Pop();
          parent.Push(curr.Current);
          foreach (c in curr.GetChild()) child.Push(c);
          loop_init()
        }
      }

      child.Push(obj);
      loop_init();
      parent
    }

    public static LevelOrderIterator[T](this obj : ICachedTraversable[T]) : IEnumerable[T]
    {
      def iter = obj.CachedLevelIterator;
      if (iter == null) 
      {
        LevelOrderIterator(obj : ITraversable[T])
      } else iter
    }

    public static LevelOrderIterator[T](this obj : ITraversable[T]) : IEnumerable[T]
    {
      def queue = SCG.Queue();
      queue.Enqueue(obj);

      def loop()
      {
        if (queue.IsEmpty()) () else
        {
          def node = queue.Dequeue();
          yield node.Current;
          foreach (s in node.GetChild()) queue.Enqueue(s);
          loop()
        }
      }

      loop()
    }

    public SingleElement[T](elem : T) : IEnumerable[T]
    {
      yield elem
    }

    public DoubleElement[T](elem1 : T, elem2 : T) : IEnumerable[T]
    {
      yield elem1;
      yield elem2;
    }

  }

  public variant Tree[T]
  {
    | Item {item : T;}
    | Section {sect : list[Tree[T]];}
  }

  public variant Path[T]
  {
    | Top
    | Node {node : list[Tree[T]]; path : Path[T]; tree : list[Tree[T]];}
  }

  [Record]
  public class Loc[T]
  {
    public tree : Tree[T];
    public path : Path[T];

    public Left() : Loc[T] 
    {
      match (path)
      {
        | Top => throw InvalidOperationException("left at top")
        | Node(l :: left, up, right) => Loc(l, Path.Node(left, up, tree :: right))
        | Node([], _, _) => throw InvalidOperationException("left of first")
      }
    }

    public Right() : Loc[T]
    {
      match (path)
      {
        | Top => throw InvalidOperationException("right at top")
        | Node(left, up, r :: right) => Loc(r, Path.Node(tree :: left , up, right))
        | _ => throw InvalidOperationException("right of last")
      }
    }

    public Up() : Loc[T]
    {

      match (path)
      {
        | Top => throw InvalidOperationException("up at top")
        | Node(left, up, right) => Loc(Tree.Section(left.Rev() + (tree :: right)), up)
      } 
    }

    public Down() : Loc[T]
    {
      match (tree)
      {
        | Item => throw InvalidOperationException("down with item")
        | Section(t1 :: trees) => Loc(t1, Path.Node([], path, trees))
        | _ => throw InvalidOperationException("down of empty")
      } 
    }

    public static Zipper(tree : Tree[T]) : Loc[T]
    {
      Loc(tree, Path.Top())
    }

    public Root : Tree[T]
    {
      get
      {
        def loop(l)
        {
          | Loc where (t, Path.Top) => t
          | _                       => loop(l.Up())
        }

        loop(this)
      }
    }

    public Change(t : Tree[T]) : Loc[T]
    {
      Loc(t, path)
    }

    public InsertRight(t : Tree[T]) : Loc[T]
    {
      match (path)
      {
        | Path.Top              => throw InvalidOperationException("insert at top")
        | Node(left, up, right) => Loc(t, Path.Node(left, up, t :: right))
      }
    }

    public InsertLeft(t : Tree[T]) : Loc[T]
    {
      match (path)
      {
        | Path.Top              => throw InvalidOperationException("insert at top")
        | Node(left, up, right) => Loc(t, Path.Node(t :: left, up, right))
      }
    }

    public InsertDown(t : Tree[T]) : Loc[T]
    {
      match (tree)
      {
        | Item       => throw InvalidOperationException("down with item")
        | Section(s) => Loc(t, Path.Node([], path, s))
      }
    }

    public Delete() : Loc[T]
    {
      match (path)
      {
        | Path.Top                   => throw InvalidOperationException("delete at top")
        | Node(left, up, r :: right) => Loc(r, Path.Node(left, up, right))
        | Node(l :: left, up, [])    => Loc(l, Path.Node(left, up, []))
        | Node([], up, [])           => Loc(Tree.Section([]), up)
      }
    }


  }

}
