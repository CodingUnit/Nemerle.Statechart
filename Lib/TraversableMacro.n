using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro Traverse(_typeBuilder : TypeBuilder, params _expr : list[PExpr])
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Field)]
  macro TraverseIgnore(_typeBuilder : TypeBuilder, _ : ParsedField)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro TraverseIgnore(_typeBuilder : TypeBuilder)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Field)]
  macro TraverseInclude(_typeBuilder : TypeBuilder, _ : ParsedField)
  {
  }

  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro Traversable(typeBuilder : TypeBuilder, params expr : list[PExpr])
  {
    TraversableImpl.DoTransformCached(Macros.ImplicitCTX(), typeBuilder, expr)
  }  

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro Traversable(typeBuilder : TypeBuilder, params expr : list[PExpr])
  {
    TraversableImpl.DoTransformCached2(Macros.ImplicitCTX(), typeBuilder, expr)
  }  

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro Traversable(typeBuilder : TypeBuilder, params expr : list[PExpr])
  {
    TraversableImpl.DoCheckTraverse(Macros.ImplicitCTX(), typeBuilder, expr)
  }

  enum TreeType
  {
    | Unknown
    | Type
    | Enumerable
    | Option
  }

  partial module TraversableImpl
  {
    public DoTransformCached(typer : Typer, typeBuilder : TypeBuilder, _expr : list[PExpr]) : void
    {
      Macros.DefineCTX(typer);
      def name = typeBuilder.Name;
      typeBuilder.AddImplementedInterface(<[ ICachedTraversable[$(name : usesite)] ]>);
      typeBuilder.Define(<[decl: [NeedChange] [RecordIgnore] child_count : int = -1; ]>);
      typeBuilder.Define(<[decl: [NeedChange] [RecordIgnore] cached_iter : IEnumerable[$(name : usesite)]; ]>);
      typeBuilder.Define(<[decl: [NeedChange] [RecordIgnore] cached_level_iter : IEnumerable[$(name : usesite)]; ]>);
    }

    public DoTransformCached2(typer : Typer, typeBuilder : TypeBuilder, _ : list[PExpr]) : void
    {
      Macros.DefineCTX(typer);
      def name = typeBuilder.Name;
      //assert2(false);
      typeBuilder.Define(<[decl: public Current : $(name : usesite) { get { this } }]>);
      typeBuilder.Define(<[decl: public ChildCount : int { get { if (child_count != -1)  child_count else GetChild().Count() } } ]>);
      typeBuilder.Define(<[decl: public CachedIterator : IEnumerable[$(name : usesite)] { get { cached_iter } } ]>);
      typeBuilder.Define(<[decl: public CachedLevelIterator : IEnumerable[$(name : usesite)] { get { cached_level_iter } } ]>);
      typeBuilder.Define(<[decl: public SetChildCount(len : int) : $(name : usesite) {  ChangeChildCount(len)  } ]>);
      typeBuilder.Define(<[decl: public MakeIter(iter : IEnumerable[$(name : usesite)]) : $(name : usesite) {  ChangeCachedIter(iter)  } ]>);
    }

    SortCases[T](data : list[T], expr : T -> PExpr) : list[T]
    {
      def case_sorter(x, y)
      {
        | (<[]>, <[]>)         => 0
        | (<[ $_ ]>, <[]>)     => 1
        | (<[]>, <[ $_ ]>)     => -1
        | _                    => 0
      }


      data.Sort((x, y) => case_sorter(expr(x), expr(y)));
    }

    CollectTraverseOpt(typer : Typer, type : TypeBuilder, expr : list[PExpr]) : list[TypeBuilder * PExpr * list[IField * TreeType]]
    {
      def opts = type.GetVariantOptions();
      def opts = opts.Filter(x => !x.GetModifiers().GetMacroAttributes().Exists(_ is <[ TraverseIgnore ]>));
      
      def get_type(t, a)
      {
        match (t)
        {
          | <[ All ]>         => a
          | <[ $(x : name) ]> => x.Id :: a
          | _                 => a
        }
      }

      def map_types(t, a)
      {
        match (opts.Find(y => y.Name.EndsWith(t)))
        {
          | Some(s) => s :: a
          | _       => a
        }
      }

      def types = expr.FoldBack([], get_type);
      def types = types.FoldBack([], map_types);
      def types = if (types is []) [type] else types;
      
      def collect_trav_opts(t, x, a)
      {
        match (x, expr)
        {
          | (<[ Traverse($expr) ]>, _)
          | (_, [<[ All ]>])        with expr = <[]>
          | (<[ Traverse ]>, _)     with expr = <[]>
          | (_, <[ $(n : name) ]> :: []) when (n.Id == t.Name) with expr = <[]>
          | (_, [])                 with expr = <[]> => get_members(typer, t, expr, types) :: a
          | (_, _ :: [])            with expr = <[]> => match (get_members(typer, t, expr, types))
                                                        {
                                                          | (_, _, []) => a
                                                          | x          => x :: a
                                                        }
          | _ => a
        }
      }
      
      opts.FoldLeft([], (x, a) => x.GetModifiers().GetMacroAttributes().FoldLeft(a, collect_trav_opts(x, _, _)))
    }

  }
}
