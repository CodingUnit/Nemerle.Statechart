//ast.n
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

//using StateNode;

  public enum HistoryType
  {    
    | None
    | Shallow
    | Deep
  }   

  [Record]
  public variant NameIdentifier
  {
    | Name 
    | QualifiedName 
      {
        parts : list[string];
      }

    public pos : int;
    public name : string;

    //public TargetName : string
    //{
    //  get
    //  {
    //    match (this)
    //    {
    //      | NameIdentifier.Name(name = n)
    //      | QualifiedName(name = n)  => n
    //    }
    //  }
    //}

    //public ParentName : string
    //{
    //  get
    //  {
    //    match (this)
    //    {
    //      | NameIdentifier.Name  => null
    //      | QualifiedName(parts = n)  => 
    //    }
    //  }
    //}

    public FullName : string
    {
      get
      {
        match (this)
        {
          | Name(name = n)                     => n
          | QualifiedName(parts = p, name = n) => $<#..$(p;".").$n#>
        }
      }
    }

    public Add(name : string) : NameIdentifier.QualifiedName
    {
      match (this)
      {
        | Name(name = n)                     => QualifiedName(pos, name, n :: [])
        | QualifiedName(name = n, parts = p) => QualifiedName(pos, name, p + [n])
      }
    }
    //public GetState() : string
    //{
    //  def n = FullName;
    //  StateNode.State(n, StateType.State())
    //}

    //public GetNode() : StateNode.State
    //{
    //  StateNode.State(TargetName, StateType.State())
    //}
  }




  [Record]
  public class TransitionEvent
  {      
    public name : string; 

    public override ToString() : string {name}

    public pos : int;

    public static Completion : TransitionEvent = TransitionEvent(null, -1);
  }

  [Record]
  public variant StateAttribute
  {
    | None
    | Initial 
    //| ManualCompletion
    | Unknown {name : string}

    [Accessor]
    pos : int
  }

  [Flags]
  public enum MachineFlag
  {
    | None                 
    | Debug                = 0b000000001 // enable debug point
    | AutoInitial          = 0b000000010 // automatic define initial transition in first defined sub state
    | LocalDefault         = 0b000000100 // local transitions by default rather than external
    | PropertyStateChanged = 0b000001000 // create events of state property on each state change
    | OnlyAnalyse          = 0b000010000 // only analyse don't generate anything
    | AutoEntryExitActions = 0b000100000 // auto create events for entry and exit actions for all states
    | TestingFeatures      = 0b001000000 // test functions for test features of fsm
    | TransitionCompleted  = 0b010000000 // transition on complete of transition
    | Logging              = 0b100000000 // logging information to output window
  }

  [Record]
  public class MachineFlags
  {
    [FlagAccessor (AutoInitial, 
                LocalDefault, 
                Debug, 
                //CompletionStrict, 
                PropertyStateChanged, 
                OnlyAnalyse, 
                AutoEntryExitActions,
                TestingFeatures,
                TransitionCompleted,
                Logging
                )]
    [NeedChange]
    public flags : MachineFlag;
    public errors : list[string] = [];

  }

  [Flags]
  public enum ActionFlags
  {
    | None
  }

  [Flags]
  public enum ActivityFlag
  {
    | None
    | NoCancel = 0b0001
    //| Concurrently = 0b0001 // run several activities concurrently in separate task
    //| NoWaitCancel = 0b0010 // no wait of canceling activity
    //| NotLong      = 0b0100 // this is not long activity (eg fast action), this implies that parallel task create with specific option, 
                            // prevents long activity in the planner see TaskCreationOptions.LongRunning (this is default for activities)
  }

  public enum JunctionType
  {
    | Junction
    | Choice
    | Merge
  }


  [Record]
  public class JunctionNode : IGeneralTree[JunctionNode]
  {
    public pos : int;
    public guard  : GuardNode;
    public action : option[Actions];
    public to : TargetType;

    public Current : JunctionNode
    {
      get
      {
        this
      }
    }

    public ChildNodes : IEnumerable[IGeneralTree[JunctionNode]]
    {
      get
      {
        match (to)
        {
          | TargetType.PseudoState(PseudoStateModelNode.Junction(nodes = n)) => n
          | _                                                                => Enumerable.Empty()
        }
      }
    }
  }

  [Record]
  public variant PseudoStateModelNode
  {
    | Initial { state : StateNode.Transition; }
    | History
      {
        type : HistoryType;
        default : option[StateNode.Transition];
      }

    | Fork {target : list[TargetType];}
    | Join {name : string;target : TargetType;}
    | Junction
      {
        name  : string;
        nodes : list[JunctionNode];
        type  : JunctionType;

        Name : string
        {
          get
          {
            def type = TypeName(type);
            if (name !=null) $"$type$name" else $"Unnamed$type"
          }
        }

        public static TypeName(type : JunctionType) : string
        {
          | Junction => "Junction"
          | Choice   => "Choice"
          | Merge    => "Merge"
        }

        override ToString() : string {Name}
      }

    | EntryPoint { name : string; tran : StateNode.Transition; }
    | ExitPoint { name : string; tran : option[StateNode.Transition]; }
    | Terminate 

    public pos : int;
  }

  [Record]
  public variant TargetType
  {
    | PseudoState 
      {
        node : PseudoStateModelNode;
      }
    | Final
    //| State 
    //  {
    //    state : StateNode.State;
    //  }
    | Named 
      {
    //parent : StateNode.State; 
        name : string;
      }
    //| SubMachine {machine : StateNode.State; state : string;}
    | Qualified {parent : string; target : TargetType;}
    | Self
    | NoTarget

    public pos : int;

  }

}
