// statenode.n
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using SCG = System.Collections.Generic;
using Nemerle.Compiler;
using CommonLib.Macros;

namespace Nemerle.Statechart
{


  [Record]
  public variant StateType
  {
    | State
    | Final
    | SubMachine { type : string; unresolved : bool }
    | SubRegion
    | Region
    
    public override ToString() : string
    {
      match (this)
      {
        | State            => "State"
        | Final            => "Final"
        | SubMachine(t, _) => $"SubMachine_$t"
        | SubRegion        => "SubRegion"
        | Region           => "Region"
      }
    }
  }

  public enum TransitionKind
  {
    | Internal
    | Local
    | External
    | Initial
    | History
  }

  [Record]
  public variant StateNode : LocatedNode, IGeneralTree[StateNode]
  {
    | Flags
      {
        flags : MachineFlags;
      }

    | Name { name   : string; }
    | Using { from : string;}
    | EventClassDecl
      {
        name    : NameIdentifier;
        events  : list[string];
      }
    | EventDecl 
      { 
        name : string; 
        parms_type : list[string]; 
        
        public override ToString() : string
        {
          $"Event_$name(..$parms_type)"
        }
      }
    | StateMachine
      {
        flags : MachineFlags;
        [NeedChange]
        name  : string;
        state : State;
        usings : list[Using] = [];
        event_decls : list[EventDecl] = [];
        event_classes : list[EventClassDecl] = [];
        errors : list[Error];
        
        GetErrors() : IEnumerable[Error]
        {
          TreeUtils.Fold(state, [], _.sub_states, (x, a) => a.Concat(x.errors)).Concat(errors)
          //StateParts.SelectMany(_.errors)
        }
      }

    | State
      {
        this(pos : int, n : string, type : StateType) { base(pos);name = n; this.type = type; }
        
        name          : string;
        parent        : option[string] = None();
        attributes    : list[StateAttribute] = [];
        entry         : list[Entry] = [];
        exit          : list[Exit] = [];
        [NeedChange]
        transitions   : list[Transition] = [];
        do_activity   : list[DoActivity] = [];
        defer         : list[Defer] = [];
        [NeedChange]
        sub_states    : list[State] = [];
        pseudo_states : list[PseudoState] = [];
        type          : StateType;
        errors        : list[Error] = [];

        public override ToString() : string
        {
          $"StateNode.State $name"
        }
      }

    | Entry
      {
        attrib : ActionFlags;
        action : Actions;
      }
    | Exit
      {
        attrib : ActionFlags;
        action : Actions;
      }
    | Defer
      {
        evt : list[TransitionEvent];
      }
    | Error { node : StateNode; }
    | DoActivity {action : Actions;flags : ActivityFlag;}
    | Transition
      {
        [NeedChange]
        from   : TargetType;
        evt    : list[TransitionEvent] = [];
        guard  : GuardNode;
        action : option[Actions];
        to     : TargetType;
        kind   : TransitionKind;
      }
    | PseudoState
      {
        node : PseudoStateModelNode;
      }

    | Region
    | Sequence { lst : list[StateNode]; }
    
    public ChildNodes : IEnumerable[StateNode]
    {
      [Memoize]
      get
      {
        match (this)
        {
          | StateNode.StateMachine(state = s) => [s]
          | State(sub_states = s)             => s
          | Sequence(s)                       => s.AsEnumerable()
          | _                                 => Enumerable.Empty()
        }
      }
    }
    
    static mutable id : int;
    
    public Id : int
    {
      [Memoize]
      get
      {
        ThreadSafeUtils.LockFreeUpdateValRet(ref id, _ + 1);
      }
    }
    
    public override Equals(obj : object) : bool
    {
      this == obj
    }
    
    public override GetHashCode() : int
    {
      Id
    }
  }

}
